# Language Table
type Language
  @table(name: "Languages", singular: "language", plural: "languages", key: ["id"]) {
  id: UUID! @col(name: "language_id") @default(expr: "uuidV4()")
  name: String! @col(name: "name") # e.g., 'English', 'Spanish'
}

# NFTLanguage Table (Join Table)
type NFTLanguage
  @table(name: "NFTLanguages", key: ["nft", "language"]) {
  nft: NFT! @ref
  language: Language! @ref
}

# UserLanguage Table (Join Table)
type UserLanguage
  @table(name: "UserLanguages", key: ["user", "language"]) {
  user: User! @ref
  language: Language! @ref
}

# VoiceLanguage Table (Join Table)
type VoiceLanguage
  @table(name: "VoiceLanguages", key: ["voice", "language"]) {
  voice: Voice! @ref
  language: Language! @ref
}

# Secondary Language Table
type SecondaryLanguage
  @table(name: "SecondaryLanguages", singular: "secondaryLanguage", plural: "secondaryLanguages", key: ["id"]) {
  id: UUID! @col(name: "secondary_language_id") @default(expr: "uuidV4()")
  proficiency: String! @col(name: "proficiency") # e.g., 'Fluent', 'Conversational'
}

# NFTSecondaryLanguage Table (Join Table)
type NFTSecondaryLanguage
  @table(name: "NFTSecondaryLanguages", key: ["nft", "secondaryLanguage"]) {
  nft: NFT! @ref
  secondaryLanguage: SecondaryLanguage! @ref
}

# UserSecondaryLanguage Table (Join Table)
type UserSecondaryLanguage
  @table(name: "UserSecondaryLanguages", key: ["user", "secondaryLanguage"]) {
  user: User! @ref
  secondaryLanguage: SecondaryLanguage! @ref
}

# VoiceSecondaryLanguage Table (Join Table)
type VoiceSecondaryLanguage
  @table(name: "VoiceSecondaryLanguages", key: ["voice", "secondaryLanguage"]) {
  voice: Voice! @ref
  secondaryLanguage: SecondaryLanguage! @ref
}

# Regional Dialect Table
type RegionalDialect
  @table(name: "RegionalDialects", singular: "regionalDialect", plural: "regionalDialects", key: ["id"]) {
  id: UUID! @col(name: "regional_dialect_id") @default(expr: "uuidV4()")
  name: String! @col(name: "name") # e.g., 'Southern US - Deep South', 'British RP'
}

# NFTRegionalDialect Table (Join Table)
type NFTRegionalDialect
  @table(name: "NFTRegionalDialects", key: ["nft", "regionalDialect"]) {
  nft: NFT! @ref
  regionalDialect: RegionalDialect! @ref
}

# UserRegionalDialect Table (Join Table)
type UserRegionalDialect
  @table(name: "UserRegionalDialects", key: ["user", "regionalDialect"]) {
  user: User! @ref
  regionalDialect: RegionalDialect! @ref
}

# VoiceRegionalDialect Table (Join Table)
type VoiceRegionalDialect
  @table(name: "VoiceRegionalDialects", key: ["voice", "regionalDialect"]) {
  voice: Voice! @ref
  regionalDialect: RegionalDialect! @ref
}

# Time Zone Table
type TimeZone
  @table(name: "TimeZones", singular: "timeZone", plural: "timeZones", key: ["id"]) {
  id: UUID! @col(name: "time_zone_id") @default(expr: "uuidV4()")
  name: String! @col(name: "name") # e.g., 'GMT', 'EST', 'PST'
}

# NFTTimeZone Table (Join Table)
type NFTTimeZone
  @table(name: "NFTTimeZones", key: ["nft", "timeZone"]) {
  nft: NFT! @ref
  timeZone: TimeZone! @ref
}

# UserTimeZone Table (Join Table)
type UserTimeZone
  @table(name: "UserTimeZones", key: ["user", "timeZone"]) {
  user: User! @ref
  timeZone: TimeZone! @ref
}

# VoiceTimeZone Table (Join Table)
type VoiceTimeZone
  @table(name: "VoiceTimeZones", key: ["voice", "timeZone"]) {
  voice: Voice! @ref
  timeZone: TimeZone! @ref
}

# Studio Availability Table
type StudioAvailability
  @table(name: "StudioAvailabilities", singular: "studioAvailability", plural: "studioAvailabilities", key: ["id"]) {
  id: UUID! @col(name: "studio_availability_id") @default(expr: "uuidV4()")
  availability: String! @col(name: "availability") # e.g., 'Remote-only', 'Studio-required'
}

# NFTStudioAvailability Table (Join Table)
type NFTStudioAvailability
  @table(name: "NFTStudioAvailabilities", key: ["nft", "studioAvailability"]) {
  nft: NFT! @ref
  studioAvailability: StudioAvailability! @ref
}

# UserStudioAvailability Table (Join Table)
type UserStudioAvailability
  @table(name: "UserStudioAvailabilities", key: ["user", "studioAvailability"]) {
  user: User! @ref
  studioAvailability: StudioAvailability! @ref
}

# VoiceStudioAvailability Table (Join Table)
type VoiceStudioAvailability
  @table(name: "VoiceStudioAvailabilities", key: ["voice", "studioAvailability"]) {
  voice: Voice! @ref
  studioAvailability: StudioAvailability! @ref
}

# Style Tone Category Table
type StyleToneCategory
  @table(name: "StyleToneCategories", singular: "styleToneCategory", plural: "styleToneCategories", key: ["id"]) {
  id: UUID! @col(name: "style_tone_category_id") @default(expr: "uuidV4()")
  name: String! @col(name: "name") # e.g., 'Commercial', 'Narration', 'Character/Animation', 'Corporate'
}

# Style Tone Option Table
type StyleToneOption
  @table(name: "StyleToneOptions", singular: "styleToneOption", plural: "styleToneOptions", key: ["id"]) {
  id: UUID! @col(name: "style_tone_option_id") @default(expr: "uuidV4()")
  category: StyleToneCategory! @ref
  option: String! @col(name: "option") # e.g., 'Upbeat', 'Fiction'
}

# NFTStyleToneOption Table (Join Table)
type NFTStyleToneOption
  @table(name: "NFTStyleToneOptions", key: ["nft", "styleToneOption"]) {
  nft: NFT! @ref
  styleToneOption: StyleToneOption! @ref
}

# UserStyleToneOption Table (Join Table)
type UserStyleToneOption
  @table(name: "UserStyleToneOptions", key: ["user", "styleToneOption"]) {
  user: User! @ref
  styleToneOption: StyleToneOption! @ref
}

# VoiceStyleToneOption Table (Join Table)
type VoiceStyleToneOption
  @table(name: "VoiceStyleToneOptions", key: ["voice", "styleToneOption"]) {
  voice: Voice! @ref
  styleToneOption: StyleToneOption! @ref
}

# Voice Traits Table
type VoiceTrait
  @table(name: "VoiceTraits", singular: "voiceTrait", plural: "voiceTraits", key: ["id"]) {
  id: UUID! @col(name: "trait_id") @default(expr: "uuidV4()")
  category: String! @col(name: "category") # e.g., 'Pitch', 'Texture', 'Volume Range', 'Versatility'
  value: String! @col(name: "value") # e.g., 'Bass', 'Smooth'
}

# NFTVoiceTrait Table (Join Table)
type NFTVoiceTrait
  @table(name: "NFTVoiceTraits", key: ["nft", "voiceTrait"]) {
  nft: NFT! @ref
  voiceTrait: VoiceTrait! @ref
}

# UserVoiceTrait Table (Join Table)
type UserVoiceTrait
  @table(name: "UserVoiceTraits", key: ["user", "voiceTrait"]) {
  user: User! @ref
  voiceTrait: VoiceTrait! @ref
}

# VoiceVoiceTrait Table (Join Table)
type VoiceVoiceTrait
  @table(name: "VoiceVoiceTraits", key: ["voice", "voiceTrait"]) {
  voice: Voice! @ref
  voiceTrait: VoiceTrait! @ref
}

# Technical Specifications Table
type TechnicalSpecification
  @table(name: "TechnicalSpecifications", singular: "technicalSpecification", plural: "technicalSpecifications", key: ["id"]) {
  id: UUID! @col(name: "tech_spec_id") @default(expr: "uuidV4()")
  audioQuality: String! @col(name: "audio_quality") # e.g., '16-bit', 'Lossless'
  sampleRate: String! @col(name: "sample_rate") # e.g., '44.1kHz'
  equipment: [String] @col(name: "equipment") # e.g., ['Condenser Mic', 'Preamp']
  postProductionCapabilities: [String] @col(name: "post_production_capabilities")
}

# NFTTechnicalSpecification Table (Join Table)
type NFTTechnicalSpecification
  @table(name: "NFTTechnicalSpecifications", key: ["nft", "technicalSpecification"]) {
  nft: NFT! @ref
  technicalSpecification: TechnicalSpecification! @ref
}

# UserTechnicalSpecification Table (Join Table)
type UserTechnicalSpecification
  @table(name: "UserTechnicalSpecifications", key: ["user", "technicalSpecification"]) {
  user: User! @ref
  technicalSpecification: TechnicalSpecification! @ref
}

# VoiceTechnicalSpecification Table (Join Table)
type VoiceTechnicalSpecification
  @table(name: "VoiceTechnicalSpecifications", key: ["voice", "technicalSpecification"]) {
  voice: Voice! @ref
  technicalSpecification: TechnicalSpecification! @ref
}

# Production Quality Table
type ProductionQuality
  @table(name: "ProductionQuality", singular: "productionQuality", plural: "productionQualities", key: ["id"]) {
  id: UUID! @col(name: "production_quality_id") @default(expr: "uuidV4()")
  qualityType: String! @col(name: "quality_type") # e.g., 'Broadcast Ready', 'Professional Grade'
  description: [String] @col(name: "description") # e.g., ['Mastered', 'Vetted']
}

# NFTProductionQuality Table (Join Table)
type NFTProductionQuality
  @table(name: "NFTProductionQualities", key: ["nft", "productionQuality"]) {
  nft: NFT! @ref
  productionQuality: ProductionQuality! @ref
}

# UserProductionQuality Table (Join Table)
type UserProductionQuality
  @table(name: "UserProductionQualities", key: ["user", "productionQuality"]) {
  user: User! @ref
  productionQuality: ProductionQuality! @ref
}

# VoiceProductionQuality Table (Join Table)
type VoiceProductionQuality
  @table(name: "VoiceProductionQualities", key: ["voice", "productionQuality"]) {
  voice: Voice! @ref
  productionQuality: ProductionQuality! @ref
}

# Categories Table
type Category
  @table(name: "Categories", singular: "category", plural: "categories", key: ["id"]) {
  id: UUID! @col(name: "category_id") @default(expr: "uuidV4()")
  name: String! @col(name: "name") # e.g., 'Entertainment & Media'
  subcategories: [String] @col(name: "subcategories") # e.g., ['Animation', 'Film/TV']
}

# NFTCategory Table (Join Table)
type NFTCategory
  @table(name: "NFTCategories", key: ["nft", "category"]) {
  nft: NFT! @ref
  category: Category! @ref
}

# UserCategory Table (Join Table)
type UserCategory
  @table(name: "UserCategories", key: ["user", "category"]) {
  user: User! @ref
  category: Category! @ref
}

# VoiceCategory Table (Join Table)
type VoiceCategory
  @table(name: "VoiceCategories", key: ["voice", "category"]) {
  voice: Voice! @ref
  category: Category! @ref
}

# Experience Levels Table
type ExperienceLevel
  @table(name: "ExperienceLevels", singular: "experienceLevel", plural: "experienceLevels", key: ["id"]) {
  id: UUID! @col(name: "experience_level_id") @default(expr: "uuidV4()")
  level: String! @col(name: "level") # e.g., 'Novice (<2 years)', 'Expert (10+ years)'
  description: [String] @col(name: "description") # e.g., ['Training Stage', 'Industry-recognized']
}

# UserExperience Table (Join Table)
type UserExperience
  @table(name: "UserExperiences", key: ["user", "experienceLevel"]) {
  user: User! @ref
  experienceLevel: ExperienceLevel! @ref
}

# VoiceExperience Table (Join Table)
type VoiceExperience
  @table(name: "VoiceExperiences", key: ["voice", "experienceLevel"]) {
  voice: Voice! @ref
  experienceLevel: ExperienceLevel! @ref
}

# Users Table
type User
  @table(name: "Users", singular: "user", plural: "users", key: ["id"]) {
  id: UUID! @col(name: "user_id") @default(expr: "uuidV4()")
  auth: String! @col(name: "user_auth") @default(expr: "auth.uid")
  walletAddress: String! @col(name: "wallet_address") # User's wallet address
  smartContractAddress: String @col(name: "smart_contract_address") # User's smart contract address
  username: String! @col(name: "username", dataType: "varchar(30)")
  email: String! @col(name: "email")
  geoLocation: String @col(name: "geo_location")
  createdAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

# Voice Table
type Voice
  @table(name: "Voices", singular: "voice", plural: "voices", key: ["id"]) {
  id: UUID! @col(name: "voice_id") @default(expr: "uuidV4()")
  name: String! @col(name: "name") # e.g., 'John Doe Voice'
  description: String @col(name: "description")
  user: User! @ref # Associated User
  createdAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

# NFT Table
type NFT
  @table(name: "NFTs", singular: "nft", plural: "nfts", key: ["id"]) {
  id: UUID! @col(name: "nft_id") @default(expr: "uuidV4()")
  title: String! @col(name: "title")
  description: String @col(name: "description")
  creator: User! @ref # Creator of the NFT
  createdAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
  price: Float! @col(name: "price")
  fileUrl: String! @col(name: "file_url")
  geolocation: String @col(name: "geolocation")
  smartContractAddress: String @col(name: "smart_contract_address") # NFT's smart contract address
}

# Ownership Table
type Ownership
  @table(name: "Ownerships", singular: "ownership", plural: "ownerships", key: ["nft", "owner"]) {
  nft: NFT! @ref
  owner: User! @ref
  acquiredAt: Timestamp! @col(name: "acquired_at") @default(expr: "request.time")
  ownershipType: String! @col(name: "ownership_type") # e.g., 'Primary', 'Secondary'
}

# Transactions Table
type Transaction
  @table(name: "Transactions", singular: "transaction", plural: "transactions", key: ["id"]) {
  id: UUID! @col(name: "transaction_id") @default(expr: "uuidV4()")
  nft: NFT! @ref
  buyer: User! @ref
  seller: User! @ref
  price: Float! @col(name: "price")
  transactionDate: Timestamp! @col(name: "transaction_date") @default(expr: "request.time")
}

# Contract Table
type Contract
  @table(name: "Contracts", singular: "contract", plural: "contracts", key: ["id"]) {
  id: UUID! @col(name: "contract_id") @default(expr: "uuidV4()")
  sourceCode: String @col(name: "source_code") # Contract Source Code
  bytecode: String @col(name: "bytecode") # Contract Bytecode
  abi: String @col(name: "abi") # Contract ABI
  address: String! @col(name: "address") # Contract Address
  deploymentTimestamp: Timestamp! @col(name: "deployment_timestamp") @default(expr: "request.time") # Deployment Timestamp
  deploymentBlockNumber: Int! @col(name: "deployment_block_number") # Deployment Block Number
  deploymentTransactionHash: String! @col(name: "deployment_transaction_hash") # Deployment Transaction Hash
  contactName: String @col(name: "contact_name") # Contact Name
  description: String @col(name: "description") # Contract Description
  author: String @col(name: "author") # Contract Author (Optional)
  license: String @col(name: "license") # Contract License
  version: String @col(name: "version") # Contract Version
  tags: [String] @col(name: "tags") # Tags
}

# ContractNFT Table (Join Table)
type ContractNFT
  @table(name: "ContractNFTs", key: ["contract", "nft"]) {
  contract: Contract! @ref
  nft: NFT! @ref
}

# ContractUser Table (Join Table)
type ContractUser
  @table(name: "ContractUsers", key: ["contract", "user"]) {
  contract: Contract! @ref
  user: User! @ref
}

# ContractVoice Table (Join Table)
type ContractVoice
  @table(name: "ContractVoices", key: ["contract", "voice"]) {
  contract: Contract! @ref
  voice: Voice! @ref
}

# ----------------------- Additional Tables -----------------------

## 1. Marketplace

### Listing Table
type Listing
  @table(name: "Listings", singular: "listing", plural: "listings", key: ["id"]) {
  id: UUID! @col(name: "listing_id") @default(expr: "uuidV4()")
  nft: NFT! @ref
  seller: User! @ref
  price: Float! @col(name: "price")
  currency: String! @col(name: "currency") # e.g., 'ETH', 'USD'
  status: String! @col(name: "status") # e.g., 'Active', 'Sold', 'Cancelled'
  listedAt: Timestamp! @col(name: "listed_at") @default(expr: "request.time")
  expiresAt: Timestamp @col(name: "expires_at") # Optional expiration date
}

### Bid Table
type Bid
  @table(name: "Bids", singular: "bid", plural: "bids", key: ["id"]) {
  id: UUID! @col(name: "bid_id") @default(expr: "uuidV4()")
  listing: Listing! @ref
  bidder: User! @ref
  amount: Float! @col(name: "amount")
  currency: String! @col(name: "currency") # e.g., 'ETH', 'USD'
  placedAt: Timestamp! @col(name: "placed_at") @default(expr: "request.time")
  status: String! @col(name: "status") # e.g., 'Pending', 'Accepted', 'Rejected'
}

### Favorite Table
type Favorite
  @table(name: "Favorites", singular: "favorite", plural: "favorites", key: ["user", "nft"]) {
  user: User! @ref
  nft: NFT! @ref
  favoritedAt: Timestamp! @col(name: "favorited_at") @default(expr: "request.time")
}

## 2. User Activity

### ActivityLog Table
type ActivityLog
  @table(name: "ActivityLogs", singular: "activityLog", plural: "activityLogs", key: ["id"]) {
  id: UUID! @col(name: "activity_log_id") @default(expr: "uuidV4()")
  user: User! @ref
  action: String! @col(name: "action") # e.g., 'Login', 'Purchase', 'Bid'
  details: String @col(name: "details") # Additional details about the action
  timestamp: Timestamp! @col(name: "timestamp") @default(expr: "request.time")
}

### Review Table
type Review
  @table(name: "Reviews", singular: "review", plural: "reviews", key: ["id"]) {
  id: UUID! @col(name: "review_id") @default(expr: "uuidV4()")
  nft: NFT @ref # Optional, if the review is for an NFT
  creator: User @ref # Optional, if the review is for a creator
  reviewer: User! @ref
  rating: Int! @col(name: "rating") # e.g., 1-5
  comment: String @col(name: "comment")
  createdAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

## 3. Roles and Permissions

### Role Table
type Role
  @table(name: "Roles", singular: "role", plural: "roles", key: ["id"]) {
  id: UUID! @col(name: "role_id") @default(expr: "uuidV4()")
  name: String! @col(name: "name") # e.g., 'Admin', 'Creator', 'Buyer'
  description: String @col(name: "description") # Description of the role
}

### UserRole Table (Join Table)
type UserRole
  @table(name: "UserRoles", key: ["user", "role"]) {
  user: User! @ref
  role: Role! @ref
}

### Permission Table
type Permission
  @table(name: "Permissions", singular: "permission", plural: "permissions", key: ["id"]) {
  id: UUID! @col(name: "permission_id") @default(expr: "uuidV4()")
  name: String! @col(name: "name") # e.g., 'Create NFT', 'Edit Contract'
  description: String @col(name: "description")
}

### RolePermission Table (Join Table)
type RolePermission
  @table(name: "RolePermissions", key: ["role", "permission"]) {
  role: Role! @ref
  permission: Permission! @ref
}

## 4. Notifications

### Notification Table
type Notification
  @table(name: "Notifications", singular: "notification", plural: "notifications", key: ["id"]) {
  id: UUID! @col(name: "notification_id") @default(expr: "uuidV4()")
  user: User! @ref
  type: String! @col(name: "type") # e.g., 'BidPlaced', 'NFTSold'
  message: String! @col(name: "message")
  read: Boolean! @col(name: "read") @default(value: false)
  createdAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

## 5. Collections and Portfolios

### Collection Table
type Collection
  @table(name: "Collections", singular: "collection", plural: "collections", key: ["id"]) {
  id: UUID! @col(name: "collection_id") @default(expr: "uuidV4()")
  owner: User! @ref
  name: String! @col(name: "name")
  description: String @col(name: "description")
  createdAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

### CollectionNFT Table (Join Table)
type CollectionNFT
  @table(name: "CollectionNFTs", key: ["collection", "nft"]) {
  collection: Collection! @ref
  nft: NFT! @ref
}

## 6. Messaging and Support

### Message Table
type Message
  @table(name: "Messages", singular: "message", plural: "messages", key: ["id"]) {
  id: UUID! @col(name: "message_id") @default(expr: "uuidV4()")
  sender: User! @ref
  receiver: User! @ref
  content: String! @col(name: "content")
  sentAt: Timestamp! @col(name: "sent_at") @default(expr: "request.time")
  read: Boolean! @col(name: "read") @default(value: false)
}

### SupportTicket Table
type SupportTicket
  @table(name: "SupportTickets", singular: "supportTicket", plural: "supportTickets", key: ["id"]) {
  id: UUID! @col(name: "support_ticket_id") @default(expr: "uuidV4()")
  user: User! @ref
  subject: String! @col(name: "subject")
  description: String! @col(name: "description")
  status: String! @col(name: "status") # e.g., 'Open', 'In Progress', 'Closed'
  createdAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
  updatedAt: Timestamp @col(name: "updated_at")
}

## 7. Royalty Management

### Royalty Table
type Royalty
  @table(name: "Royalties", singular: "royalty", plural: "royalties", key: ["id"]) {
  id: UUID! @col(name: "royalty_id") @default(expr: "uuidV4()")
  nft: NFT! @ref
  creator: User! @ref
  percentage: Float! @col(name: "percentage") # e.g., 5.0 for 5%
}

## 8. Payment Methods

### PaymentMethod Table
type PaymentMethod
  @table(name: "PaymentMethods", singular: "paymentMethod", plural: "paymentMethods", key: ["id"]) {
  id: UUID! @col(name: "payment_method_id") @default(expr: "uuidV4()")
  user: User! @ref
  type: String! @col(name: "type") # e.g., 'Credit Card', 'PayPal', 'Crypto Wallet'
  details: String! @col(name: "details") # Encrypted or tokenized payment details
  isDefault: Boolean! @col(name: "is_default") @default(value: false)
  createdAt: Timestamp! @col(name: "created_at") @default(expr: "request.time")
}

## 9. Analytics

### AnalyticsEvent Table
type AnalyticsEvent
  @table(name: "AnalyticsEvents", singular: "analyticsEvent", plural: "analyticsEvents", key: ["id"]) {
  id: UUID! @col(name: "analytics_event_id") @default(expr: "uuidV4()")
  user: User @ref # Optional, for user-related events
  eventType: String! @col(name: "event_type") # e.g., 'PageView', 'Click', 'Purchase'
  eventData: String @col(name: "event_data") # Additional data related to the event (JSON as String)
  timestamp: Timestamp! @col(name: "timestamp") @default(expr: "request.time")
}

