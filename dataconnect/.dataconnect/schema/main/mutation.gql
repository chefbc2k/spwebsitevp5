extend type Mutation {
  """
  ✨ Insert a single `NFT` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  nft_insert(
    """
    Data object to insert into the table.
    """
    data: NFT_Data!
  ): NFT_KeyOutput! @fdc_generated(from: "NFT", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Ownership` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  ownership_insert(
    """
    Data object to insert into the table.
    """
    data: Ownership_Data!
  ): Ownership_KeyOutput! @fdc_generated(from: "Ownership", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Transaction` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  transaction_insert(
    """
    Data object to insert into the table.
    """
    data: Transaction_Data!
  ): Transaction_KeyOutput! @fdc_generated(from: "Transaction", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `NFT` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  nft_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [NFT_Data!]!
  ): [NFT_KeyOutput!]! @fdc_generated(from: "NFT", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Ownership` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  ownership_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Ownership_Data!]!
  ): [Ownership_KeyOutput!]! @fdc_generated(from: "Ownership", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Transaction` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  transaction_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Transaction_Data!]!
  ): [Transaction_KeyOutput!]! @fdc_generated(from: "Transaction", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `NFT` into the table, based on the primary key. Returns the key of the newly inserted `NFT`.
  """
  nft_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: NFT_Data!
  ): NFT_KeyOutput! @fdc_generated(from: "NFT", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Ownership` into the table, based on the primary key. Returns the key of the newly inserted `Ownership`.
  """
  ownership_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Ownership_Data!
  ): Ownership_KeyOutput! @fdc_generated(from: "Ownership", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Transaction` into the table, based on the primary key. Returns the key of the newly inserted `Transaction`.
  """
  transaction_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Transaction_Data!
  ): Transaction_KeyOutput! @fdc_generated(from: "Transaction", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Update a single `NFT` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  nft_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: NFT_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFT_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: NFT_Data!
  ): NFT_KeyOutput @fdc_generated(from: "NFT", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Ownership` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  ownership_update(
    """
    The key used to identify the object.
    """
    key: Ownership_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Ownership_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Ownership_Data!
  ): Ownership_KeyOutput @fdc_generated(from: "Ownership", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Transaction` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  transaction_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Transaction_Data!
  ): Transaction_KeyOutput @fdc_generated(from: "Transaction", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `NFT` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  nft_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: NFT_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: NFT_Data!
  ): Int! @fdc_generated(from: "NFT", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Ownership` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  ownership_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Ownership_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Ownership_Data!
  ): Int! @fdc_generated(from: "Ownership", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Transaction` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  transaction_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Transaction_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Transaction_Data!
  ): Int! @fdc_generated(from: "Transaction", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `NFT` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  nft_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: NFT_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFT_FirstRow
  ): NFT_KeyOutput @fdc_generated(from: "NFT", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Ownership` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  ownership_delete(
    """
    The key used to identify the object.
    """
    key: Ownership_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Ownership_FirstRow
  ): Ownership_KeyOutput @fdc_generated(from: "Ownership", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Transaction` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  transaction_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow
  ): Transaction_KeyOutput @fdc_generated(from: "Transaction", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `NFT` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  nft_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: NFT_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "NFT", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Ownership` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  ownership_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Ownership_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Ownership", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Transaction` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  transaction_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Transaction_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Transaction", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
