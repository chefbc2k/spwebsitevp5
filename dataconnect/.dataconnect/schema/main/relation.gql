extend type Category {
  """
  ✨ List `NFTCategory` objects in a one-to-many relationship (where `NFTCategory`.`category` is this object).
  """
  nFTCategories_on_category(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTCategory!]! @fdc_generated(from: "NFTCategory.category", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserCategory` objects in a one-to-many relationship (where `UserCategory`.`category` is this object).
  """
  userCategories_on_category(
    """
    Filter condition to narrow down the query results.
    """
    where: UserCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserCategory!]! @fdc_generated(from: "UserCategory.category", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceCategory` objects in a one-to-many relationship (where `VoiceCategory`.`category` is this object).
  """
  voiceCategories_on_category(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceCategory!]! @fdc_generated(from: "VoiceCategory.category", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTCategory` as the join table (a `NFTCategory` object exists where its `category` is this and its `nft` is that).
  """
  nfts_via_NFTCategory(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTCategory", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserCategory` as the join table (a `UserCategory` object exists where its `category` is this and its `user` is that).
  """
  users_via_UserCategory(
    """
    Filter condition to narrow down the query results.
    """
    where: UserCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserCategory", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceCategory` as the join table (a `VoiceCategory` object exists where its `category` is this and its `voice` is that).
  """
  voices_via_VoiceCategory(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceCategory", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type Collection {
  """
  ✨ List `CollectionNFT` objects in a one-to-many relationship (where `CollectionNFT`.`collection` is this object).
  """
  collectionNFTS_on_collection(
    """
    Filter condition to narrow down the query results.
    """
    where: CollectionNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CollectionNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [CollectionNFT!]! @fdc_generated(from: "CollectionNFT.collection", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `CollectionNFT` as the join table (a `CollectionNFT` object exists where its `collection` is this and its `nft` is that).
  """
  nfts_via_CollectionNFT(
    """
    Filter condition to narrow down the query results.
    """
    where: CollectionNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CollectionNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "CollectionNFT", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type Contract {
  """
  ✨ List `ContractNFT` objects in a one-to-many relationship (where `ContractNFT`.`contract` is this object).
  """
  contractNFTS_on_contract(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ContractNFT!]! @fdc_generated(from: "ContractNFT.contract", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ContractUser` objects in a one-to-many relationship (where `ContractUser`.`contract` is this object).
  """
  contractUsers_on_contract(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractUser_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractUser_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ContractUser!]! @fdc_generated(from: "ContractUser.contract", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ContractVoice` objects in a one-to-many relationship (where `ContractVoice`.`contract` is this object).
  """
  contractVoices_on_contract(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractVoice_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractVoice_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ContractVoice!]! @fdc_generated(from: "ContractVoice.contract", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `ContractNFT` as the join table (a `ContractNFT` object exists where its `contract` is this and its `nft` is that).
  """
  nfts_via_ContractNFT(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "ContractNFT", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `ContractUser` as the join table (a `ContractUser` object exists where its `contract` is this and its `user` is that).
  """
  users_via_ContractUser(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractUser_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractUser_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "ContractUser", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `ContractVoice` as the join table (a `ContractVoice` object exists where its `contract` is this and its `voice` is that).
  """
  voices_via_ContractVoice(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractVoice_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractVoice_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "ContractVoice", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type ExperienceLevel {
  """
  ✨ List `UserExperience` objects in a one-to-many relationship (where `UserExperience`.`experienceLevel` is this object).
  """
  userExperiences_on_experienceLevel(
    """
    Filter condition to narrow down the query results.
    """
    where: UserExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserExperience!]! @fdc_generated(from: "UserExperience.experienceLevel", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceExperience` objects in a one-to-many relationship (where `VoiceExperience`.`experienceLevel` is this object).
  """
  voiceExperiences_on_experienceLevel(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceExperience!]! @fdc_generated(from: "VoiceExperience.experienceLevel", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `User` objects using `UserExperience` as the join table (a `UserExperience` object exists where its `experienceLevel` is this and its `user` is that).
  """
  users_via_UserExperience(
    """
    Filter condition to narrow down the query results.
    """
    where: UserExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserExperience", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceExperience` as the join table (a `VoiceExperience` object exists where its `experienceLevel` is this and its `voice` is that).
  """
  voices_via_VoiceExperience(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceExperience", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type Language {
  """
  ✨ List `NFTLanguage` objects in a one-to-many relationship (where `NFTLanguage`.`language` is this object).
  """
  nFTLanguages_on_language(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTLanguage!]! @fdc_generated(from: "NFTLanguage.language", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserLanguage` objects in a one-to-many relationship (where `UserLanguage`.`language` is this object).
  """
  userLanguages_on_language(
    """
    Filter condition to narrow down the query results.
    """
    where: UserLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserLanguage!]! @fdc_generated(from: "UserLanguage.language", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceLanguage` objects in a one-to-many relationship (where `VoiceLanguage`.`language` is this object).
  """
  voiceLanguages_on_language(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceLanguage!]! @fdc_generated(from: "VoiceLanguage.language", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTLanguage` as the join table (a `NFTLanguage` object exists where its `language` is this and its `nft` is that).
  """
  nfts_via_NFTLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserLanguage` as the join table (a `UserLanguage` object exists where its `language` is this and its `user` is that).
  """
  users_via_UserLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: UserLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceLanguage` as the join table (a `VoiceLanguage` object exists where its `language` is this and its `voice` is that).
  """
  voices_via_VoiceLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type Listing {
  """
  ✨ List `Bid` objects in a one-to-many relationship (where `Bid`.`listing` is this object).
  """
  bids_on_listing(
    """
    Filter condition to narrow down the query results.
    """
    where: Bid_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Bid_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Bid!]! @fdc_generated(from: "Bid.listing", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
}
extend type NFT {
  """
  ✨ List `CollectionNFT` objects in a one-to-many relationship (where `CollectionNFT`.`nft` is this object).
  """
  collectionNFTS_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: CollectionNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CollectionNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [CollectionNFT!]! @fdc_generated(from: "CollectionNFT.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ContractNFT` objects in a one-to-many relationship (where `ContractNFT`.`nft` is this object).
  """
  contractNFTS_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ContractNFT!]! @fdc_generated(from: "ContractNFT.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Favorite` objects in a one-to-many relationship (where `Favorite`.`nft` is this object).
  """
  favorites_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: Favorite_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Favorite_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Favorite!]! @fdc_generated(from: "Favorite.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Listing` objects in a one-to-many relationship (where `Listing`.`nft` is this object).
  """
  listings_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: Listing_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Listing_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Listing!]! @fdc_generated(from: "Listing.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTCategory` objects in a one-to-many relationship (where `NFTCategory`.`nft` is this object).
  """
  nFTCategories_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTCategory!]! @fdc_generated(from: "NFTCategory.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTLanguage` objects in a one-to-many relationship (where `NFTLanguage`.`nft` is this object).
  """
  nFTLanguages_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTLanguage!]! @fdc_generated(from: "NFTLanguage.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTProductionQuality` objects in a one-to-many relationship (where `NFTProductionQuality`.`nft` is this object).
  """
  nFTProductionQualities_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTProductionQuality!]! @fdc_generated(from: "NFTProductionQuality.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTRegionalDialect` objects in a one-to-many relationship (where `NFTRegionalDialect`.`nft` is this object).
  """
  nFTRegionalDialects_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTRegionalDialect!]! @fdc_generated(from: "NFTRegionalDialect.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTSecondaryLanguage` objects in a one-to-many relationship (where `NFTSecondaryLanguage`.`nft` is this object).
  """
  nFTSecondaryLanguages_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTSecondaryLanguage!]! @fdc_generated(from: "NFTSecondaryLanguage.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTStudioAvailability` objects in a one-to-many relationship (where `NFTStudioAvailability`.`nft` is this object).
  """
  nFTStudioAvailabilities_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTStudioAvailability!]! @fdc_generated(from: "NFTStudioAvailability.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTStyleToneOption` objects in a one-to-many relationship (where `NFTStyleToneOption`.`nft` is this object).
  """
  nFTStyleToneOptions_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTStyleToneOption!]! @fdc_generated(from: "NFTStyleToneOption.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTTechnicalSpecification` objects in a one-to-many relationship (where `NFTTechnicalSpecification`.`nft` is this object).
  """
  nFTTechnicalSpecifications_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTTechnicalSpecification!]! @fdc_generated(from: "NFTTechnicalSpecification.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTTimeZone` objects in a one-to-many relationship (where `NFTTimeZone`.`nft` is this object).
  """
  nFTTimeZones_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTTimeZone!]! @fdc_generated(from: "NFTTimeZone.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFTVoiceTrait` objects in a one-to-many relationship (where `NFTVoiceTrait`.`nft` is this object).
  """
  nFTVoiceTraits_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTVoiceTrait!]! @fdc_generated(from: "NFTVoiceTrait.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Ownership` objects in a one-to-many relationship (where `Ownership`.`nft` is this object).
  """
  ownerships_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: Ownership_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Ownership_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Ownership!]! @fdc_generated(from: "Ownership.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Review` objects in a one-to-many relationship (where `Review`.`nft` is this object).
  """
  reviews_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Review!]! @fdc_generated(from: "Review.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Royalty` objects in a one-to-many relationship (where `Royalty`.`nft` is this object).
  """
  royalties_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: Royalty_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Royalty_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Royalty!]! @fdc_generated(from: "Royalty.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Transaction` objects in a one-to-many relationship (where `Transaction`.`nft` is this object).
  """
  transactions_on_nft(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Transaction!]! @fdc_generated(from: "Transaction.nft", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Category` objects using `NFTCategory` as the join table (a `NFTCategory` object exists where its `nft` is this and its `category` is that).
  """
  categories_via_NFTCategory(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Category!]! @fdc_generated(from: "NFTCategory", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Collection` objects using `CollectionNFT` as the join table (a `CollectionNFT` object exists where its `nft` is this and its `collection` is that).
  """
  collections_via_CollectionNFT(
    """
    Filter condition to narrow down the query results.
    """
    where: CollectionNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CollectionNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Collection!]! @fdc_generated(from: "CollectionNFT", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Contract` objects using `ContractNFT` as the join table (a `ContractNFT` object exists where its `nft` is this and its `contract` is that).
  """
  contracts_via_ContractNFT(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Contract!]! @fdc_generated(from: "ContractNFT", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Language` objects using `NFTLanguage` as the join table (a `NFTLanguage` object exists where its `nft` is this and its `language` is that).
  """
  languages_via_NFTLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Language!]! @fdc_generated(from: "NFTLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `ProductionQuality` objects using `NFTProductionQuality` as the join table (a `NFTProductionQuality` object exists where its `nft` is this and its `productionQuality` is that).
  """
  productionQualities_via_NFTProductionQuality(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ProductionQuality!]! @fdc_generated(from: "NFTProductionQuality", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `RegionalDialect` objects using `NFTRegionalDialect` as the join table (a `NFTRegionalDialect` object exists where its `nft` is this and its `regionalDialect` is that).
  """
  regionalDialects_via_NFTRegionalDialect(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [RegionalDialect!]! @fdc_generated(from: "NFTRegionalDialect", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `SecondaryLanguage` objects using `NFTSecondaryLanguage` as the join table (a `NFTSecondaryLanguage` object exists where its `nft` is this and its `secondaryLanguage` is that).
  """
  secondaryLanguages_via_NFTSecondaryLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [SecondaryLanguage!]! @fdc_generated(from: "NFTSecondaryLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `StudioAvailability` objects using `NFTStudioAvailability` as the join table (a `NFTStudioAvailability` object exists where its `nft` is this and its `studioAvailability` is that).
  """
  studioAvailabilities_via_NFTStudioAvailability(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StudioAvailability!]! @fdc_generated(from: "NFTStudioAvailability", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `StyleToneOption` objects using `NFTStyleToneOption` as the join table (a `NFTStyleToneOption` object exists where its `nft` is this and its `styleToneOption` is that).
  """
  styleToneOptions_via_NFTStyleToneOption(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StyleToneOption!]! @fdc_generated(from: "NFTStyleToneOption", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `TechnicalSpecification` objects using `NFTTechnicalSpecification` as the join table (a `NFTTechnicalSpecification` object exists where its `nft` is this and its `technicalSpecification` is that).
  """
  technicalSpecifications_via_NFTTechnicalSpecification(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [TechnicalSpecification!]! @fdc_generated(from: "NFTTechnicalSpecification", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `TimeZone` objects using `NFTTimeZone` as the join table (a `NFTTimeZone` object exists where its `nft` is this and its `timeZone` is that).
  """
  timeZones_via_NFTTimeZone(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [TimeZone!]! @fdc_generated(from: "NFTTimeZone", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `Favorite` as the join table (a `Favorite` object exists where its `nft` is this and its `user` is that).
  """
  users_via_Favorite(
    """
    Filter condition to narrow down the query results.
    """
    where: Favorite_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Favorite_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "Favorite", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `Ownership` as the join table (a `Ownership` object exists where its `nft` is this and its `owner` is that).
  """
  users_via_Ownership(
    """
    Filter condition to narrow down the query results.
    """
    where: Ownership_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Ownership_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "Ownership", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `VoiceTrait` objects using `NFTVoiceTrait` as the join table (a `NFTVoiceTrait` object exists where its `nft` is this and its `voiceTrait` is that).
  """
  voiceTraits_via_NFTVoiceTrait(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTrait!]! @fdc_generated(from: "NFTVoiceTrait", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type Permission {
  """
  ✨ List `RolePermission` objects in a one-to-many relationship (where `RolePermission`.`permission` is this object).
  """
  rolePermissions_on_permission(
    """
    Filter condition to narrow down the query results.
    """
    where: RolePermission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [RolePermission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [RolePermission!]! @fdc_generated(from: "RolePermission.permission", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Role` objects using `RolePermission` as the join table (a `RolePermission` object exists where its `permission` is this and its `role` is that).
  """
  roles_via_RolePermission(
    """
    Filter condition to narrow down the query results.
    """
    where: RolePermission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [RolePermission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Role!]! @fdc_generated(from: "RolePermission", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type ProductionQuality {
  """
  ✨ List `NFTProductionQuality` objects in a one-to-many relationship (where `NFTProductionQuality`.`productionQuality` is this object).
  """
  nFTProductionQualities_on_productionQuality(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTProductionQuality!]! @fdc_generated(from: "NFTProductionQuality.productionQuality", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserProductionQuality` objects in a one-to-many relationship (where `UserProductionQuality`.`productionQuality` is this object).
  """
  userProductionQualities_on_productionQuality(
    """
    Filter condition to narrow down the query results.
    """
    where: UserProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserProductionQuality!]! @fdc_generated(from: "UserProductionQuality.productionQuality", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceProductionQuality` objects in a one-to-many relationship (where `VoiceProductionQuality`.`productionQuality` is this object).
  """
  voiceProductionQualities_on_productionQuality(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceProductionQuality!]! @fdc_generated(from: "VoiceProductionQuality.productionQuality", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTProductionQuality` as the join table (a `NFTProductionQuality` object exists where its `productionQuality` is this and its `nft` is that).
  """
  nfts_via_NFTProductionQuality(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTProductionQuality", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserProductionQuality` as the join table (a `UserProductionQuality` object exists where its `productionQuality` is this and its `user` is that).
  """
  users_via_UserProductionQuality(
    """
    Filter condition to narrow down the query results.
    """
    where: UserProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserProductionQuality", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceProductionQuality` as the join table (a `VoiceProductionQuality` object exists where its `productionQuality` is this and its `voice` is that).
  """
  voices_via_VoiceProductionQuality(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceProductionQuality", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type RegionalDialect {
  """
  ✨ List `NFTRegionalDialect` objects in a one-to-many relationship (where `NFTRegionalDialect`.`regionalDialect` is this object).
  """
  nFTRegionalDialects_on_regionalDialect(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTRegionalDialect!]! @fdc_generated(from: "NFTRegionalDialect.regionalDialect", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserRegionalDialect` objects in a one-to-many relationship (where `UserRegionalDialect`.`regionalDialect` is this object).
  """
  userRegionalDialects_on_regionalDialect(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserRegionalDialect!]! @fdc_generated(from: "UserRegionalDialect.regionalDialect", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceRegionalDialect` objects in a one-to-many relationship (where `VoiceRegionalDialect`.`regionalDialect` is this object).
  """
  voiceRegionalDialects_on_regionalDialect(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceRegionalDialect!]! @fdc_generated(from: "VoiceRegionalDialect.regionalDialect", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTRegionalDialect` as the join table (a `NFTRegionalDialect` object exists where its `regionalDialect` is this and its `nft` is that).
  """
  nfts_via_NFTRegionalDialect(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTRegionalDialect", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserRegionalDialect` as the join table (a `UserRegionalDialect` object exists where its `regionalDialect` is this and its `user` is that).
  """
  users_via_UserRegionalDialect(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserRegionalDialect", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceRegionalDialect` as the join table (a `VoiceRegionalDialect` object exists where its `regionalDialect` is this and its `voice` is that).
  """
  voices_via_VoiceRegionalDialect(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceRegionalDialect", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type Role {
  """
  ✨ List `RolePermission` objects in a one-to-many relationship (where `RolePermission`.`role` is this object).
  """
  rolePermissions_on_role(
    """
    Filter condition to narrow down the query results.
    """
    where: RolePermission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [RolePermission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [RolePermission!]! @fdc_generated(from: "RolePermission.role", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserRole` objects in a one-to-many relationship (where `UserRole`.`role` is this object).
  """
  userRoles_on_role(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRole_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRole_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserRole!]! @fdc_generated(from: "UserRole.role", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Permission` objects using `RolePermission` as the join table (a `RolePermission` object exists where its `role` is this and its `permission` is that).
  """
  permissions_via_RolePermission(
    """
    Filter condition to narrow down the query results.
    """
    where: RolePermission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [RolePermission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Permission!]! @fdc_generated(from: "RolePermission", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserRole` as the join table (a `UserRole` object exists where its `role` is this and its `user` is that).
  """
  users_via_UserRole(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRole_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRole_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserRole", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type SecondaryLanguage {
  """
  ✨ List `NFTSecondaryLanguage` objects in a one-to-many relationship (where `NFTSecondaryLanguage`.`secondaryLanguage` is this object).
  """
  nFTSecondaryLanguages_on_secondaryLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTSecondaryLanguage!]! @fdc_generated(from: "NFTSecondaryLanguage.secondaryLanguage", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserSecondaryLanguage` objects in a one-to-many relationship (where `UserSecondaryLanguage`.`secondaryLanguage` is this object).
  """
  userSecondaryLanguages_on_secondaryLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: UserSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserSecondaryLanguage!]! @fdc_generated(from: "UserSecondaryLanguage.secondaryLanguage", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceSecondaryLanguage` objects in a one-to-many relationship (where `VoiceSecondaryLanguage`.`secondaryLanguage` is this object).
  """
  voiceSecondaryLanguages_on_secondaryLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceSecondaryLanguage!]! @fdc_generated(from: "VoiceSecondaryLanguage.secondaryLanguage", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTSecondaryLanguage` as the join table (a `NFTSecondaryLanguage` object exists where its `secondaryLanguage` is this and its `nft` is that).
  """
  nfts_via_NFTSecondaryLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTSecondaryLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserSecondaryLanguage` as the join table (a `UserSecondaryLanguage` object exists where its `secondaryLanguage` is this and its `user` is that).
  """
  users_via_UserSecondaryLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: UserSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserSecondaryLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceSecondaryLanguage` as the join table (a `VoiceSecondaryLanguage` object exists where its `secondaryLanguage` is this and its `voice` is that).
  """
  voices_via_VoiceSecondaryLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceSecondaryLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type StudioAvailability {
  """
  ✨ List `NFTStudioAvailability` objects in a one-to-many relationship (where `NFTStudioAvailability`.`studioAvailability` is this object).
  """
  nFTStudioAvailabilities_on_studioAvailability(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTStudioAvailability!]! @fdc_generated(from: "NFTStudioAvailability.studioAvailability", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserStudioAvailability` objects in a one-to-many relationship (where `UserStudioAvailability`.`studioAvailability` is this object).
  """
  userStudioAvailabilities_on_studioAvailability(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserStudioAvailability!]! @fdc_generated(from: "UserStudioAvailability.studioAvailability", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceStudioAvailability` objects in a one-to-many relationship (where `VoiceStudioAvailability`.`studioAvailability` is this object).
  """
  voiceStudioAvailabilities_on_studioAvailability(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceStudioAvailability!]! @fdc_generated(from: "VoiceStudioAvailability.studioAvailability", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTStudioAvailability` as the join table (a `NFTStudioAvailability` object exists where its `studioAvailability` is this and its `nft` is that).
  """
  nfts_via_NFTStudioAvailability(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTStudioAvailability", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserStudioAvailability` as the join table (a `UserStudioAvailability` object exists where its `studioAvailability` is this and its `user` is that).
  """
  users_via_UserStudioAvailability(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserStudioAvailability", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceStudioAvailability` as the join table (a `VoiceStudioAvailability` object exists where its `studioAvailability` is this and its `voice` is that).
  """
  voices_via_VoiceStudioAvailability(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceStudioAvailability", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type StyleToneCategory {
  """
  ✨ List `StyleToneOption` objects in a one-to-many relationship (where `StyleToneOption`.`category` is this object).
  """
  styleToneOptions_on_category(
    """
    Filter condition to narrow down the query results.
    """
    where: StyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [StyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StyleToneOption!]! @fdc_generated(from: "StyleToneOption.category", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
}
extend type StyleToneOption {
  """
  ✨ List `NFTStyleToneOption` objects in a one-to-many relationship (where `NFTStyleToneOption`.`styleToneOption` is this object).
  """
  nFTStyleToneOptions_on_styleToneOption(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTStyleToneOption!]! @fdc_generated(from: "NFTStyleToneOption.styleToneOption", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserStyleToneOption` objects in a one-to-many relationship (where `UserStyleToneOption`.`styleToneOption` is this object).
  """
  userStyleToneOptions_on_styleToneOption(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserStyleToneOption!]! @fdc_generated(from: "UserStyleToneOption.styleToneOption", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceStyleToneOption` objects in a one-to-many relationship (where `VoiceStyleToneOption`.`styleToneOption` is this object).
  """
  voiceStyleToneOptions_on_styleToneOption(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceStyleToneOption!]! @fdc_generated(from: "VoiceStyleToneOption.styleToneOption", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTStyleToneOption` as the join table (a `NFTStyleToneOption` object exists where its `styleToneOption` is this and its `nft` is that).
  """
  nfts_via_NFTStyleToneOption(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTStyleToneOption", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserStyleToneOption` as the join table (a `UserStyleToneOption` object exists where its `styleToneOption` is this and its `user` is that).
  """
  users_via_UserStyleToneOption(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserStyleToneOption", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceStyleToneOption` as the join table (a `VoiceStyleToneOption` object exists where its `styleToneOption` is this and its `voice` is that).
  """
  voices_via_VoiceStyleToneOption(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceStyleToneOption", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type TechnicalSpecification {
  """
  ✨ List `NFTTechnicalSpecification` objects in a one-to-many relationship (where `NFTTechnicalSpecification`.`technicalSpecification` is this object).
  """
  nFTTechnicalSpecifications_on_technicalSpecification(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTTechnicalSpecification!]! @fdc_generated(from: "NFTTechnicalSpecification.technicalSpecification", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserTechnicalSpecification` objects in a one-to-many relationship (where `UserTechnicalSpecification`.`technicalSpecification` is this object).
  """
  userTechnicalSpecifications_on_technicalSpecification(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserTechnicalSpecification!]! @fdc_generated(from: "UserTechnicalSpecification.technicalSpecification", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceTechnicalSpecification` objects in a one-to-many relationship (where `VoiceTechnicalSpecification`.`technicalSpecification` is this object).
  """
  voiceTechnicalSpecifications_on_technicalSpecification(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTechnicalSpecification!]! @fdc_generated(from: "VoiceTechnicalSpecification.technicalSpecification", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTTechnicalSpecification` as the join table (a `NFTTechnicalSpecification` object exists where its `technicalSpecification` is this and its `nft` is that).
  """
  nfts_via_NFTTechnicalSpecification(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTTechnicalSpecification", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserTechnicalSpecification` as the join table (a `UserTechnicalSpecification` object exists where its `technicalSpecification` is this and its `user` is that).
  """
  users_via_UserTechnicalSpecification(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserTechnicalSpecification", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceTechnicalSpecification` as the join table (a `VoiceTechnicalSpecification` object exists where its `technicalSpecification` is this and its `voice` is that).
  """
  voices_via_VoiceTechnicalSpecification(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceTechnicalSpecification", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type TimeZone {
  """
  ✨ List `NFTTimeZone` objects in a one-to-many relationship (where `NFTTimeZone`.`timeZone` is this object).
  """
  nFTTimeZones_on_timeZone(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTTimeZone!]! @fdc_generated(from: "NFTTimeZone.timeZone", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserTimeZone` objects in a one-to-many relationship (where `UserTimeZone`.`timeZone` is this object).
  """
  userTimeZones_on_timeZone(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserTimeZone!]! @fdc_generated(from: "UserTimeZone.timeZone", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceTimeZone` objects in a one-to-many relationship (where `VoiceTimeZone`.`timeZone` is this object).
  """
  voiceTimeZones_on_timeZone(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTimeZone!]! @fdc_generated(from: "VoiceTimeZone.timeZone", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTTimeZone` as the join table (a `NFTTimeZone` object exists where its `timeZone` is this and its `nft` is that).
  """
  nfts_via_NFTTimeZone(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTTimeZone", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserTimeZone` as the join table (a `UserTimeZone` object exists where its `timeZone` is this and its `user` is that).
  """
  users_via_UserTimeZone(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserTimeZone", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceTimeZone` as the join table (a `VoiceTimeZone` object exists where its `timeZone` is this and its `voice` is that).
  """
  voices_via_VoiceTimeZone(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceTimeZone", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type User {
  """
  ✨ List `ActivityLog` objects in a one-to-many relationship (where `ActivityLog`.`user` is this object).
  """
  activityLogs_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: ActivityLog_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ActivityLog_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ActivityLog!]! @fdc_generated(from: "ActivityLog.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `AnalyticsEvent` objects in a one-to-many relationship (where `AnalyticsEvent`.`user` is this object).
  """
  analyticsEvents_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: AnalyticsEvent_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [AnalyticsEvent_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [AnalyticsEvent!]! @fdc_generated(from: "AnalyticsEvent.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Bid` objects in a one-to-many relationship (where `Bid`.`bidder` is this object).
  """
  bids_on_bidder(
    """
    Filter condition to narrow down the query results.
    """
    where: Bid_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Bid_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Bid!]! @fdc_generated(from: "Bid.bidder", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Collection` objects in a one-to-many relationship (where `Collection`.`owner` is this object).
  """
  collections_on_owner(
    """
    Filter condition to narrow down the query results.
    """
    where: Collection_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Collection_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Collection!]! @fdc_generated(from: "Collection.owner", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ContractUser` objects in a one-to-many relationship (where `ContractUser`.`user` is this object).
  """
  contractUsers_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractUser_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractUser_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ContractUser!]! @fdc_generated(from: "ContractUser.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Favorite` objects in a one-to-many relationship (where `Favorite`.`user` is this object).
  """
  favorites_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Favorite_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Favorite_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Favorite!]! @fdc_generated(from: "Favorite.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Listing` objects in a one-to-many relationship (where `Listing`.`seller` is this object).
  """
  listings_on_seller(
    """
    Filter condition to narrow down the query results.
    """
    where: Listing_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Listing_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Listing!]! @fdc_generated(from: "Listing.seller", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Message` objects in a one-to-many relationship (where `Message`.`receiver` is this object).
  """
  messages_on_receiver(
    """
    Filter condition to narrow down the query results.
    """
    where: Message_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Message_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Message!]! @fdc_generated(from: "Message.receiver", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Message` objects in a one-to-many relationship (where `Message`.`sender` is this object).
  """
  messages_on_sender(
    """
    Filter condition to narrow down the query results.
    """
    where: Message_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Message_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Message!]! @fdc_generated(from: "Message.sender", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects in a one-to-many relationship (where `NFT`.`creator` is this object).
  """
  nfts_on_creator(
    """
    Filter condition to narrow down the query results.
    """
    where: NFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFT.creator", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Notification` objects in a one-to-many relationship (where `Notification`.`user` is this object).
  """
  notifications_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Notification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Notification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Notification!]! @fdc_generated(from: "Notification.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Ownership` objects in a one-to-many relationship (where `Ownership`.`owner` is this object).
  """
  ownerships_on_owner(
    """
    Filter condition to narrow down the query results.
    """
    where: Ownership_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Ownership_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Ownership!]! @fdc_generated(from: "Ownership.owner", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `PaymentMethod` objects in a one-to-many relationship (where `PaymentMethod`.`user` is this object).
  """
  paymentMethods_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: PaymentMethod_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [PaymentMethod_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [PaymentMethod!]! @fdc_generated(from: "PaymentMethod.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Review` objects in a one-to-many relationship (where `Review`.`creator` is this object).
  """
  reviews_on_creator(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Review!]! @fdc_generated(from: "Review.creator", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Review` objects in a one-to-many relationship (where `Review`.`reviewer` is this object).
  """
  reviews_on_reviewer(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Review!]! @fdc_generated(from: "Review.reviewer", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Royalty` objects in a one-to-many relationship (where `Royalty`.`creator` is this object).
  """
  royalties_on_creator(
    """
    Filter condition to narrow down the query results.
    """
    where: Royalty_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Royalty_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Royalty!]! @fdc_generated(from: "Royalty.creator", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `SupportTicket` objects in a one-to-many relationship (where `SupportTicket`.`user` is this object).
  """
  supportTickets_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: SupportTicket_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SupportTicket_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [SupportTicket!]! @fdc_generated(from: "SupportTicket.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Transaction` objects in a one-to-many relationship (where `Transaction`.`buyer` is this object).
  """
  transactions_on_buyer(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Transaction!]! @fdc_generated(from: "Transaction.buyer", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Transaction` objects in a one-to-many relationship (where `Transaction`.`seller` is this object).
  """
  transactions_on_seller(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Transaction!]! @fdc_generated(from: "Transaction.seller", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserCategory` objects in a one-to-many relationship (where `UserCategory`.`user` is this object).
  """
  userCategories_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserCategory!]! @fdc_generated(from: "UserCategory.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserExperience` objects in a one-to-many relationship (where `UserExperience`.`user` is this object).
  """
  userExperiences_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserExperience!]! @fdc_generated(from: "UserExperience.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserLanguage` objects in a one-to-many relationship (where `UserLanguage`.`user` is this object).
  """
  userLanguages_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserLanguage!]! @fdc_generated(from: "UserLanguage.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserProductionQuality` objects in a one-to-many relationship (where `UserProductionQuality`.`user` is this object).
  """
  userProductionQualities_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserProductionQuality!]! @fdc_generated(from: "UserProductionQuality.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserRegionalDialect` objects in a one-to-many relationship (where `UserRegionalDialect`.`user` is this object).
  """
  userRegionalDialects_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserRegionalDialect!]! @fdc_generated(from: "UserRegionalDialect.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserRole` objects in a one-to-many relationship (where `UserRole`.`user` is this object).
  """
  userRoles_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRole_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRole_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserRole!]! @fdc_generated(from: "UserRole.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserSecondaryLanguage` objects in a one-to-many relationship (where `UserSecondaryLanguage`.`user` is this object).
  """
  userSecondaryLanguages_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserSecondaryLanguage!]! @fdc_generated(from: "UserSecondaryLanguage.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserStudioAvailability` objects in a one-to-many relationship (where `UserStudioAvailability`.`user` is this object).
  """
  userStudioAvailabilities_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserStudioAvailability!]! @fdc_generated(from: "UserStudioAvailability.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserStyleToneOption` objects in a one-to-many relationship (where `UserStyleToneOption`.`user` is this object).
  """
  userStyleToneOptions_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserStyleToneOption!]! @fdc_generated(from: "UserStyleToneOption.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserTechnicalSpecification` objects in a one-to-many relationship (where `UserTechnicalSpecification`.`user` is this object).
  """
  userTechnicalSpecifications_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserTechnicalSpecification!]! @fdc_generated(from: "UserTechnicalSpecification.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserTimeZone` objects in a one-to-many relationship (where `UserTimeZone`.`user` is this object).
  """
  userTimeZones_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserTimeZone!]! @fdc_generated(from: "UserTimeZone.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserVoiceTrait` objects in a one-to-many relationship (where `UserVoiceTrait`.`user` is this object).
  """
  userVoiceTraits_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserVoiceTrait!]! @fdc_generated(from: "UserVoiceTrait.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Voice` objects in a one-to-many relationship (where `Voice`.`user` is this object).
  """
  voices_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Voice_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Voice_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "Voice.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Category` objects using `UserCategory` as the join table (a `UserCategory` object exists where its `user` is this and its `category` is that).
  """
  categories_via_UserCategory(
    """
    Filter condition to narrow down the query results.
    """
    where: UserCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Category!]! @fdc_generated(from: "UserCategory", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Contract` objects using `ContractUser` as the join table (a `ContractUser` object exists where its `user` is this and its `contract` is that).
  """
  contracts_via_ContractUser(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractUser_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractUser_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Contract!]! @fdc_generated(from: "ContractUser", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `ExperienceLevel` objects using `UserExperience` as the join table (a `UserExperience` object exists where its `user` is this and its `experienceLevel` is that).
  """
  experienceLevels_via_UserExperience(
    """
    Filter condition to narrow down the query results.
    """
    where: UserExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ExperienceLevel!]! @fdc_generated(from: "UserExperience", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Language` objects using `UserLanguage` as the join table (a `UserLanguage` object exists where its `user` is this and its `language` is that).
  """
  languages_via_UserLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: UserLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Language!]! @fdc_generated(from: "UserLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `NFT` objects using `Favorite` as the join table (a `Favorite` object exists where its `user` is this and its `nft` is that).
  """
  nfts_via_Favorite(
    """
    Filter condition to narrow down the query results.
    """
    where: Favorite_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Favorite_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "Favorite", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `NFT` objects using `Ownership` as the join table (a `Ownership` object exists where its `owner` is this and its `nft` is that).
  """
  nfts_via_Ownership(
    """
    Filter condition to narrow down the query results.
    """
    where: Ownership_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Ownership_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "Ownership", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `ProductionQuality` objects using `UserProductionQuality` as the join table (a `UserProductionQuality` object exists where its `user` is this and its `productionQuality` is that).
  """
  productionQualities_via_UserProductionQuality(
    """
    Filter condition to narrow down the query results.
    """
    where: UserProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ProductionQuality!]! @fdc_generated(from: "UserProductionQuality", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `RegionalDialect` objects using `UserRegionalDialect` as the join table (a `UserRegionalDialect` object exists where its `user` is this and its `regionalDialect` is that).
  """
  regionalDialects_via_UserRegionalDialect(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [RegionalDialect!]! @fdc_generated(from: "UserRegionalDialect", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Role` objects using `UserRole` as the join table (a `UserRole` object exists where its `user` is this and its `role` is that).
  """
  roles_via_UserRole(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRole_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRole_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Role!]! @fdc_generated(from: "UserRole", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `SecondaryLanguage` objects using `UserSecondaryLanguage` as the join table (a `UserSecondaryLanguage` object exists where its `user` is this and its `secondaryLanguage` is that).
  """
  secondaryLanguages_via_UserSecondaryLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: UserSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [SecondaryLanguage!]! @fdc_generated(from: "UserSecondaryLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `StudioAvailability` objects using `UserStudioAvailability` as the join table (a `UserStudioAvailability` object exists where its `user` is this and its `studioAvailability` is that).
  """
  studioAvailabilities_via_UserStudioAvailability(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StudioAvailability!]! @fdc_generated(from: "UserStudioAvailability", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `StyleToneOption` objects using `UserStyleToneOption` as the join table (a `UserStyleToneOption` object exists where its `user` is this and its `styleToneOption` is that).
  """
  styleToneOptions_via_UserStyleToneOption(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StyleToneOption!]! @fdc_generated(from: "UserStyleToneOption", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `TechnicalSpecification` objects using `UserTechnicalSpecification` as the join table (a `UserTechnicalSpecification` object exists where its `user` is this and its `technicalSpecification` is that).
  """
  technicalSpecifications_via_UserTechnicalSpecification(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [TechnicalSpecification!]! @fdc_generated(from: "UserTechnicalSpecification", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `TimeZone` objects using `UserTimeZone` as the join table (a `UserTimeZone` object exists where its `user` is this and its `timeZone` is that).
  """
  timeZones_via_UserTimeZone(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [TimeZone!]! @fdc_generated(from: "UserTimeZone", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `VoiceTrait` objects using `UserVoiceTrait` as the join table (a `UserVoiceTrait` object exists where its `user` is this and its `voiceTrait` is that).
  """
  voiceTraits_via_UserVoiceTrait(
    """
    Filter condition to narrow down the query results.
    """
    where: UserVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTrait!]! @fdc_generated(from: "UserVoiceTrait", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type Voice {
  """
  ✨ List `ContractVoice` objects in a one-to-many relationship (where `ContractVoice`.`voice` is this object).
  """
  contractVoices_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractVoice_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractVoice_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ContractVoice!]! @fdc_generated(from: "ContractVoice.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceCategory` objects in a one-to-many relationship (where `VoiceCategory`.`voice` is this object).
  """
  voiceCategories_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceCategory!]! @fdc_generated(from: "VoiceCategory.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceExperience` objects in a one-to-many relationship (where `VoiceExperience`.`voice` is this object).
  """
  voiceExperiences_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceExperience!]! @fdc_generated(from: "VoiceExperience.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceLanguage` objects in a one-to-many relationship (where `VoiceLanguage`.`voice` is this object).
  """
  voiceLanguages_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceLanguage!]! @fdc_generated(from: "VoiceLanguage.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceProductionQuality` objects in a one-to-many relationship (where `VoiceProductionQuality`.`voice` is this object).
  """
  voiceProductionQualities_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceProductionQuality!]! @fdc_generated(from: "VoiceProductionQuality.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceRegionalDialect` objects in a one-to-many relationship (where `VoiceRegionalDialect`.`voice` is this object).
  """
  voiceRegionalDialects_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceRegionalDialect!]! @fdc_generated(from: "VoiceRegionalDialect.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceSecondaryLanguage` objects in a one-to-many relationship (where `VoiceSecondaryLanguage`.`voice` is this object).
  """
  voiceSecondaryLanguages_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceSecondaryLanguage!]! @fdc_generated(from: "VoiceSecondaryLanguage.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceStudioAvailability` objects in a one-to-many relationship (where `VoiceStudioAvailability`.`voice` is this object).
  """
  voiceStudioAvailabilities_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceStudioAvailability!]! @fdc_generated(from: "VoiceStudioAvailability.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceStyleToneOption` objects in a one-to-many relationship (where `VoiceStyleToneOption`.`voice` is this object).
  """
  voiceStyleToneOptions_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceStyleToneOption!]! @fdc_generated(from: "VoiceStyleToneOption.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceTechnicalSpecification` objects in a one-to-many relationship (where `VoiceTechnicalSpecification`.`voice` is this object).
  """
  voiceTechnicalSpecifications_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTechnicalSpecification!]! @fdc_generated(from: "VoiceTechnicalSpecification.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceTimeZone` objects in a one-to-many relationship (where `VoiceTimeZone`.`voice` is this object).
  """
  voiceTimeZones_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTimeZone!]! @fdc_generated(from: "VoiceTimeZone.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceVoiceTrait` objects in a one-to-many relationship (where `VoiceVoiceTrait`.`voice` is this object).
  """
  voiceVoiceTraits_on_voice(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceVoiceTrait!]! @fdc_generated(from: "VoiceVoiceTrait.voice", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Category` objects using `VoiceCategory` as the join table (a `VoiceCategory` object exists where its `voice` is this and its `category` is that).
  """
  categories_via_VoiceCategory(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Category!]! @fdc_generated(from: "VoiceCategory", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Contract` objects using `ContractVoice` as the join table (a `ContractVoice` object exists where its `voice` is this and its `contract` is that).
  """
  contracts_via_ContractVoice(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractVoice_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractVoice_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Contract!]! @fdc_generated(from: "ContractVoice", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `ExperienceLevel` objects using `VoiceExperience` as the join table (a `VoiceExperience` object exists where its `voice` is this and its `experienceLevel` is that).
  """
  experienceLevels_via_VoiceExperience(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ExperienceLevel!]! @fdc_generated(from: "VoiceExperience", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Language` objects using `VoiceLanguage` as the join table (a `VoiceLanguage` object exists where its `voice` is this and its `language` is that).
  """
  languages_via_VoiceLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Language!]! @fdc_generated(from: "VoiceLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `ProductionQuality` objects using `VoiceProductionQuality` as the join table (a `VoiceProductionQuality` object exists where its `voice` is this and its `productionQuality` is that).
  """
  productionQualities_via_VoiceProductionQuality(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ProductionQuality!]! @fdc_generated(from: "VoiceProductionQuality", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `RegionalDialect` objects using `VoiceRegionalDialect` as the join table (a `VoiceRegionalDialect` object exists where its `voice` is this and its `regionalDialect` is that).
  """
  regionalDialects_via_VoiceRegionalDialect(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [RegionalDialect!]! @fdc_generated(from: "VoiceRegionalDialect", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `SecondaryLanguage` objects using `VoiceSecondaryLanguage` as the join table (a `VoiceSecondaryLanguage` object exists where its `voice` is this and its `secondaryLanguage` is that).
  """
  secondaryLanguages_via_VoiceSecondaryLanguage(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [SecondaryLanguage!]! @fdc_generated(from: "VoiceSecondaryLanguage", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `StudioAvailability` objects using `VoiceStudioAvailability` as the join table (a `VoiceStudioAvailability` object exists where its `voice` is this and its `studioAvailability` is that).
  """
  studioAvailabilities_via_VoiceStudioAvailability(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StudioAvailability!]! @fdc_generated(from: "VoiceStudioAvailability", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `StyleToneOption` objects using `VoiceStyleToneOption` as the join table (a `VoiceStyleToneOption` object exists where its `voice` is this and its `styleToneOption` is that).
  """
  styleToneOptions_via_VoiceStyleToneOption(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StyleToneOption!]! @fdc_generated(from: "VoiceStyleToneOption", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `TechnicalSpecification` objects using `VoiceTechnicalSpecification` as the join table (a `VoiceTechnicalSpecification` object exists where its `voice` is this and its `technicalSpecification` is that).
  """
  technicalSpecifications_via_VoiceTechnicalSpecification(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [TechnicalSpecification!]! @fdc_generated(from: "VoiceTechnicalSpecification", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `TimeZone` objects using `VoiceTimeZone` as the join table (a `VoiceTimeZone` object exists where its `voice` is this and its `timeZone` is that).
  """
  timeZones_via_VoiceTimeZone(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [TimeZone!]! @fdc_generated(from: "VoiceTimeZone", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `VoiceTrait` objects using `VoiceVoiceTrait` as the join table (a `VoiceVoiceTrait` object exists where its `voice` is this and its `voiceTrait` is that).
  """
  voiceTraits_via_VoiceVoiceTrait(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTrait!]! @fdc_generated(from: "VoiceVoiceTrait", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
extend type VoiceTrait {
  """
  ✨ List `NFTVoiceTrait` objects in a one-to-many relationship (where `NFTVoiceTrait`.`voiceTrait` is this object).
  """
  nFTVoiceTraits_on_voiceTrait(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTVoiceTrait!]! @fdc_generated(from: "NFTVoiceTrait.voiceTrait", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserVoiceTrait` objects in a one-to-many relationship (where `UserVoiceTrait`.`voiceTrait` is this object).
  """
  userVoiceTraits_on_voiceTrait(
    """
    Filter condition to narrow down the query results.
    """
    where: UserVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserVoiceTrait!]! @fdc_generated(from: "UserVoiceTrait.voiceTrait", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `VoiceVoiceTrait` objects in a one-to-many relationship (where `VoiceVoiceTrait`.`voiceTrait` is this object).
  """
  voiceVoiceTraits_on_voiceTrait(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceVoiceTrait!]! @fdc_generated(from: "VoiceVoiceTrait.voiceTrait", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `NFT` objects using `NFTVoiceTrait` as the join table (a `NFTVoiceTrait` object exists where its `voiceTrait` is this and its `nft` is that).
  """
  nfts_via_NFTVoiceTrait(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFTVoiceTrait", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `User` objects using `UserVoiceTrait` as the join table (a `UserVoiceTrait` object exists where its `voiceTrait` is this and its `user` is that).
  """
  users_via_UserVoiceTrait(
    """
    Filter condition to narrow down the query results.
    """
    where: UserVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "UserVoiceTrait", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  ✨ List `Voice` objects using `VoiceVoiceTrait` as the join table (a `VoiceVoiceTrait` object exists where its `voiceTrait` is this and its `voice` is that).
  """
  voices_via_VoiceVoiceTrait(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "VoiceVoiceTrait", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
}
