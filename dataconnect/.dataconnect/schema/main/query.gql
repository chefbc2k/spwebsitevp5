extend type Query {
  """
  ✨ Look up a single `ActivityLog` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  activityLog(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ActivityLog_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ActivityLog_FirstRow
  ): ActivityLog @fdc_generated(from: "ActivityLog", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `AnalyticsEvent` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  analyticsEvent(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: AnalyticsEvent_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: AnalyticsEvent_FirstRow
  ): AnalyticsEvent @fdc_generated(from: "AnalyticsEvent", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Bid` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  bid(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Bid_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Bid_FirstRow
  ): Bid @fdc_generated(from: "Bid", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Category` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  category(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow
  ): Category @fdc_generated(from: "Category", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Collection` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  collection(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Collection_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Collection_FirstRow
  ): Collection @fdc_generated(from: "Collection", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `CollectionNFT` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  collectionNFT(
    """
    The key used to identify the object.
    """
    key: CollectionNFT_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: CollectionNFT_FirstRow
  ): CollectionNFT @fdc_generated(from: "CollectionNFT", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Contract` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  contract(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Contract_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Contract_FirstRow
  ): Contract @fdc_generated(from: "Contract", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ContractNFT` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  contractNFT(
    """
    The key used to identify the object.
    """
    key: ContractNFT_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ContractNFT_FirstRow
  ): ContractNFT @fdc_generated(from: "ContractNFT", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ContractUser` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  contractUser(
    """
    The key used to identify the object.
    """
    key: ContractUser_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ContractUser_FirstRow
  ): ContractUser @fdc_generated(from: "ContractUser", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ContractVoice` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  contractVoice(
    """
    The key used to identify the object.
    """
    key: ContractVoice_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ContractVoice_FirstRow
  ): ContractVoice @fdc_generated(from: "ContractVoice", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ExperienceLevel` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  experienceLevel(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ExperienceLevel_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ExperienceLevel_FirstRow
  ): ExperienceLevel @fdc_generated(from: "ExperienceLevel", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Favorite` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  favorite(
    """
    The key used to identify the object.
    """
    key: Favorite_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Favorite_FirstRow
  ): Favorite @fdc_generated(from: "Favorite", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Language` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  language(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Language_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Language_FirstRow
  ): Language @fdc_generated(from: "Language", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Listing` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  listing(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Listing_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Listing_FirstRow
  ): Listing @fdc_generated(from: "Listing", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Message` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  message(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Message_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Message_FirstRow
  ): Message @fdc_generated(from: "Message", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFT` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nft(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: NFT_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFT_FirstRow
  ): NFT @fdc_generated(from: "NFT", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTCategory` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTCategory(
    """
    The key used to identify the object.
    """
    key: NFTCategory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTCategory_FirstRow
  ): NFTCategory @fdc_generated(from: "NFTCategory", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTLanguage` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTLanguage(
    """
    The key used to identify the object.
    """
    key: NFTLanguage_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTLanguage_FirstRow
  ): NFTLanguage @fdc_generated(from: "NFTLanguage", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTProductionQuality` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTProductionQuality(
    """
    The key used to identify the object.
    """
    key: NFTProductionQuality_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTProductionQuality_FirstRow
  ): NFTProductionQuality @fdc_generated(from: "NFTProductionQuality", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTRegionalDialect` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTRegionalDialect(
    """
    The key used to identify the object.
    """
    key: NFTRegionalDialect_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTRegionalDialect_FirstRow
  ): NFTRegionalDialect @fdc_generated(from: "NFTRegionalDialect", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTSecondaryLanguage` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTSecondaryLanguage(
    """
    The key used to identify the object.
    """
    key: NFTSecondaryLanguage_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTSecondaryLanguage_FirstRow
  ): NFTSecondaryLanguage @fdc_generated(from: "NFTSecondaryLanguage", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTStudioAvailability` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTStudioAvailability(
    """
    The key used to identify the object.
    """
    key: NFTStudioAvailability_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTStudioAvailability_FirstRow
  ): NFTStudioAvailability @fdc_generated(from: "NFTStudioAvailability", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTStyleToneOption` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTStyleToneOption(
    """
    The key used to identify the object.
    """
    key: NFTStyleToneOption_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTStyleToneOption_FirstRow
  ): NFTStyleToneOption @fdc_generated(from: "NFTStyleToneOption", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTTechnicalSpecification` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTTechnicalSpecification(
    """
    The key used to identify the object.
    """
    key: NFTTechnicalSpecification_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTTechnicalSpecification_FirstRow
  ): NFTTechnicalSpecification @fdc_generated(from: "NFTTechnicalSpecification", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTTimeZone` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTTimeZone(
    """
    The key used to identify the object.
    """
    key: NFTTimeZone_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTTimeZone_FirstRow
  ): NFTTimeZone @fdc_generated(from: "NFTTimeZone", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `NFTVoiceTrait` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nFTVoiceTrait(
    """
    The key used to identify the object.
    """
    key: NFTVoiceTrait_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFTVoiceTrait_FirstRow
  ): NFTVoiceTrait @fdc_generated(from: "NFTVoiceTrait", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Notification` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  notification(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Notification_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Notification_FirstRow
  ): Notification @fdc_generated(from: "Notification", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Ownership` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  ownership(
    """
    The key used to identify the object.
    """
    key: Ownership_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Ownership_FirstRow
  ): Ownership @fdc_generated(from: "Ownership", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `PaymentMethod` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  paymentMethod(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: PaymentMethod_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: PaymentMethod_FirstRow
  ): PaymentMethod @fdc_generated(from: "PaymentMethod", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Permission` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  permission(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Permission_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Permission_FirstRow
  ): Permission @fdc_generated(from: "Permission", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ProductionQuality` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  productionQuality(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ProductionQuality_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ProductionQuality_FirstRow
  ): ProductionQuality @fdc_generated(from: "ProductionQuality", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `RegionalDialect` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  regionalDialect(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: RegionalDialect_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: RegionalDialect_FirstRow
  ): RegionalDialect @fdc_generated(from: "RegionalDialect", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Review` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  review(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow
  ): Review @fdc_generated(from: "Review", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Role` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  role(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Role_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Role_FirstRow
  ): Role @fdc_generated(from: "Role", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `RolePermission` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  rolePermission(
    """
    The key used to identify the object.
    """
    key: RolePermission_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: RolePermission_FirstRow
  ): RolePermission @fdc_generated(from: "RolePermission", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Royalty` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  royalty(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Royalty_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Royalty_FirstRow
  ): Royalty @fdc_generated(from: "Royalty", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `SecondaryLanguage` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  secondaryLanguage(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SecondaryLanguage_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SecondaryLanguage_FirstRow
  ): SecondaryLanguage @fdc_generated(from: "SecondaryLanguage", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `StudioAvailability` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  studioAvailability(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: StudioAvailability_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: StudioAvailability_FirstRow
  ): StudioAvailability @fdc_generated(from: "StudioAvailability", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `StyleToneCategory` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  styleToneCategory(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: StyleToneCategory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: StyleToneCategory_FirstRow
  ): StyleToneCategory @fdc_generated(from: "StyleToneCategory", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `StyleToneOption` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  styleToneOption(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: StyleToneOption_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: StyleToneOption_FirstRow
  ): StyleToneOption @fdc_generated(from: "StyleToneOption", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `SupportTicket` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  supportTicket(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SupportTicket_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SupportTicket_FirstRow
  ): SupportTicket @fdc_generated(from: "SupportTicket", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `TechnicalSpecification` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  technicalSpecification(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: TechnicalSpecification_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: TechnicalSpecification_FirstRow
  ): TechnicalSpecification @fdc_generated(from: "TechnicalSpecification", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `TimeZone` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  timeZone(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: TimeZone_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: TimeZone_FirstRow
  ): TimeZone @fdc_generated(from: "TimeZone", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Transaction` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  transaction(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow
  ): Transaction @fdc_generated(from: "Transaction", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserCategory` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userCategory(
    """
    The key used to identify the object.
    """
    key: UserCategory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserCategory_FirstRow
  ): UserCategory @fdc_generated(from: "UserCategory", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserExperience` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userExperience(
    """
    The key used to identify the object.
    """
    key: UserExperience_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserExperience_FirstRow
  ): UserExperience @fdc_generated(from: "UserExperience", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserLanguage` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userLanguage(
    """
    The key used to identify the object.
    """
    key: UserLanguage_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserLanguage_FirstRow
  ): UserLanguage @fdc_generated(from: "UserLanguage", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserProductionQuality` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userProductionQuality(
    """
    The key used to identify the object.
    """
    key: UserProductionQuality_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserProductionQuality_FirstRow
  ): UserProductionQuality @fdc_generated(from: "UserProductionQuality", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserRegionalDialect` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userRegionalDialect(
    """
    The key used to identify the object.
    """
    key: UserRegionalDialect_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserRegionalDialect_FirstRow
  ): UserRegionalDialect @fdc_generated(from: "UserRegionalDialect", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserRole` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userRole(
    """
    The key used to identify the object.
    """
    key: UserRole_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserRole_FirstRow
  ): UserRole @fdc_generated(from: "UserRole", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserSecondaryLanguage` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userSecondaryLanguage(
    """
    The key used to identify the object.
    """
    key: UserSecondaryLanguage_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserSecondaryLanguage_FirstRow
  ): UserSecondaryLanguage @fdc_generated(from: "UserSecondaryLanguage", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserStudioAvailability` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userStudioAvailability(
    """
    The key used to identify the object.
    """
    key: UserStudioAvailability_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserStudioAvailability_FirstRow
  ): UserStudioAvailability @fdc_generated(from: "UserStudioAvailability", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserStyleToneOption` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userStyleToneOption(
    """
    The key used to identify the object.
    """
    key: UserStyleToneOption_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserStyleToneOption_FirstRow
  ): UserStyleToneOption @fdc_generated(from: "UserStyleToneOption", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserTechnicalSpecification` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userTechnicalSpecification(
    """
    The key used to identify the object.
    """
    key: UserTechnicalSpecification_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserTechnicalSpecification_FirstRow
  ): UserTechnicalSpecification @fdc_generated(from: "UserTechnicalSpecification", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserTimeZone` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userTimeZone(
    """
    The key used to identify the object.
    """
    key: UserTimeZone_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserTimeZone_FirstRow
  ): UserTimeZone @fdc_generated(from: "UserTimeZone", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserVoiceTrait` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userVoiceTrait(
    """
    The key used to identify the object.
    """
    key: UserVoiceTrait_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserVoiceTrait_FirstRow
  ): UserVoiceTrait @fdc_generated(from: "UserVoiceTrait", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Voice` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voice(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Voice_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Voice_FirstRow
  ): Voice @fdc_generated(from: "Voice", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceCategory` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceCategory(
    """
    The key used to identify the object.
    """
    key: VoiceCategory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceCategory_FirstRow
  ): VoiceCategory @fdc_generated(from: "VoiceCategory", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceExperience` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceExperience(
    """
    The key used to identify the object.
    """
    key: VoiceExperience_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceExperience_FirstRow
  ): VoiceExperience @fdc_generated(from: "VoiceExperience", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceLanguage` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceLanguage(
    """
    The key used to identify the object.
    """
    key: VoiceLanguage_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceLanguage_FirstRow
  ): VoiceLanguage @fdc_generated(from: "VoiceLanguage", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceProductionQuality` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceProductionQuality(
    """
    The key used to identify the object.
    """
    key: VoiceProductionQuality_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceProductionQuality_FirstRow
  ): VoiceProductionQuality @fdc_generated(from: "VoiceProductionQuality", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceRegionalDialect` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceRegionalDialect(
    """
    The key used to identify the object.
    """
    key: VoiceRegionalDialect_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceRegionalDialect_FirstRow
  ): VoiceRegionalDialect @fdc_generated(from: "VoiceRegionalDialect", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceSecondaryLanguage` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceSecondaryLanguage(
    """
    The key used to identify the object.
    """
    key: VoiceSecondaryLanguage_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceSecondaryLanguage_FirstRow
  ): VoiceSecondaryLanguage @fdc_generated(from: "VoiceSecondaryLanguage", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceStudioAvailability` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceStudioAvailability(
    """
    The key used to identify the object.
    """
    key: VoiceStudioAvailability_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceStudioAvailability_FirstRow
  ): VoiceStudioAvailability @fdc_generated(from: "VoiceStudioAvailability", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceStyleToneOption` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceStyleToneOption(
    """
    The key used to identify the object.
    """
    key: VoiceStyleToneOption_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceStyleToneOption_FirstRow
  ): VoiceStyleToneOption @fdc_generated(from: "VoiceStyleToneOption", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceTechnicalSpecification` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceTechnicalSpecification(
    """
    The key used to identify the object.
    """
    key: VoiceTechnicalSpecification_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceTechnicalSpecification_FirstRow
  ): VoiceTechnicalSpecification @fdc_generated(from: "VoiceTechnicalSpecification", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceTimeZone` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceTimeZone(
    """
    The key used to identify the object.
    """
    key: VoiceTimeZone_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceTimeZone_FirstRow
  ): VoiceTimeZone @fdc_generated(from: "VoiceTimeZone", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceTrait` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceTrait(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: VoiceTrait_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceTrait_FirstRow
  ): VoiceTrait @fdc_generated(from: "VoiceTrait", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `VoiceVoiceTrait` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  voiceVoiceTrait(
    """
    The key used to identify the object.
    """
    key: VoiceVoiceTrait_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: VoiceVoiceTrait_FirstRow
  ): VoiceVoiceTrait @fdc_generated(from: "VoiceVoiceTrait", purpose: QUERY_SINGLE)
  """
  ✨ List `ActivityLog` objects in the table, optionally filtered by `where` conditions.
  """
  activityLogs(
    """
    Filter condition to narrow down the query results.
    """
    where: ActivityLog_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ActivityLog_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ActivityLog!]! @fdc_generated(from: "ActivityLog", purpose: QUERY_MULTIPLE)
  """
  ✨ List `AnalyticsEvent` objects in the table, optionally filtered by `where` conditions.
  """
  analyticsEvents(
    """
    Filter condition to narrow down the query results.
    """
    where: AnalyticsEvent_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [AnalyticsEvent_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [AnalyticsEvent!]! @fdc_generated(from: "AnalyticsEvent", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Bid` objects in the table, optionally filtered by `where` conditions.
  """
  bids(
    """
    Filter condition to narrow down the query results.
    """
    where: Bid_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Bid_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Bid!]! @fdc_generated(from: "Bid", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Category` objects in the table, optionally filtered by `where` conditions.
  """
  categories(
    """
    Filter condition to narrow down the query results.
    """
    where: Category_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Category_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Category!]! @fdc_generated(from: "Category", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Collection` objects in the table, optionally filtered by `where` conditions.
  """
  collections(
    """
    Filter condition to narrow down the query results.
    """
    where: Collection_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Collection_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Collection!]! @fdc_generated(from: "Collection", purpose: QUERY_MULTIPLE)
  """
  ✨ List `CollectionNFT` objects in the table, optionally filtered by `where` conditions.
  """
  collectionNFTS(
    """
    Filter condition to narrow down the query results.
    """
    where: CollectionNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CollectionNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [CollectionNFT!]! @fdc_generated(from: "CollectionNFT", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Contract` objects in the table, optionally filtered by `where` conditions.
  """
  contracts(
    """
    Filter condition to narrow down the query results.
    """
    where: Contract_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Contract_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Contract!]! @fdc_generated(from: "Contract", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ContractNFT` objects in the table, optionally filtered by `where` conditions.
  """
  contractNFTS(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractNFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractNFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ContractNFT!]! @fdc_generated(from: "ContractNFT", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ContractUser` objects in the table, optionally filtered by `where` conditions.
  """
  contractUsers(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractUser_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractUser_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ContractUser!]! @fdc_generated(from: "ContractUser", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ContractVoice` objects in the table, optionally filtered by `where` conditions.
  """
  contractVoices(
    """
    Filter condition to narrow down the query results.
    """
    where: ContractVoice_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ContractVoice_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ContractVoice!]! @fdc_generated(from: "ContractVoice", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ExperienceLevel` objects in the table, optionally filtered by `where` conditions.
  """
  experienceLevels(
    """
    Filter condition to narrow down the query results.
    """
    where: ExperienceLevel_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ExperienceLevel_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ExperienceLevel!]! @fdc_generated(from: "ExperienceLevel", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Favorite` objects in the table, optionally filtered by `where` conditions.
  """
  favorites(
    """
    Filter condition to narrow down the query results.
    """
    where: Favorite_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Favorite_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Favorite!]! @fdc_generated(from: "Favorite", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Language` objects in the table, optionally filtered by `where` conditions.
  """
  languages(
    """
    Filter condition to narrow down the query results.
    """
    where: Language_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Language_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Language!]! @fdc_generated(from: "Language", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Listing` objects in the table, optionally filtered by `where` conditions.
  """
  listings(
    """
    Filter condition to narrow down the query results.
    """
    where: Listing_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Listing_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Listing!]! @fdc_generated(from: "Listing", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Message` objects in the table, optionally filtered by `where` conditions.
  """
  messages(
    """
    Filter condition to narrow down the query results.
    """
    where: Message_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Message_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Message!]! @fdc_generated(from: "Message", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFT` objects in the table, optionally filtered by `where` conditions.
  """
  nfts(
    """
    Filter condition to narrow down the query results.
    """
    where: NFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFT", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTCategory` objects in the table, optionally filtered by `where` conditions.
  """
  nFTCategories(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTCategory!]! @fdc_generated(from: "NFTCategory", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTLanguage` objects in the table, optionally filtered by `where` conditions.
  """
  nFTLanguages(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTLanguage!]! @fdc_generated(from: "NFTLanguage", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTProductionQuality` objects in the table, optionally filtered by `where` conditions.
  """
  nFTProductionQualities(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTProductionQuality!]! @fdc_generated(from: "NFTProductionQuality", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTRegionalDialect` objects in the table, optionally filtered by `where` conditions.
  """
  nFTRegionalDialects(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTRegionalDialect!]! @fdc_generated(from: "NFTRegionalDialect", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTSecondaryLanguage` objects in the table, optionally filtered by `where` conditions.
  """
  nFTSecondaryLanguages(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTSecondaryLanguage!]! @fdc_generated(from: "NFTSecondaryLanguage", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTStudioAvailability` objects in the table, optionally filtered by `where` conditions.
  """
  nFTStudioAvailabilities(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTStudioAvailability!]! @fdc_generated(from: "NFTStudioAvailability", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTStyleToneOption` objects in the table, optionally filtered by `where` conditions.
  """
  nFTStyleToneOptions(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTStyleToneOption!]! @fdc_generated(from: "NFTStyleToneOption", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTTechnicalSpecification` objects in the table, optionally filtered by `where` conditions.
  """
  nFTTechnicalSpecifications(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTTechnicalSpecification!]! @fdc_generated(from: "NFTTechnicalSpecification", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTTimeZone` objects in the table, optionally filtered by `where` conditions.
  """
  nFTTimeZones(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTTimeZone!]! @fdc_generated(from: "NFTTimeZone", purpose: QUERY_MULTIPLE)
  """
  ✨ List `NFTVoiceTrait` objects in the table, optionally filtered by `where` conditions.
  """
  nFTVoiceTraits(
    """
    Filter condition to narrow down the query results.
    """
    where: NFTVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFTVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFTVoiceTrait!]! @fdc_generated(from: "NFTVoiceTrait", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Notification` objects in the table, optionally filtered by `where` conditions.
  """
  notifications(
    """
    Filter condition to narrow down the query results.
    """
    where: Notification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Notification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Notification!]! @fdc_generated(from: "Notification", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Ownership` objects in the table, optionally filtered by `where` conditions.
  """
  ownerships(
    """
    Filter condition to narrow down the query results.
    """
    where: Ownership_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Ownership_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Ownership!]! @fdc_generated(from: "Ownership", purpose: QUERY_MULTIPLE)
  """
  ✨ List `PaymentMethod` objects in the table, optionally filtered by `where` conditions.
  """
  paymentMethods(
    """
    Filter condition to narrow down the query results.
    """
    where: PaymentMethod_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [PaymentMethod_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [PaymentMethod!]! @fdc_generated(from: "PaymentMethod", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Permission` objects in the table, optionally filtered by `where` conditions.
  """
  permissions(
    """
    Filter condition to narrow down the query results.
    """
    where: Permission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Permission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Permission!]! @fdc_generated(from: "Permission", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ProductionQuality` objects in the table, optionally filtered by `where` conditions.
  """
  productionQualities(
    """
    Filter condition to narrow down the query results.
    """
    where: ProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [ProductionQuality!]! @fdc_generated(from: "ProductionQuality", purpose: QUERY_MULTIPLE)
  """
  ✨ List `RegionalDialect` objects in the table, optionally filtered by `where` conditions.
  """
  regionalDialects(
    """
    Filter condition to narrow down the query results.
    """
    where: RegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [RegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [RegionalDialect!]! @fdc_generated(from: "RegionalDialect", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Review` objects in the table, optionally filtered by `where` conditions.
  """
  reviews(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Review!]! @fdc_generated(from: "Review", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Role` objects in the table, optionally filtered by `where` conditions.
  """
  roles(
    """
    Filter condition to narrow down the query results.
    """
    where: Role_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Role_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Role!]! @fdc_generated(from: "Role", purpose: QUERY_MULTIPLE)
  """
  ✨ List `RolePermission` objects in the table, optionally filtered by `where` conditions.
  """
  rolePermissions(
    """
    Filter condition to narrow down the query results.
    """
    where: RolePermission_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [RolePermission_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [RolePermission!]! @fdc_generated(from: "RolePermission", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Royalty` objects in the table, optionally filtered by `where` conditions.
  """
  royalties(
    """
    Filter condition to narrow down the query results.
    """
    where: Royalty_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Royalty_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Royalty!]! @fdc_generated(from: "Royalty", purpose: QUERY_MULTIPLE)
  """
  ✨ List `SecondaryLanguage` objects in the table, optionally filtered by `where` conditions.
  """
  secondaryLanguages(
    """
    Filter condition to narrow down the query results.
    """
    where: SecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [SecondaryLanguage!]! @fdc_generated(from: "SecondaryLanguage", purpose: QUERY_MULTIPLE)
  """
  ✨ List `StudioAvailability` objects in the table, optionally filtered by `where` conditions.
  """
  studioAvailabilities(
    """
    Filter condition to narrow down the query results.
    """
    where: StudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [StudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StudioAvailability!]! @fdc_generated(from: "StudioAvailability", purpose: QUERY_MULTIPLE)
  """
  ✨ List `StyleToneCategory` objects in the table, optionally filtered by `where` conditions.
  """
  styleToneCategories(
    """
    Filter condition to narrow down the query results.
    """
    where: StyleToneCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [StyleToneCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StyleToneCategory!]! @fdc_generated(from: "StyleToneCategory", purpose: QUERY_MULTIPLE)
  """
  ✨ List `StyleToneOption` objects in the table, optionally filtered by `where` conditions.
  """
  styleToneOptions(
    """
    Filter condition to narrow down the query results.
    """
    where: StyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [StyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [StyleToneOption!]! @fdc_generated(from: "StyleToneOption", purpose: QUERY_MULTIPLE)
  """
  ✨ List `SupportTicket` objects in the table, optionally filtered by `where` conditions.
  """
  supportTickets(
    """
    Filter condition to narrow down the query results.
    """
    where: SupportTicket_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SupportTicket_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [SupportTicket!]! @fdc_generated(from: "SupportTicket", purpose: QUERY_MULTIPLE)
  """
  ✨ List `TechnicalSpecification` objects in the table, optionally filtered by `where` conditions.
  """
  technicalSpecifications(
    """
    Filter condition to narrow down the query results.
    """
    where: TechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [TechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [TechnicalSpecification!]! @fdc_generated(from: "TechnicalSpecification", purpose: QUERY_MULTIPLE)
  """
  ✨ List `TimeZone` objects in the table, optionally filtered by `where` conditions.
  """
  timeZones(
    """
    Filter condition to narrow down the query results.
    """
    where: TimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [TimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [TimeZone!]! @fdc_generated(from: "TimeZone", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Transaction` objects in the table, optionally filtered by `where` conditions.
  """
  transactions(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Transaction!]! @fdc_generated(from: "Transaction", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table, optionally filtered by `where` conditions.
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserCategory` objects in the table, optionally filtered by `where` conditions.
  """
  userCategories(
    """
    Filter condition to narrow down the query results.
    """
    where: UserCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserCategory!]! @fdc_generated(from: "UserCategory", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserExperience` objects in the table, optionally filtered by `where` conditions.
  """
  userExperiences(
    """
    Filter condition to narrow down the query results.
    """
    where: UserExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserExperience!]! @fdc_generated(from: "UserExperience", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserLanguage` objects in the table, optionally filtered by `where` conditions.
  """
  userLanguages(
    """
    Filter condition to narrow down the query results.
    """
    where: UserLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserLanguage!]! @fdc_generated(from: "UserLanguage", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserProductionQuality` objects in the table, optionally filtered by `where` conditions.
  """
  userProductionQualities(
    """
    Filter condition to narrow down the query results.
    """
    where: UserProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserProductionQuality!]! @fdc_generated(from: "UserProductionQuality", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserRegionalDialect` objects in the table, optionally filtered by `where` conditions.
  """
  userRegionalDialects(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserRegionalDialect!]! @fdc_generated(from: "UserRegionalDialect", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserRole` objects in the table, optionally filtered by `where` conditions.
  """
  userRoles(
    """
    Filter condition to narrow down the query results.
    """
    where: UserRole_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserRole_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserRole!]! @fdc_generated(from: "UserRole", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserSecondaryLanguage` objects in the table, optionally filtered by `where` conditions.
  """
  userSecondaryLanguages(
    """
    Filter condition to narrow down the query results.
    """
    where: UserSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserSecondaryLanguage!]! @fdc_generated(from: "UserSecondaryLanguage", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserStudioAvailability` objects in the table, optionally filtered by `where` conditions.
  """
  userStudioAvailabilities(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserStudioAvailability!]! @fdc_generated(from: "UserStudioAvailability", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserStyleToneOption` objects in the table, optionally filtered by `where` conditions.
  """
  userStyleToneOptions(
    """
    Filter condition to narrow down the query results.
    """
    where: UserStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserStyleToneOption!]! @fdc_generated(from: "UserStyleToneOption", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserTechnicalSpecification` objects in the table, optionally filtered by `where` conditions.
  """
  userTechnicalSpecifications(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserTechnicalSpecification!]! @fdc_generated(from: "UserTechnicalSpecification", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserTimeZone` objects in the table, optionally filtered by `where` conditions.
  """
  userTimeZones(
    """
    Filter condition to narrow down the query results.
    """
    where: UserTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserTimeZone!]! @fdc_generated(from: "UserTimeZone", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserVoiceTrait` objects in the table, optionally filtered by `where` conditions.
  """
  userVoiceTraits(
    """
    Filter condition to narrow down the query results.
    """
    where: UserVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [UserVoiceTrait!]! @fdc_generated(from: "UserVoiceTrait", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Voice` objects in the table, optionally filtered by `where` conditions.
  """
  voices(
    """
    Filter condition to narrow down the query results.
    """
    where: Voice_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Voice_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Voice!]! @fdc_generated(from: "Voice", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceCategory` objects in the table, optionally filtered by `where` conditions.
  """
  voiceCategories(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceCategory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceCategory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceCategory!]! @fdc_generated(from: "VoiceCategory", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceExperience` objects in the table, optionally filtered by `where` conditions.
  """
  voiceExperiences(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceExperience_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceExperience_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceExperience!]! @fdc_generated(from: "VoiceExperience", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceLanguage` objects in the table, optionally filtered by `where` conditions.
  """
  voiceLanguages(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceLanguage!]! @fdc_generated(from: "VoiceLanguage", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceProductionQuality` objects in the table, optionally filtered by `where` conditions.
  """
  voiceProductionQualities(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceProductionQuality_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceProductionQuality_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceProductionQuality!]! @fdc_generated(from: "VoiceProductionQuality", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceRegionalDialect` objects in the table, optionally filtered by `where` conditions.
  """
  voiceRegionalDialects(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceRegionalDialect_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceRegionalDialect_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceRegionalDialect!]! @fdc_generated(from: "VoiceRegionalDialect", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceSecondaryLanguage` objects in the table, optionally filtered by `where` conditions.
  """
  voiceSecondaryLanguages(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceSecondaryLanguage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceSecondaryLanguage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceSecondaryLanguage!]! @fdc_generated(from: "VoiceSecondaryLanguage", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceStudioAvailability` objects in the table, optionally filtered by `where` conditions.
  """
  voiceStudioAvailabilities(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStudioAvailability_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStudioAvailability_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceStudioAvailability!]! @fdc_generated(from: "VoiceStudioAvailability", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceStyleToneOption` objects in the table, optionally filtered by `where` conditions.
  """
  voiceStyleToneOptions(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceStyleToneOption_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceStyleToneOption_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceStyleToneOption!]! @fdc_generated(from: "VoiceStyleToneOption", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceTechnicalSpecification` objects in the table, optionally filtered by `where` conditions.
  """
  voiceTechnicalSpecifications(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTechnicalSpecification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTechnicalSpecification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTechnicalSpecification!]! @fdc_generated(from: "VoiceTechnicalSpecification", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceTimeZone` objects in the table, optionally filtered by `where` conditions.
  """
  voiceTimeZones(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTimeZone_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTimeZone_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTimeZone!]! @fdc_generated(from: "VoiceTimeZone", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceTrait` objects in the table, optionally filtered by `where` conditions.
  """
  voiceTraits(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceTrait!]! @fdc_generated(from: "VoiceTrait", purpose: QUERY_MULTIPLE)
  """
  ✨ List `VoiceVoiceTrait` objects in the table, optionally filtered by `where` conditions.
  """
  voiceVoiceTraits(
    """
    Filter condition to narrow down the query results.
    """
    where: VoiceVoiceTrait_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [VoiceVoiceTrait_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [VoiceVoiceTrait!]! @fdc_generated(from: "VoiceVoiceTrait", purpose: QUERY_MULTIPLE)
}
