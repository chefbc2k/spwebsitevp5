extend type Query {
  """
  ✨ Look up a single `NFT` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  nft(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: NFT_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: NFT_FirstRow
  ): NFT @fdc_generated(from: "NFT", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Ownership` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  ownership(
    """
    The key used to identify the object.
    """
    key: Ownership_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Ownership_FirstRow
  ): Ownership @fdc_generated(from: "Ownership", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Transaction` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  transaction(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow
  ): Transaction @fdc_generated(from: "Transaction", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `NFT` objects in the table, optionally filtered by `where` conditions.
  """
  nfts(
    """
    Filter condition to narrow down the query results.
    """
    where: NFT_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [NFT_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [NFT!]! @fdc_generated(from: "NFT", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Ownership` objects in the table, optionally filtered by `where` conditions.
  """
  ownerships(
    """
    Filter condition to narrow down the query results.
    """
    where: Ownership_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Ownership_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Ownership!]! @fdc_generated(from: "Ownership", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Transaction` objects in the table, optionally filtered by `where` conditions.
  """
  transactions(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [Transaction!]! @fdc_generated(from: "Transaction", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table, optionally filtered by `where` conditions.
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
