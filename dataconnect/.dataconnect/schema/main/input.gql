"""
✨ `ActivityLog_KeyOutput` returns the primary key fields of table type `ActivityLog`.

It has the same format as `ActivityLog_Key`, but is only used as mutation return value.
"""
scalar ActivityLog_KeyOutput
"""
✨ `AnalyticsEvent_KeyOutput` returns the primary key fields of table type `AnalyticsEvent`.

It has the same format as `AnalyticsEvent_Key`, but is only used as mutation return value.
"""
scalar AnalyticsEvent_KeyOutput
"""
✨ `Bid_KeyOutput` returns the primary key fields of table type `Bid`.

It has the same format as `Bid_Key`, but is only used as mutation return value.
"""
scalar Bid_KeyOutput
"""
✨ `Category_KeyOutput` returns the primary key fields of table type `Category`.

It has the same format as `Category_Key`, but is only used as mutation return value.
"""
scalar Category_KeyOutput
"""
✨ `Collection_KeyOutput` returns the primary key fields of table type `Collection`.

It has the same format as `Collection_Key`, but is only used as mutation return value.
"""
scalar Collection_KeyOutput
"""
✨ `CollectionNFT_KeyOutput` returns the primary key fields of table type `CollectionNFT`.

It has the same format as `CollectionNFT_Key`, but is only used as mutation return value.
"""
scalar CollectionNFT_KeyOutput
"""
✨ `Contract_KeyOutput` returns the primary key fields of table type `Contract`.

It has the same format as `Contract_Key`, but is only used as mutation return value.
"""
scalar Contract_KeyOutput
"""
✨ `ContractNFT_KeyOutput` returns the primary key fields of table type `ContractNFT`.

It has the same format as `ContractNFT_Key`, but is only used as mutation return value.
"""
scalar ContractNFT_KeyOutput
"""
✨ `ContractUser_KeyOutput` returns the primary key fields of table type `ContractUser`.

It has the same format as `ContractUser_Key`, but is only used as mutation return value.
"""
scalar ContractUser_KeyOutput
"""
✨ `ContractVoice_KeyOutput` returns the primary key fields of table type `ContractVoice`.

It has the same format as `ContractVoice_Key`, but is only used as mutation return value.
"""
scalar ContractVoice_KeyOutput
"""
✨ `ExperienceLevel_KeyOutput` returns the primary key fields of table type `ExperienceLevel`.

It has the same format as `ExperienceLevel_Key`, but is only used as mutation return value.
"""
scalar ExperienceLevel_KeyOutput
"""
✨ `Favorite_KeyOutput` returns the primary key fields of table type `Favorite`.

It has the same format as `Favorite_Key`, but is only used as mutation return value.
"""
scalar Favorite_KeyOutput
"""
✨ `Language_KeyOutput` returns the primary key fields of table type `Language`.

It has the same format as `Language_Key`, but is only used as mutation return value.
"""
scalar Language_KeyOutput
"""
✨ `Listing_KeyOutput` returns the primary key fields of table type `Listing`.

It has the same format as `Listing_Key`, but is only used as mutation return value.
"""
scalar Listing_KeyOutput
"""
✨ `Message_KeyOutput` returns the primary key fields of table type `Message`.

It has the same format as `Message_Key`, but is only used as mutation return value.
"""
scalar Message_KeyOutput
"""
✨ `NFT_KeyOutput` returns the primary key fields of table type `NFT`.

It has the same format as `NFT_Key`, but is only used as mutation return value.
"""
scalar NFT_KeyOutput
"""
✨ `NFTCategory_KeyOutput` returns the primary key fields of table type `NFTCategory`.

It has the same format as `NFTCategory_Key`, but is only used as mutation return value.
"""
scalar NFTCategory_KeyOutput
"""
✨ `NFTLanguage_KeyOutput` returns the primary key fields of table type `NFTLanguage`.

It has the same format as `NFTLanguage_Key`, but is only used as mutation return value.
"""
scalar NFTLanguage_KeyOutput
"""
✨ `NFTProductionQuality_KeyOutput` returns the primary key fields of table type `NFTProductionQuality`.

It has the same format as `NFTProductionQuality_Key`, but is only used as mutation return value.
"""
scalar NFTProductionQuality_KeyOutput
"""
✨ `NFTRegionalDialect_KeyOutput` returns the primary key fields of table type `NFTRegionalDialect`.

It has the same format as `NFTRegionalDialect_Key`, but is only used as mutation return value.
"""
scalar NFTRegionalDialect_KeyOutput
"""
✨ `NFTSecondaryLanguage_KeyOutput` returns the primary key fields of table type `NFTSecondaryLanguage`.

It has the same format as `NFTSecondaryLanguage_Key`, but is only used as mutation return value.
"""
scalar NFTSecondaryLanguage_KeyOutput
"""
✨ `NFTStudioAvailability_KeyOutput` returns the primary key fields of table type `NFTStudioAvailability`.

It has the same format as `NFTStudioAvailability_Key`, but is only used as mutation return value.
"""
scalar NFTStudioAvailability_KeyOutput
"""
✨ `NFTStyleToneOption_KeyOutput` returns the primary key fields of table type `NFTStyleToneOption`.

It has the same format as `NFTStyleToneOption_Key`, but is only used as mutation return value.
"""
scalar NFTStyleToneOption_KeyOutput
"""
✨ `NFTTechnicalSpecification_KeyOutput` returns the primary key fields of table type `NFTTechnicalSpecification`.

It has the same format as `NFTTechnicalSpecification_Key`, but is only used as mutation return value.
"""
scalar NFTTechnicalSpecification_KeyOutput
"""
✨ `NFTTimeZone_KeyOutput` returns the primary key fields of table type `NFTTimeZone`.

It has the same format as `NFTTimeZone_Key`, but is only used as mutation return value.
"""
scalar NFTTimeZone_KeyOutput
"""
✨ `NFTVoiceTrait_KeyOutput` returns the primary key fields of table type `NFTVoiceTrait`.

It has the same format as `NFTVoiceTrait_Key`, but is only used as mutation return value.
"""
scalar NFTVoiceTrait_KeyOutput
"""
✨ `Notification_KeyOutput` returns the primary key fields of table type `Notification`.

It has the same format as `Notification_Key`, but is only used as mutation return value.
"""
scalar Notification_KeyOutput
"""
✨ `Ownership_KeyOutput` returns the primary key fields of table type `Ownership`.

It has the same format as `Ownership_Key`, but is only used as mutation return value.
"""
scalar Ownership_KeyOutput
"""
✨ `PaymentMethod_KeyOutput` returns the primary key fields of table type `PaymentMethod`.

It has the same format as `PaymentMethod_Key`, but is only used as mutation return value.
"""
scalar PaymentMethod_KeyOutput
"""
✨ `Permission_KeyOutput` returns the primary key fields of table type `Permission`.

It has the same format as `Permission_Key`, but is only used as mutation return value.
"""
scalar Permission_KeyOutput
"""
✨ `ProductionQuality_KeyOutput` returns the primary key fields of table type `ProductionQuality`.

It has the same format as `ProductionQuality_Key`, but is only used as mutation return value.
"""
scalar ProductionQuality_KeyOutput
"""
✨ `RegionalDialect_KeyOutput` returns the primary key fields of table type `RegionalDialect`.

It has the same format as `RegionalDialect_Key`, but is only used as mutation return value.
"""
scalar RegionalDialect_KeyOutput
"""
✨ `Review_KeyOutput` returns the primary key fields of table type `Review`.

It has the same format as `Review_Key`, but is only used as mutation return value.
"""
scalar Review_KeyOutput
"""
✨ `Role_KeyOutput` returns the primary key fields of table type `Role`.

It has the same format as `Role_Key`, but is only used as mutation return value.
"""
scalar Role_KeyOutput
"""
✨ `RolePermission_KeyOutput` returns the primary key fields of table type `RolePermission`.

It has the same format as `RolePermission_Key`, but is only used as mutation return value.
"""
scalar RolePermission_KeyOutput
"""
✨ `Royalty_KeyOutput` returns the primary key fields of table type `Royalty`.

It has the same format as `Royalty_Key`, but is only used as mutation return value.
"""
scalar Royalty_KeyOutput
"""
✨ `SecondaryLanguage_KeyOutput` returns the primary key fields of table type `SecondaryLanguage`.

It has the same format as `SecondaryLanguage_Key`, but is only used as mutation return value.
"""
scalar SecondaryLanguage_KeyOutput
"""
✨ `StudioAvailability_KeyOutput` returns the primary key fields of table type `StudioAvailability`.

It has the same format as `StudioAvailability_Key`, but is only used as mutation return value.
"""
scalar StudioAvailability_KeyOutput
"""
✨ `StyleToneCategory_KeyOutput` returns the primary key fields of table type `StyleToneCategory`.

It has the same format as `StyleToneCategory_Key`, but is only used as mutation return value.
"""
scalar StyleToneCategory_KeyOutput
"""
✨ `StyleToneOption_KeyOutput` returns the primary key fields of table type `StyleToneOption`.

It has the same format as `StyleToneOption_Key`, but is only used as mutation return value.
"""
scalar StyleToneOption_KeyOutput
"""
✨ `SupportTicket_KeyOutput` returns the primary key fields of table type `SupportTicket`.

It has the same format as `SupportTicket_Key`, but is only used as mutation return value.
"""
scalar SupportTicket_KeyOutput
"""
✨ `TechnicalSpecification_KeyOutput` returns the primary key fields of table type `TechnicalSpecification`.

It has the same format as `TechnicalSpecification_Key`, but is only used as mutation return value.
"""
scalar TechnicalSpecification_KeyOutput
"""
✨ `TimeZone_KeyOutput` returns the primary key fields of table type `TimeZone`.

It has the same format as `TimeZone_Key`, but is only used as mutation return value.
"""
scalar TimeZone_KeyOutput
"""
✨ `Transaction_KeyOutput` returns the primary key fields of table type `Transaction`.

It has the same format as `Transaction_Key`, but is only used as mutation return value.
"""
scalar Transaction_KeyOutput
"""
✨ `User_KeyOutput` returns the primary key fields of table type `User`.

It has the same format as `User_Key`, but is only used as mutation return value.
"""
scalar User_KeyOutput
"""
✨ `UserCategory_KeyOutput` returns the primary key fields of table type `UserCategory`.

It has the same format as `UserCategory_Key`, but is only used as mutation return value.
"""
scalar UserCategory_KeyOutput
"""
✨ `UserExperience_KeyOutput` returns the primary key fields of table type `UserExperience`.

It has the same format as `UserExperience_Key`, but is only used as mutation return value.
"""
scalar UserExperience_KeyOutput
"""
✨ `UserLanguage_KeyOutput` returns the primary key fields of table type `UserLanguage`.

It has the same format as `UserLanguage_Key`, but is only used as mutation return value.
"""
scalar UserLanguage_KeyOutput
"""
✨ `UserProductionQuality_KeyOutput` returns the primary key fields of table type `UserProductionQuality`.

It has the same format as `UserProductionQuality_Key`, but is only used as mutation return value.
"""
scalar UserProductionQuality_KeyOutput
"""
✨ `UserRegionalDialect_KeyOutput` returns the primary key fields of table type `UserRegionalDialect`.

It has the same format as `UserRegionalDialect_Key`, but is only used as mutation return value.
"""
scalar UserRegionalDialect_KeyOutput
"""
✨ `UserRole_KeyOutput` returns the primary key fields of table type `UserRole`.

It has the same format as `UserRole_Key`, but is only used as mutation return value.
"""
scalar UserRole_KeyOutput
"""
✨ `UserSecondaryLanguage_KeyOutput` returns the primary key fields of table type `UserSecondaryLanguage`.

It has the same format as `UserSecondaryLanguage_Key`, but is only used as mutation return value.
"""
scalar UserSecondaryLanguage_KeyOutput
"""
✨ `UserStudioAvailability_KeyOutput` returns the primary key fields of table type `UserStudioAvailability`.

It has the same format as `UserStudioAvailability_Key`, but is only used as mutation return value.
"""
scalar UserStudioAvailability_KeyOutput
"""
✨ `UserStyleToneOption_KeyOutput` returns the primary key fields of table type `UserStyleToneOption`.

It has the same format as `UserStyleToneOption_Key`, but is only used as mutation return value.
"""
scalar UserStyleToneOption_KeyOutput
"""
✨ `UserTechnicalSpecification_KeyOutput` returns the primary key fields of table type `UserTechnicalSpecification`.

It has the same format as `UserTechnicalSpecification_Key`, but is only used as mutation return value.
"""
scalar UserTechnicalSpecification_KeyOutput
"""
✨ `UserTimeZone_KeyOutput` returns the primary key fields of table type `UserTimeZone`.

It has the same format as `UserTimeZone_Key`, but is only used as mutation return value.
"""
scalar UserTimeZone_KeyOutput
"""
✨ `UserVoiceTrait_KeyOutput` returns the primary key fields of table type `UserVoiceTrait`.

It has the same format as `UserVoiceTrait_Key`, but is only used as mutation return value.
"""
scalar UserVoiceTrait_KeyOutput
"""
✨ `Voice_KeyOutput` returns the primary key fields of table type `Voice`.

It has the same format as `Voice_Key`, but is only used as mutation return value.
"""
scalar Voice_KeyOutput
"""
✨ `VoiceCategory_KeyOutput` returns the primary key fields of table type `VoiceCategory`.

It has the same format as `VoiceCategory_Key`, but is only used as mutation return value.
"""
scalar VoiceCategory_KeyOutput
"""
✨ `VoiceExperience_KeyOutput` returns the primary key fields of table type `VoiceExperience`.

It has the same format as `VoiceExperience_Key`, but is only used as mutation return value.
"""
scalar VoiceExperience_KeyOutput
"""
✨ `VoiceLanguage_KeyOutput` returns the primary key fields of table type `VoiceLanguage`.

It has the same format as `VoiceLanguage_Key`, but is only used as mutation return value.
"""
scalar VoiceLanguage_KeyOutput
"""
✨ `VoiceProductionQuality_KeyOutput` returns the primary key fields of table type `VoiceProductionQuality`.

It has the same format as `VoiceProductionQuality_Key`, but is only used as mutation return value.
"""
scalar VoiceProductionQuality_KeyOutput
"""
✨ `VoiceRegionalDialect_KeyOutput` returns the primary key fields of table type `VoiceRegionalDialect`.

It has the same format as `VoiceRegionalDialect_Key`, but is only used as mutation return value.
"""
scalar VoiceRegionalDialect_KeyOutput
"""
✨ `VoiceSecondaryLanguage_KeyOutput` returns the primary key fields of table type `VoiceSecondaryLanguage`.

It has the same format as `VoiceSecondaryLanguage_Key`, but is only used as mutation return value.
"""
scalar VoiceSecondaryLanguage_KeyOutput
"""
✨ `VoiceStudioAvailability_KeyOutput` returns the primary key fields of table type `VoiceStudioAvailability`.

It has the same format as `VoiceStudioAvailability_Key`, but is only used as mutation return value.
"""
scalar VoiceStudioAvailability_KeyOutput
"""
✨ `VoiceStyleToneOption_KeyOutput` returns the primary key fields of table type `VoiceStyleToneOption`.

It has the same format as `VoiceStyleToneOption_Key`, but is only used as mutation return value.
"""
scalar VoiceStyleToneOption_KeyOutput
"""
✨ `VoiceTechnicalSpecification_KeyOutput` returns the primary key fields of table type `VoiceTechnicalSpecification`.

It has the same format as `VoiceTechnicalSpecification_Key`, but is only used as mutation return value.
"""
scalar VoiceTechnicalSpecification_KeyOutput
"""
✨ `VoiceTimeZone_KeyOutput` returns the primary key fields of table type `VoiceTimeZone`.

It has the same format as `VoiceTimeZone_Key`, but is only used as mutation return value.
"""
scalar VoiceTimeZone_KeyOutput
"""
✨ `VoiceTrait_KeyOutput` returns the primary key fields of table type `VoiceTrait`.

It has the same format as `VoiceTrait_Key`, but is only used as mutation return value.
"""
scalar VoiceTrait_KeyOutput
"""
✨ `VoiceVoiceTrait_KeyOutput` returns the primary key fields of table type `VoiceVoiceTrait`.

It has the same format as `VoiceVoiceTrait_Key`, but is only used as mutation return value.
"""
scalar VoiceVoiceTrait_KeyOutput
"""
✨ Generated data input type for table 'ActivityLog'. It includes all necessary fields for creating or upserting rows into table.
"""
input ActivityLog_Data {
  """
  ✨ Generated from Field `ActivityLog`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `ActivityLog`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `ActivityLog`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `ActivityLog`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `ActivityLog`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `ActivityLog`.`action` of type `String!`
  """
  action: String
  """
  ✨ `_expr` server value variant of `action` (✨ Generated from Field `ActivityLog`.`action` of type `String!`)
  """
  action_expr: String_Expr
  """
  ✨ Generated from Field `ActivityLog`.`details` of type `String`
  """
  details: String
  """
  ✨ `_expr` server value variant of `details` (✨ Generated from Field `ActivityLog`.`details` of type `String`)
  """
  details_expr: String_Expr
  """
  ✨ Generated from Field `ActivityLog`.`timestamp` of type `Timestamp!`
  """
  timestamp: Timestamp
  """
  ✨ `_expr` server value variant of `timestamp` (✨ Generated from Field `ActivityLog`.`timestamp` of type `Timestamp!`)
  """
  timestamp_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `timestamp` (✨ Generated from Field `ActivityLog`.`timestamp` of type `Timestamp!`)
  """
  timestamp_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'ActivityLog'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input ActivityLog_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [ActivityLog_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: ActivityLog_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [ActivityLog_Filter!]
  """
  ✨ Generated from Field `ActivityLog`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `ActivityLog`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `ActivityLog`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `ActivityLog`.`action` of type `String!`
  """
  action: String_Filter
  """
  ✨ Generated from Field `ActivityLog`.`details` of type `String`
  """
  details: String_Filter
  """
  ✨ Generated from Field `ActivityLog`.`timestamp` of type `Timestamp!`
  """
  timestamp: Timestamp_Filter
}
"""
✨ Generated first-row input type for table 'ActivityLog'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input ActivityLog_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [ActivityLog_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: ActivityLog_Filter
}
"""
✨ Generated key input type for table 'ActivityLog'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input ActivityLog_Key {
  """
  ✨ Generated from Field `ActivityLog`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `ActivityLog`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'ActivityLog'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input ActivityLog_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: ActivityLog_Filter
}
"""
✨ Generated order input type for table 'ActivityLog'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input ActivityLog_Order {
  """
  ✨ Generated from Field `ActivityLog`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `ActivityLog`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `ActivityLog`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `ActivityLog`.`action` of type `String!`
  """
  action: OrderDirection
  """
  ✨ Generated from Field `ActivityLog`.`details` of type `String`
  """
  details: OrderDirection
  """
  ✨ Generated from Field `ActivityLog`.`timestamp` of type `Timestamp!`
  """
  timestamp: OrderDirection
}
"""
✨ Generated data input type for table 'AnalyticsEvent'. It includes all necessary fields for creating or upserting rows into table.
"""
input AnalyticsEvent_Data {
  """
  ✨ Generated from Field `AnalyticsEvent`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `AnalyticsEvent`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `AnalyticsEvent`.`userId` of type `UUID`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `AnalyticsEvent`.`userId` of type `UUID`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `AnalyticsEvent`.`user` of type `User`
  """
  user: User_Key
  """
  ✨ Generated from Field `AnalyticsEvent`.`eventData` of type `String`
  """
  eventData: String
  """
  ✨ `_expr` server value variant of `eventData` (✨ Generated from Field `AnalyticsEvent`.`eventData` of type `String`)
  """
  eventData_expr: String_Expr
  """
  ✨ Generated from Field `AnalyticsEvent`.`eventType` of type `String!`
  """
  eventType: String
  """
  ✨ `_expr` server value variant of `eventType` (✨ Generated from Field `AnalyticsEvent`.`eventType` of type `String!`)
  """
  eventType_expr: String_Expr
  """
  ✨ Generated from Field `AnalyticsEvent`.`timestamp` of type `Timestamp!`
  """
  timestamp: Timestamp
  """
  ✨ `_expr` server value variant of `timestamp` (✨ Generated from Field `AnalyticsEvent`.`timestamp` of type `Timestamp!`)
  """
  timestamp_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `timestamp` (✨ Generated from Field `AnalyticsEvent`.`timestamp` of type `Timestamp!`)
  """
  timestamp_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'AnalyticsEvent'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input AnalyticsEvent_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [AnalyticsEvent_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: AnalyticsEvent_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [AnalyticsEvent_Filter!]
  """
  ✨ Generated from Field `AnalyticsEvent`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `AnalyticsEvent`.`userId` of type `UUID`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `AnalyticsEvent`.`user` of type `User`
  """
  user: User_Filter
  """
  ✨ Generated from Field `AnalyticsEvent`.`eventData` of type `String`
  """
  eventData: String_Filter
  """
  ✨ Generated from Field `AnalyticsEvent`.`eventType` of type `String!`
  """
  eventType: String_Filter
  """
  ✨ Generated from Field `AnalyticsEvent`.`timestamp` of type `Timestamp!`
  """
  timestamp: Timestamp_Filter
}
"""
✨ Generated first-row input type for table 'AnalyticsEvent'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input AnalyticsEvent_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [AnalyticsEvent_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: AnalyticsEvent_Filter
}
"""
✨ Generated key input type for table 'AnalyticsEvent'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input AnalyticsEvent_Key {
  """
  ✨ Generated from Field `AnalyticsEvent`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `AnalyticsEvent`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'AnalyticsEvent'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input AnalyticsEvent_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: AnalyticsEvent_Filter
}
"""
✨ Generated order input type for table 'AnalyticsEvent'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input AnalyticsEvent_Order {
  """
  ✨ Generated from Field `AnalyticsEvent`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `AnalyticsEvent`.`userId` of type `UUID`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `AnalyticsEvent`.`user` of type `User`
  """
  user: User_Order
  """
  ✨ Generated from Field `AnalyticsEvent`.`eventData` of type `String`
  """
  eventData: OrderDirection
  """
  ✨ Generated from Field `AnalyticsEvent`.`eventType` of type `String!`
  """
  eventType: OrderDirection
  """
  ✨ Generated from Field `AnalyticsEvent`.`timestamp` of type `Timestamp!`
  """
  timestamp: OrderDirection
}
"""
✨ Generated data input type for table 'Bid'. It includes all necessary fields for creating or upserting rows into table.
"""
input Bid_Data {
  """
  ✨ Generated from Field `Bid`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Bid`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Bid`.`bidderId` of type `UUID!`
  """
  bidderId: UUID
  """
  ✨ `_expr` server value variant of `bidderId` (✨ Generated from Field `Bid`.`bidderId` of type `UUID!`)
  """
  bidderId_expr: UUID_Expr
  """
  ✨ Generated from Field `Bid`.`listingId` of type `UUID!`
  """
  listingId: UUID
  """
  ✨ `_expr` server value variant of `listingId` (✨ Generated from Field `Bid`.`listingId` of type `UUID!`)
  """
  listingId_expr: UUID_Expr
  """
  ✨ Generated from Field `Bid`.`bidder` of type `User!`
  """
  bidder: User_Key
  """
  ✨ Generated from Field `Bid`.`listing` of type `Listing!`
  """
  listing: Listing_Key
  """
  ✨ Generated from Field `Bid`.`amount` of type `Float!`
  """
  amount: Float
  """
  ✨ Generated from Field `Bid`.`currency` of type `String!`
  """
  currency: String
  """
  ✨ `_expr` server value variant of `currency` (✨ Generated from Field `Bid`.`currency` of type `String!`)
  """
  currency_expr: String_Expr
  """
  ✨ Generated from Field `Bid`.`placedAt` of type `Timestamp!`
  """
  placedAt: Timestamp
  """
  ✨ `_expr` server value variant of `placedAt` (✨ Generated from Field `Bid`.`placedAt` of type `Timestamp!`)
  """
  placedAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `placedAt` (✨ Generated from Field `Bid`.`placedAt` of type `Timestamp!`)
  """
  placedAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `Bid`.`status` of type `String!`
  """
  status: String
  """
  ✨ `_expr` server value variant of `status` (✨ Generated from Field `Bid`.`status` of type `String!`)
  """
  status_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Bid'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Bid_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Bid_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Bid_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Bid_Filter!]
  """
  ✨ Generated from Field `Bid`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Bid`.`bidderId` of type `UUID!`
  """
  bidderId: UUID_Filter
  """
  ✨ Generated from Field `Bid`.`listingId` of type `UUID!`
  """
  listingId: UUID_Filter
  """
  ✨ Generated from Field `Bid`.`bidder` of type `User!`
  """
  bidder: User_Filter
  """
  ✨ Generated from Field `Bid`.`listing` of type `Listing!`
  """
  listing: Listing_Filter
  """
  ✨ Generated from Field `Bid`.`amount` of type `Float!`
  """
  amount: Float_Filter
  """
  ✨ Generated from Field `Bid`.`currency` of type `String!`
  """
  currency: String_Filter
  """
  ✨ Generated from Field `Bid`.`placedAt` of type `Timestamp!`
  """
  placedAt: Timestamp_Filter
  """
  ✨ Generated from Field `Bid`.`status` of type `String!`
  """
  status: String_Filter
}
"""
✨ Generated first-row input type for table 'Bid'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Bid_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Bid_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Bid_Filter
}
"""
✨ Generated key input type for table 'Bid'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Bid_Key {
  """
  ✨ Generated from Field `Bid`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Bid`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Bid'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Bid_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Bid_Filter
}
"""
✨ Generated order input type for table 'Bid'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Bid_Order {
  """
  ✨ Generated from Field `Bid`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Bid`.`bidderId` of type `UUID!`
  """
  bidderId: OrderDirection
  """
  ✨ Generated from Field `Bid`.`listingId` of type `UUID!`
  """
  listingId: OrderDirection
  """
  ✨ Generated from Field `Bid`.`bidder` of type `User!`
  """
  bidder: User_Order
  """
  ✨ Generated from Field `Bid`.`listing` of type `Listing!`
  """
  listing: Listing_Order
  """
  ✨ Generated from Field `Bid`.`amount` of type `Float!`
  """
  amount: OrderDirection
  """
  ✨ Generated from Field `Bid`.`currency` of type `String!`
  """
  currency: OrderDirection
  """
  ✨ Generated from Field `Bid`.`placedAt` of type `Timestamp!`
  """
  placedAt: OrderDirection
  """
  ✨ Generated from Field `Bid`.`status` of type `String!`
  """
  status: OrderDirection
}
"""
✨ Generated data input type for table 'Category'. It includes all necessary fields for creating or upserting rows into table.
"""
input Category_Data {
  """
  ✨ Generated from Field `Category`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Category`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Category`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `Category`.`name` of type `String!`)
  """
  name_expr: String_Expr
  """
  ✨ Generated from Field `Category`.`subcategories` of type `[String]`
  """
  subcategories: [String!]
}
"""
✨ Generated filter input type for table 'Category'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Category_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Category_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Category_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Category_Filter!]
  """
  ✨ Generated from Field `Category`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Category`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `Category`.`subcategories` of type `[String]`
  """
  subcategories: String_ListFilter
  """
  ✨ Generated from Field `Category`.`nFTCategories_on_category` of type `[NFTCategory!]!`
  """
  nFTCategories_on_category: NFTCategory_ListFilter
  """
  ✨ Generated from Field `Category`.`userCategories_on_category` of type `[UserCategory!]!`
  """
  userCategories_on_category: UserCategory_ListFilter
  """
  ✨ Generated from Field `Category`.`voiceCategories_on_category` of type `[VoiceCategory!]!`
  """
  voiceCategories_on_category: VoiceCategory_ListFilter
  """
  ✨ Generated from Field `Category`.`nfts_via_NFTCategory` of type `[NFT!]!`
  """
  nfts_via_NFTCategory: NFT_ListFilter
  """
  ✨ Generated from Field `Category`.`users_via_UserCategory` of type `[User!]!`
  """
  users_via_UserCategory: User_ListFilter
  """
  ✨ Generated from Field `Category`.`voices_via_VoiceCategory` of type `[Voice!]!`
  """
  voices_via_VoiceCategory: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'Category'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Category_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Category_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Category_Filter
}
"""
✨ Generated key input type for table 'Category'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Category_Key {
  """
  ✨ Generated from Field `Category`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Category`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Category'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Category_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Category_Filter
}
"""
✨ Generated order input type for table 'Category'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Category_Order {
  """
  ✨ Generated from Field `Category`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Category`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'Collection'. It includes all necessary fields for creating or upserting rows into table.
"""
input Collection_Data {
  """
  ✨ Generated from Field `Collection`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Collection`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Collection`.`ownerId` of type `UUID!`
  """
  ownerId: UUID
  """
  ✨ `_expr` server value variant of `ownerId` (✨ Generated from Field `Collection`.`ownerId` of type `UUID!`)
  """
  ownerId_expr: UUID_Expr
  """
  ✨ Generated from Field `Collection`.`owner` of type `User!`
  """
  owner: User_Key
  """
  ✨ Generated from Field `Collection`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `Collection`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `Collection`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `Collection`.`description` of type `String`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `Collection`.`description` of type `String`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `Collection`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `Collection`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Collection'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Collection_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Collection_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Collection_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Collection_Filter!]
  """
  ✨ Generated from Field `Collection`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Collection`.`ownerId` of type `UUID!`
  """
  ownerId: UUID_Filter
  """
  ✨ Generated from Field `Collection`.`owner` of type `User!`
  """
  owner: User_Filter
  """
  ✨ Generated from Field `Collection`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `Collection`.`description` of type `String`
  """
  description: String_Filter
  """
  ✨ Generated from Field `Collection`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `Collection`.`collectionNFTS_on_collection` of type `[CollectionNFT!]!`
  """
  collectionNFTS_on_collection: CollectionNFT_ListFilter
  """
  ✨ Generated from Field `Collection`.`nfts_via_CollectionNFT` of type `[NFT!]!`
  """
  nfts_via_CollectionNFT: NFT_ListFilter
}
"""
✨ Generated first-row input type for table 'Collection'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Collection_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Collection_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Collection_Filter
}
"""
✨ Generated key input type for table 'Collection'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Collection_Key {
  """
  ✨ Generated from Field `Collection`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Collection`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Collection'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Collection_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Collection_Filter
}
"""
✨ Generated order input type for table 'Collection'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Collection_Order {
  """
  ✨ Generated from Field `Collection`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Collection`.`ownerId` of type `UUID!`
  """
  ownerId: OrderDirection
  """
  ✨ Generated from Field `Collection`.`owner` of type `User!`
  """
  owner: User_Order
  """
  ✨ Generated from Field `Collection`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `Collection`.`description` of type `String`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `Collection`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'CollectionNFT'. It includes all necessary fields for creating or upserting rows into table.
"""
input CollectionNFT_Data {
  """
  ✨ Generated from Field `CollectionNFT`.`collectionId` of type `UUID!`
  """
  collectionId: UUID
  """
  ✨ `_expr` server value variant of `collectionId` (✨ Generated from Field `CollectionNFT`.`collectionId` of type `UUID!`)
  """
  collectionId_expr: UUID_Expr
  """
  ✨ Generated from Field `CollectionNFT`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `CollectionNFT`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `CollectionNFT`.`collection` of type `Collection!`
  """
  collection: Collection_Key
  """
  ✨ Generated from Field `CollectionNFT`.`nft` of type `NFT!`
  """
  nft: NFT_Key
}
"""
✨ Generated filter input type for table 'CollectionNFT'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input CollectionNFT_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [CollectionNFT_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: CollectionNFT_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [CollectionNFT_Filter!]
  """
  ✨ Generated from Field `CollectionNFT`.`collectionId` of type `UUID!`
  """
  collectionId: UUID_Filter
  """
  ✨ Generated from Field `CollectionNFT`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `CollectionNFT`.`collection` of type `Collection!`
  """
  collection: Collection_Filter
  """
  ✨ Generated from Field `CollectionNFT`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
}
"""
✨ Generated first-row input type for table 'CollectionNFT'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input CollectionNFT_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [CollectionNFT_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: CollectionNFT_Filter
}
"""
✨ Generated key input type for table 'CollectionNFT'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input CollectionNFT_Key {
  """
  ✨ Generated from Field `CollectionNFT`.`collectionId` of type `UUID!`
  """
  collectionId: UUID
  """
  ✨ `_expr` server value variant of `collectionId` (✨ Generated from Field `CollectionNFT`.`collectionId` of type `UUID!`)
  """
  collectionId_expr: UUID_Expr
  """
  ✨ Generated from Field `CollectionNFT`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `CollectionNFT`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'CollectionNFT'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input CollectionNFT_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: CollectionNFT_Filter
}
"""
✨ Generated order input type for table 'CollectionNFT'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input CollectionNFT_Order {
  """
  ✨ Generated from Field `CollectionNFT`.`collectionId` of type `UUID!`
  """
  collectionId: OrderDirection
  """
  ✨ Generated from Field `CollectionNFT`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `CollectionNFT`.`collection` of type `Collection!`
  """
  collection: Collection_Order
  """
  ✨ Generated from Field `CollectionNFT`.`nft` of type `NFT!`
  """
  nft: NFT_Order
}
"""
✨ Generated data input type for table 'Contract'. It includes all necessary fields for creating or upserting rows into table.
"""
input Contract_Data {
  """
  ✨ Generated from Field `Contract`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Contract`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Contract`.`abi` of type `String`
  """
  abi: String
  """
  ✨ `_expr` server value variant of `abi` (✨ Generated from Field `Contract`.`abi` of type `String`)
  """
  abi_expr: String_Expr
  """
  ✨ Generated from Field `Contract`.`address` of type `String!`
  """
  address: String
  """
  ✨ `_expr` server value variant of `address` (✨ Generated from Field `Contract`.`address` of type `String!`)
  """
  address_expr: String_Expr
  """
  ✨ Generated from Field `Contract`.`author` of type `String`
  """
  author: String
  """
  ✨ `_expr` server value variant of `author` (✨ Generated from Field `Contract`.`author` of type `String`)
  """
  author_expr: String_Expr
  """
  ✨ Generated from Field `Contract`.`bytecode` of type `String`
  """
  bytecode: String
  """
  ✨ `_expr` server value variant of `bytecode` (✨ Generated from Field `Contract`.`bytecode` of type `String`)
  """
  bytecode_expr: String_Expr
  """
  ✨ Generated from Field `Contract`.`contactName` of type `String`
  """
  contactName: String
  """
  ✨ `_expr` server value variant of `contactName` (✨ Generated from Field `Contract`.`contactName` of type `String`)
  """
  contactName_expr: String_Expr
  """
  ✨ Generated from Field `Contract`.`deploymentBlockNumber` of type `Int!`
  """
  deploymentBlockNumber: Int
  """
  ✨ Generated from Field `Contract`.`deploymentTimestamp` of type `Timestamp!`
  """
  deploymentTimestamp: Timestamp
  """
  ✨ `_expr` server value variant of `deploymentTimestamp` (✨ Generated from Field `Contract`.`deploymentTimestamp` of type `Timestamp!`)
  """
  deploymentTimestamp_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `deploymentTimestamp` (✨ Generated from Field `Contract`.`deploymentTimestamp` of type `Timestamp!`)
  """
  deploymentTimestamp_time: Timestamp_Relative
  """
  ✨ Generated from Field `Contract`.`deploymentTransactionHash` of type `String!`
  """
  deploymentTransactionHash: String
  """
  ✨ `_expr` server value variant of `deploymentTransactionHash` (✨ Generated from Field `Contract`.`deploymentTransactionHash` of type `String!`)
  """
  deploymentTransactionHash_expr: String_Expr
  """
  ✨ Generated from Field `Contract`.`description` of type `String`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `Contract`.`description` of type `String`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `Contract`.`license` of type `String`
  """
  license: String
  """
  ✨ `_expr` server value variant of `license` (✨ Generated from Field `Contract`.`license` of type `String`)
  """
  license_expr: String_Expr
  """
  ✨ Generated from Field `Contract`.`sourceCode` of type `String`
  """
  sourceCode: String
  """
  ✨ `_expr` server value variant of `sourceCode` (✨ Generated from Field `Contract`.`sourceCode` of type `String`)
  """
  sourceCode_expr: String_Expr
  """
  ✨ Generated from Field `Contract`.`tags` of type `[String]`
  """
  tags: [String!]
  """
  ✨ Generated from Field `Contract`.`version` of type `String`
  """
  version: String
  """
  ✨ `_expr` server value variant of `version` (✨ Generated from Field `Contract`.`version` of type `String`)
  """
  version_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Contract'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Contract_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Contract_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Contract_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Contract_Filter!]
  """
  ✨ Generated from Field `Contract`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Contract`.`abi` of type `String`
  """
  abi: String_Filter
  """
  ✨ Generated from Field `Contract`.`address` of type `String!`
  """
  address: String_Filter
  """
  ✨ Generated from Field `Contract`.`author` of type `String`
  """
  author: String_Filter
  """
  ✨ Generated from Field `Contract`.`bytecode` of type `String`
  """
  bytecode: String_Filter
  """
  ✨ Generated from Field `Contract`.`contactName` of type `String`
  """
  contactName: String_Filter
  """
  ✨ Generated from Field `Contract`.`deploymentBlockNumber` of type `Int!`
  """
  deploymentBlockNumber: Int_Filter
  """
  ✨ Generated from Field `Contract`.`deploymentTimestamp` of type `Timestamp!`
  """
  deploymentTimestamp: Timestamp_Filter
  """
  ✨ Generated from Field `Contract`.`deploymentTransactionHash` of type `String!`
  """
  deploymentTransactionHash: String_Filter
  """
  ✨ Generated from Field `Contract`.`description` of type `String`
  """
  description: String_Filter
  """
  ✨ Generated from Field `Contract`.`license` of type `String`
  """
  license: String_Filter
  """
  ✨ Generated from Field `Contract`.`sourceCode` of type `String`
  """
  sourceCode: String_Filter
  """
  ✨ Generated from Field `Contract`.`tags` of type `[String]`
  """
  tags: String_ListFilter
  """
  ✨ Generated from Field `Contract`.`version` of type `String`
  """
  version: String_Filter
  """
  ✨ Generated from Field `Contract`.`contractNFTS_on_contract` of type `[ContractNFT!]!`
  """
  contractNFTS_on_contract: ContractNFT_ListFilter
  """
  ✨ Generated from Field `Contract`.`contractUsers_on_contract` of type `[ContractUser!]!`
  """
  contractUsers_on_contract: ContractUser_ListFilter
  """
  ✨ Generated from Field `Contract`.`contractVoices_on_contract` of type `[ContractVoice!]!`
  """
  contractVoices_on_contract: ContractVoice_ListFilter
  """
  ✨ Generated from Field `Contract`.`nfts_via_ContractNFT` of type `[NFT!]!`
  """
  nfts_via_ContractNFT: NFT_ListFilter
  """
  ✨ Generated from Field `Contract`.`users_via_ContractUser` of type `[User!]!`
  """
  users_via_ContractUser: User_ListFilter
  """
  ✨ Generated from Field `Contract`.`voices_via_ContractVoice` of type `[Voice!]!`
  """
  voices_via_ContractVoice: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'Contract'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Contract_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Contract_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Contract_Filter
}
"""
✨ Generated key input type for table 'Contract'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Contract_Key {
  """
  ✨ Generated from Field `Contract`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Contract`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Contract'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Contract_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Contract_Filter
}
"""
✨ Generated order input type for table 'Contract'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Contract_Order {
  """
  ✨ Generated from Field `Contract`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Contract`.`abi` of type `String`
  """
  abi: OrderDirection
  """
  ✨ Generated from Field `Contract`.`address` of type `String!`
  """
  address: OrderDirection
  """
  ✨ Generated from Field `Contract`.`author` of type `String`
  """
  author: OrderDirection
  """
  ✨ Generated from Field `Contract`.`bytecode` of type `String`
  """
  bytecode: OrderDirection
  """
  ✨ Generated from Field `Contract`.`contactName` of type `String`
  """
  contactName: OrderDirection
  """
  ✨ Generated from Field `Contract`.`deploymentBlockNumber` of type `Int!`
  """
  deploymentBlockNumber: OrderDirection
  """
  ✨ Generated from Field `Contract`.`deploymentTimestamp` of type `Timestamp!`
  """
  deploymentTimestamp: OrderDirection
  """
  ✨ Generated from Field `Contract`.`deploymentTransactionHash` of type `String!`
  """
  deploymentTransactionHash: OrderDirection
  """
  ✨ Generated from Field `Contract`.`description` of type `String`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `Contract`.`license` of type `String`
  """
  license: OrderDirection
  """
  ✨ Generated from Field `Contract`.`sourceCode` of type `String`
  """
  sourceCode: OrderDirection
  """
  ✨ Generated from Field `Contract`.`version` of type `String`
  """
  version: OrderDirection
}
"""
✨ Generated data input type for table 'ContractNFT'. It includes all necessary fields for creating or upserting rows into table.
"""
input ContractNFT_Data {
  """
  ✨ Generated from Field `ContractNFT`.`contractId` of type `UUID!`
  """
  contractId: UUID
  """
  ✨ `_expr` server value variant of `contractId` (✨ Generated from Field `ContractNFT`.`contractId` of type `UUID!`)
  """
  contractId_expr: UUID_Expr
  """
  ✨ Generated from Field `ContractNFT`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `ContractNFT`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `ContractNFT`.`contract` of type `Contract!`
  """
  contract: Contract_Key
  """
  ✨ Generated from Field `ContractNFT`.`nft` of type `NFT!`
  """
  nft: NFT_Key
}
"""
✨ Generated filter input type for table 'ContractNFT'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input ContractNFT_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [ContractNFT_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: ContractNFT_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [ContractNFT_Filter!]
  """
  ✨ Generated from Field `ContractNFT`.`contractId` of type `UUID!`
  """
  contractId: UUID_Filter
  """
  ✨ Generated from Field `ContractNFT`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `ContractNFT`.`contract` of type `Contract!`
  """
  contract: Contract_Filter
  """
  ✨ Generated from Field `ContractNFT`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
}
"""
✨ Generated first-row input type for table 'ContractNFT'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input ContractNFT_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [ContractNFT_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: ContractNFT_Filter
}
"""
✨ Generated key input type for table 'ContractNFT'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input ContractNFT_Key {
  """
  ✨ Generated from Field `ContractNFT`.`contractId` of type `UUID!`
  """
  contractId: UUID
  """
  ✨ `_expr` server value variant of `contractId` (✨ Generated from Field `ContractNFT`.`contractId` of type `UUID!`)
  """
  contractId_expr: UUID_Expr
  """
  ✨ Generated from Field `ContractNFT`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `ContractNFT`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'ContractNFT'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input ContractNFT_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: ContractNFT_Filter
}
"""
✨ Generated order input type for table 'ContractNFT'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input ContractNFT_Order {
  """
  ✨ Generated from Field `ContractNFT`.`contractId` of type `UUID!`
  """
  contractId: OrderDirection
  """
  ✨ Generated from Field `ContractNFT`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `ContractNFT`.`contract` of type `Contract!`
  """
  contract: Contract_Order
  """
  ✨ Generated from Field `ContractNFT`.`nft` of type `NFT!`
  """
  nft: NFT_Order
}
"""
✨ Generated data input type for table 'ContractUser'. It includes all necessary fields for creating or upserting rows into table.
"""
input ContractUser_Data {
  """
  ✨ Generated from Field `ContractUser`.`contractId` of type `UUID!`
  """
  contractId: UUID
  """
  ✨ `_expr` server value variant of `contractId` (✨ Generated from Field `ContractUser`.`contractId` of type `UUID!`)
  """
  contractId_expr: UUID_Expr
  """
  ✨ Generated from Field `ContractUser`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `ContractUser`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `ContractUser`.`contract` of type `Contract!`
  """
  contract: Contract_Key
  """
  ✨ Generated from Field `ContractUser`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'ContractUser'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input ContractUser_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [ContractUser_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: ContractUser_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [ContractUser_Filter!]
  """
  ✨ Generated from Field `ContractUser`.`contractId` of type `UUID!`
  """
  contractId: UUID_Filter
  """
  ✨ Generated from Field `ContractUser`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `ContractUser`.`contract` of type `Contract!`
  """
  contract: Contract_Filter
  """
  ✨ Generated from Field `ContractUser`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'ContractUser'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input ContractUser_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [ContractUser_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: ContractUser_Filter
}
"""
✨ Generated key input type for table 'ContractUser'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input ContractUser_Key {
  """
  ✨ Generated from Field `ContractUser`.`contractId` of type `UUID!`
  """
  contractId: UUID
  """
  ✨ `_expr` server value variant of `contractId` (✨ Generated from Field `ContractUser`.`contractId` of type `UUID!`)
  """
  contractId_expr: UUID_Expr
  """
  ✨ Generated from Field `ContractUser`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `ContractUser`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'ContractUser'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input ContractUser_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: ContractUser_Filter
}
"""
✨ Generated order input type for table 'ContractUser'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input ContractUser_Order {
  """
  ✨ Generated from Field `ContractUser`.`contractId` of type `UUID!`
  """
  contractId: OrderDirection
  """
  ✨ Generated from Field `ContractUser`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `ContractUser`.`contract` of type `Contract!`
  """
  contract: Contract_Order
  """
  ✨ Generated from Field `ContractUser`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'ContractVoice'. It includes all necessary fields for creating or upserting rows into table.
"""
input ContractVoice_Data {
  """
  ✨ Generated from Field `ContractVoice`.`contractId` of type `UUID!`
  """
  contractId: UUID
  """
  ✨ `_expr` server value variant of `contractId` (✨ Generated from Field `ContractVoice`.`contractId` of type `UUID!`)
  """
  contractId_expr: UUID_Expr
  """
  ✨ Generated from Field `ContractVoice`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `ContractVoice`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `ContractVoice`.`contract` of type `Contract!`
  """
  contract: Contract_Key
  """
  ✨ Generated from Field `ContractVoice`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'ContractVoice'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input ContractVoice_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [ContractVoice_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: ContractVoice_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [ContractVoice_Filter!]
  """
  ✨ Generated from Field `ContractVoice`.`contractId` of type `UUID!`
  """
  contractId: UUID_Filter
  """
  ✨ Generated from Field `ContractVoice`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `ContractVoice`.`contract` of type `Contract!`
  """
  contract: Contract_Filter
  """
  ✨ Generated from Field `ContractVoice`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'ContractVoice'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input ContractVoice_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [ContractVoice_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: ContractVoice_Filter
}
"""
✨ Generated key input type for table 'ContractVoice'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input ContractVoice_Key {
  """
  ✨ Generated from Field `ContractVoice`.`contractId` of type `UUID!`
  """
  contractId: UUID
  """
  ✨ `_expr` server value variant of `contractId` (✨ Generated from Field `ContractVoice`.`contractId` of type `UUID!`)
  """
  contractId_expr: UUID_Expr
  """
  ✨ Generated from Field `ContractVoice`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `ContractVoice`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'ContractVoice'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input ContractVoice_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: ContractVoice_Filter
}
"""
✨ Generated order input type for table 'ContractVoice'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input ContractVoice_Order {
  """
  ✨ Generated from Field `ContractVoice`.`contractId` of type `UUID!`
  """
  contractId: OrderDirection
  """
  ✨ Generated from Field `ContractVoice`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `ContractVoice`.`contract` of type `Contract!`
  """
  contract: Contract_Order
  """
  ✨ Generated from Field `ContractVoice`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'ExperienceLevel'. It includes all necessary fields for creating or upserting rows into table.
"""
input ExperienceLevel_Data {
  """
  ✨ Generated from Field `ExperienceLevel`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `ExperienceLevel`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `ExperienceLevel`.`description` of type `[String]`
  """
  description: [String!]
  """
  ✨ Generated from Field `ExperienceLevel`.`level` of type `String!`
  """
  level: String
  """
  ✨ `_expr` server value variant of `level` (✨ Generated from Field `ExperienceLevel`.`level` of type `String!`)
  """
  level_expr: String_Expr
}
"""
✨ Generated filter input type for table 'ExperienceLevel'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input ExperienceLevel_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [ExperienceLevel_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: ExperienceLevel_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [ExperienceLevel_Filter!]
  """
  ✨ Generated from Field `ExperienceLevel`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `ExperienceLevel`.`description` of type `[String]`
  """
  description: String_ListFilter
  """
  ✨ Generated from Field `ExperienceLevel`.`level` of type `String!`
  """
  level: String_Filter
  """
  ✨ Generated from Field `ExperienceLevel`.`userExperiences_on_experienceLevel` of type `[UserExperience!]!`
  """
  userExperiences_on_experienceLevel: UserExperience_ListFilter
  """
  ✨ Generated from Field `ExperienceLevel`.`voiceExperiences_on_experienceLevel` of type `[VoiceExperience!]!`
  """
  voiceExperiences_on_experienceLevel: VoiceExperience_ListFilter
  """
  ✨ Generated from Field `ExperienceLevel`.`users_via_UserExperience` of type `[User!]!`
  """
  users_via_UserExperience: User_ListFilter
  """
  ✨ Generated from Field `ExperienceLevel`.`voices_via_VoiceExperience` of type `[Voice!]!`
  """
  voices_via_VoiceExperience: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'ExperienceLevel'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input ExperienceLevel_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [ExperienceLevel_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: ExperienceLevel_Filter
}
"""
✨ Generated key input type for table 'ExperienceLevel'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input ExperienceLevel_Key {
  """
  ✨ Generated from Field `ExperienceLevel`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `ExperienceLevel`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'ExperienceLevel'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input ExperienceLevel_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: ExperienceLevel_Filter
}
"""
✨ Generated order input type for table 'ExperienceLevel'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input ExperienceLevel_Order {
  """
  ✨ Generated from Field `ExperienceLevel`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `ExperienceLevel`.`level` of type `String!`
  """
  level: OrderDirection
}
"""
✨ Generated data input type for table 'Favorite'. It includes all necessary fields for creating or upserting rows into table.
"""
input Favorite_Data {
  """
  ✨ Generated from Field `Favorite`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `Favorite`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `Favorite`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Favorite`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Favorite`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `Favorite`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `Favorite`.`favoritedAt` of type `Timestamp!`
  """
  favoritedAt: Timestamp
  """
  ✨ `_expr` server value variant of `favoritedAt` (✨ Generated from Field `Favorite`.`favoritedAt` of type `Timestamp!`)
  """
  favoritedAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `favoritedAt` (✨ Generated from Field `Favorite`.`favoritedAt` of type `Timestamp!`)
  """
  favoritedAt_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'Favorite'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Favorite_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Favorite_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Favorite_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Favorite_Filter!]
  """
  ✨ Generated from Field `Favorite`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `Favorite`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `Favorite`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `Favorite`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `Favorite`.`favoritedAt` of type `Timestamp!`
  """
  favoritedAt: Timestamp_Filter
}
"""
✨ Generated first-row input type for table 'Favorite'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Favorite_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Favorite_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Favorite_Filter
}
"""
✨ Generated key input type for table 'Favorite'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Favorite_Key {
  """
  ✨ Generated from Field `Favorite`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `Favorite`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `Favorite`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Favorite`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Favorite'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Favorite_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Favorite_Filter
}
"""
✨ Generated order input type for table 'Favorite'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Favorite_Order {
  """
  ✨ Generated from Field `Favorite`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `Favorite`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `Favorite`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `Favorite`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `Favorite`.`favoritedAt` of type `Timestamp!`
  """
  favoritedAt: OrderDirection
}
"""
✨ Generated data input type for table 'Language'. It includes all necessary fields for creating or upserting rows into table.
"""
input Language_Data {
  """
  ✨ Generated from Field `Language`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Language`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Language`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `Language`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Language'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Language_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Language_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Language_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Language_Filter!]
  """
  ✨ Generated from Field `Language`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Language`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `Language`.`nFTLanguages_on_language` of type `[NFTLanguage!]!`
  """
  nFTLanguages_on_language: NFTLanguage_ListFilter
  """
  ✨ Generated from Field `Language`.`userLanguages_on_language` of type `[UserLanguage!]!`
  """
  userLanguages_on_language: UserLanguage_ListFilter
  """
  ✨ Generated from Field `Language`.`voiceLanguages_on_language` of type `[VoiceLanguage!]!`
  """
  voiceLanguages_on_language: VoiceLanguage_ListFilter
  """
  ✨ Generated from Field `Language`.`nfts_via_NFTLanguage` of type `[NFT!]!`
  """
  nfts_via_NFTLanguage: NFT_ListFilter
  """
  ✨ Generated from Field `Language`.`users_via_UserLanguage` of type `[User!]!`
  """
  users_via_UserLanguage: User_ListFilter
  """
  ✨ Generated from Field `Language`.`voices_via_VoiceLanguage` of type `[Voice!]!`
  """
  voices_via_VoiceLanguage: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'Language'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Language_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Language_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Language_Filter
}
"""
✨ Generated key input type for table 'Language'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Language_Key {
  """
  ✨ Generated from Field `Language`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Language`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Language'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Language_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Language_Filter
}
"""
✨ Generated order input type for table 'Language'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Language_Order {
  """
  ✨ Generated from Field `Language`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Language`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'Listing'. It includes all necessary fields for creating or upserting rows into table.
"""
input Listing_Data {
  """
  ✨ Generated from Field `Listing`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Listing`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Listing`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Listing`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Listing`.`sellerId` of type `UUID!`
  """
  sellerId: UUID
  """
  ✨ `_expr` server value variant of `sellerId` (✨ Generated from Field `Listing`.`sellerId` of type `UUID!`)
  """
  sellerId_expr: UUID_Expr
  """
  ✨ Generated from Field `Listing`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `Listing`.`seller` of type `User!`
  """
  seller: User_Key
  """
  ✨ Generated from Field `Listing`.`currency` of type `String!`
  """
  currency: String
  """
  ✨ `_expr` server value variant of `currency` (✨ Generated from Field `Listing`.`currency` of type `String!`)
  """
  currency_expr: String_Expr
  """
  ✨ Generated from Field `Listing`.`expiresAt` of type `Timestamp`
  """
  expiresAt: Timestamp
  """
  ✨ `_expr` server value variant of `expiresAt` (✨ Generated from Field `Listing`.`expiresAt` of type `Timestamp`)
  """
  expiresAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `expiresAt` (✨ Generated from Field `Listing`.`expiresAt` of type `Timestamp`)
  """
  expiresAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `Listing`.`listedAt` of type `Timestamp!`
  """
  listedAt: Timestamp
  """
  ✨ `_expr` server value variant of `listedAt` (✨ Generated from Field `Listing`.`listedAt` of type `Timestamp!`)
  """
  listedAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `listedAt` (✨ Generated from Field `Listing`.`listedAt` of type `Timestamp!`)
  """
  listedAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `Listing`.`price` of type `Float!`
  """
  price: Float
  """
  ✨ Generated from Field `Listing`.`status` of type `String!`
  """
  status: String
  """
  ✨ `_expr` server value variant of `status` (✨ Generated from Field `Listing`.`status` of type `String!`)
  """
  status_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Listing'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Listing_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Listing_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Listing_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Listing_Filter!]
  """
  ✨ Generated from Field `Listing`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Listing`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `Listing`.`sellerId` of type `UUID!`
  """
  sellerId: UUID_Filter
  """
  ✨ Generated from Field `Listing`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `Listing`.`seller` of type `User!`
  """
  seller: User_Filter
  """
  ✨ Generated from Field `Listing`.`currency` of type `String!`
  """
  currency: String_Filter
  """
  ✨ Generated from Field `Listing`.`expiresAt` of type `Timestamp`
  """
  expiresAt: Timestamp_Filter
  """
  ✨ Generated from Field `Listing`.`listedAt` of type `Timestamp!`
  """
  listedAt: Timestamp_Filter
  """
  ✨ Generated from Field `Listing`.`price` of type `Float!`
  """
  price: Float_Filter
  """
  ✨ Generated from Field `Listing`.`status` of type `String!`
  """
  status: String_Filter
  """
  ✨ Generated from Field `Listing`.`bids_on_listing` of type `[Bid!]!`
  """
  bids_on_listing: Bid_ListFilter
}
"""
✨ Generated first-row input type for table 'Listing'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Listing_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Listing_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Listing_Filter
}
"""
✨ Generated key input type for table 'Listing'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Listing_Key {
  """
  ✨ Generated from Field `Listing`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Listing`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Listing'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Listing_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Listing_Filter
}
"""
✨ Generated order input type for table 'Listing'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Listing_Order {
  """
  ✨ Generated from Field `Listing`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Listing`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `Listing`.`sellerId` of type `UUID!`
  """
  sellerId: OrderDirection
  """
  ✨ Generated from Field `Listing`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `Listing`.`seller` of type `User!`
  """
  seller: User_Order
  """
  ✨ Generated from Field `Listing`.`currency` of type `String!`
  """
  currency: OrderDirection
  """
  ✨ Generated from Field `Listing`.`expiresAt` of type `Timestamp`
  """
  expiresAt: OrderDirection
  """
  ✨ Generated from Field `Listing`.`listedAt` of type `Timestamp!`
  """
  listedAt: OrderDirection
  """
  ✨ Generated from Field `Listing`.`price` of type `Float!`
  """
  price: OrderDirection
  """
  ✨ Generated from Field `Listing`.`status` of type `String!`
  """
  status: OrderDirection
}
"""
✨ Generated data input type for table 'Message'. It includes all necessary fields for creating or upserting rows into table.
"""
input Message_Data {
  """
  ✨ Generated from Field `Message`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Message`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Message`.`receiverId` of type `UUID!`
  """
  receiverId: UUID
  """
  ✨ `_expr` server value variant of `receiverId` (✨ Generated from Field `Message`.`receiverId` of type `UUID!`)
  """
  receiverId_expr: UUID_Expr
  """
  ✨ Generated from Field `Message`.`senderId` of type `UUID!`
  """
  senderId: UUID
  """
  ✨ `_expr` server value variant of `senderId` (✨ Generated from Field `Message`.`senderId` of type `UUID!`)
  """
  senderId_expr: UUID_Expr
  """
  ✨ Generated from Field `Message`.`receiver` of type `User!`
  """
  receiver: User_Key
  """
  ✨ Generated from Field `Message`.`sender` of type `User!`
  """
  sender: User_Key
  """
  ✨ Generated from Field `Message`.`content` of type `String!`
  """
  content: String
  """
  ✨ `_expr` server value variant of `content` (✨ Generated from Field `Message`.`content` of type `String!`)
  """
  content_expr: String_Expr
  """
  ✨ Generated from Field `Message`.`read` of type `Boolean!`
  """
  read: Boolean
  """
  ✨ Generated from Field `Message`.`sentAt` of type `Timestamp!`
  """
  sentAt: Timestamp
  """
  ✨ `_expr` server value variant of `sentAt` (✨ Generated from Field `Message`.`sentAt` of type `Timestamp!`)
  """
  sentAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `sentAt` (✨ Generated from Field `Message`.`sentAt` of type `Timestamp!`)
  """
  sentAt_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'Message'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Message_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Message_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Message_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Message_Filter!]
  """
  ✨ Generated from Field `Message`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Message`.`receiverId` of type `UUID!`
  """
  receiverId: UUID_Filter
  """
  ✨ Generated from Field `Message`.`senderId` of type `UUID!`
  """
  senderId: UUID_Filter
  """
  ✨ Generated from Field `Message`.`receiver` of type `User!`
  """
  receiver: User_Filter
  """
  ✨ Generated from Field `Message`.`sender` of type `User!`
  """
  sender: User_Filter
  """
  ✨ Generated from Field `Message`.`content` of type `String!`
  """
  content: String_Filter
  """
  ✨ Generated from Field `Message`.`read` of type `Boolean!`
  """
  read: Boolean_Filter
  """
  ✨ Generated from Field `Message`.`sentAt` of type `Timestamp!`
  """
  sentAt: Timestamp_Filter
}
"""
✨ Generated first-row input type for table 'Message'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Message_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Message_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Message_Filter
}
"""
✨ Generated key input type for table 'Message'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Message_Key {
  """
  ✨ Generated from Field `Message`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Message`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Message'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Message_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Message_Filter
}
"""
✨ Generated order input type for table 'Message'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Message_Order {
  """
  ✨ Generated from Field `Message`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Message`.`receiverId` of type `UUID!`
  """
  receiverId: OrderDirection
  """
  ✨ Generated from Field `Message`.`senderId` of type `UUID!`
  """
  senderId: OrderDirection
  """
  ✨ Generated from Field `Message`.`receiver` of type `User!`
  """
  receiver: User_Order
  """
  ✨ Generated from Field `Message`.`sender` of type `User!`
  """
  sender: User_Order
  """
  ✨ Generated from Field `Message`.`content` of type `String!`
  """
  content: OrderDirection
  """
  ✨ Generated from Field `Message`.`read` of type `Boolean!`
  """
  read: OrderDirection
  """
  ✨ Generated from Field `Message`.`sentAt` of type `Timestamp!`
  """
  sentAt: OrderDirection
}
"""
✨ Generated data input type for table 'NFT'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFT_Data {
  """
  ✨ Generated from Field `NFT`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `NFT`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `NFT`.`creatorId` of type `UUID!`
  """
  creatorId: UUID
  """
  ✨ `_expr` server value variant of `creatorId` (✨ Generated from Field `NFT`.`creatorId` of type `UUID!`)
  """
  creatorId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFT`.`creator` of type `User!`
  """
  creator: User_Key
  """
  ✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `NFT`.`description` of type `String`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `NFT`.`description` of type `String`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `NFT`.`fileUrl` of type `String!`
  """
  fileUrl: String
  """
  ✨ `_expr` server value variant of `fileUrl` (✨ Generated from Field `NFT`.`fileUrl` of type `String!`)
  """
  fileUrl_expr: String_Expr
  """
  ✨ Generated from Field `NFT`.`geolocation` of type `String`
  """
  geolocation: String
  """
  ✨ `_expr` server value variant of `geolocation` (✨ Generated from Field `NFT`.`geolocation` of type `String`)
  """
  geolocation_expr: String_Expr
  """
  ✨ Generated from Field `NFT`.`price` of type `Float!`
  """
  price: Float
  """
  ✨ Generated from Field `NFT`.`smartContractAddress` of type `String`
  """
  smartContractAddress: String
  """
  ✨ `_expr` server value variant of `smartContractAddress` (✨ Generated from Field `NFT`.`smartContractAddress` of type `String`)
  """
  smartContractAddress_expr: String_Expr
  """
  ✨ Generated from Field `NFT`.`title` of type `String!`
  """
  title: String
  """
  ✨ `_expr` server value variant of `title` (✨ Generated from Field `NFT`.`title` of type `String!`)
  """
  title_expr: String_Expr
}
"""
✨ Generated filter input type for table 'NFT'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFT_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFT_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFT_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFT_Filter!]
  """
  ✨ Generated from Field `NFT`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `NFT`.`creatorId` of type `UUID!`
  """
  creatorId: UUID_Filter
  """
  ✨ Generated from Field `NFT`.`creator` of type `User!`
  """
  creator: User_Filter
  """
  ✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `NFT`.`description` of type `String`
  """
  description: String_Filter
  """
  ✨ Generated from Field `NFT`.`fileUrl` of type `String!`
  """
  fileUrl: String_Filter
  """
  ✨ Generated from Field `NFT`.`geolocation` of type `String`
  """
  geolocation: String_Filter
  """
  ✨ Generated from Field `NFT`.`price` of type `Float!`
  """
  price: Float_Filter
  """
  ✨ Generated from Field `NFT`.`smartContractAddress` of type `String`
  """
  smartContractAddress: String_Filter
  """
  ✨ Generated from Field `NFT`.`title` of type `String!`
  """
  title: String_Filter
  """
  ✨ Generated from Field `NFT`.`collectionNFTS_on_nft` of type `[CollectionNFT!]!`
  """
  collectionNFTS_on_nft: CollectionNFT_ListFilter
  """
  ✨ Generated from Field `NFT`.`contractNFTS_on_nft` of type `[ContractNFT!]!`
  """
  contractNFTS_on_nft: ContractNFT_ListFilter
  """
  ✨ Generated from Field `NFT`.`favorites_on_nft` of type `[Favorite!]!`
  """
  favorites_on_nft: Favorite_ListFilter
  """
  ✨ Generated from Field `NFT`.`listings_on_nft` of type `[Listing!]!`
  """
  listings_on_nft: Listing_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTCategories_on_nft` of type `[NFTCategory!]!`
  """
  nFTCategories_on_nft: NFTCategory_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTLanguages_on_nft` of type `[NFTLanguage!]!`
  """
  nFTLanguages_on_nft: NFTLanguage_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTProductionQualities_on_nft` of type `[NFTProductionQuality!]!`
  """
  nFTProductionQualities_on_nft: NFTProductionQuality_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTRegionalDialects_on_nft` of type `[NFTRegionalDialect!]!`
  """
  nFTRegionalDialects_on_nft: NFTRegionalDialect_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTSecondaryLanguages_on_nft` of type `[NFTSecondaryLanguage!]!`
  """
  nFTSecondaryLanguages_on_nft: NFTSecondaryLanguage_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTStudioAvailabilities_on_nft` of type `[NFTStudioAvailability!]!`
  """
  nFTStudioAvailabilities_on_nft: NFTStudioAvailability_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTStyleToneOptions_on_nft` of type `[NFTStyleToneOption!]!`
  """
  nFTStyleToneOptions_on_nft: NFTStyleToneOption_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTTechnicalSpecifications_on_nft` of type `[NFTTechnicalSpecification!]!`
  """
  nFTTechnicalSpecifications_on_nft: NFTTechnicalSpecification_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTTimeZones_on_nft` of type `[NFTTimeZone!]!`
  """
  nFTTimeZones_on_nft: NFTTimeZone_ListFilter
  """
  ✨ Generated from Field `NFT`.`nFTVoiceTraits_on_nft` of type `[NFTVoiceTrait!]!`
  """
  nFTVoiceTraits_on_nft: NFTVoiceTrait_ListFilter
  """
  ✨ Generated from Field `NFT`.`ownerships_on_nft` of type `[Ownership!]!`
  """
  ownerships_on_nft: Ownership_ListFilter
  """
  ✨ Generated from Field `NFT`.`reviews_on_nft` of type `[Review!]!`
  """
  reviews_on_nft: Review_ListFilter
  """
  ✨ Generated from Field `NFT`.`royalties_on_nft` of type `[Royalty!]!`
  """
  royalties_on_nft: Royalty_ListFilter
  """
  ✨ Generated from Field `NFT`.`transactions_on_nft` of type `[Transaction!]!`
  """
  transactions_on_nft: Transaction_ListFilter
  """
  ✨ Generated from Field `NFT`.`categories_via_NFTCategory` of type `[Category!]!`
  """
  categories_via_NFTCategory: Category_ListFilter
  """
  ✨ Generated from Field `NFT`.`collections_via_CollectionNFT` of type `[Collection!]!`
  """
  collections_via_CollectionNFT: Collection_ListFilter
  """
  ✨ Generated from Field `NFT`.`contracts_via_ContractNFT` of type `[Contract!]!`
  """
  contracts_via_ContractNFT: Contract_ListFilter
  """
  ✨ Generated from Field `NFT`.`languages_via_NFTLanguage` of type `[Language!]!`
  """
  languages_via_NFTLanguage: Language_ListFilter
  """
  ✨ Generated from Field `NFT`.`productionQualities_via_NFTProductionQuality` of type `[ProductionQuality!]!`
  """
  productionQualities_via_NFTProductionQuality: ProductionQuality_ListFilter
  """
  ✨ Generated from Field `NFT`.`regionalDialects_via_NFTRegionalDialect` of type `[RegionalDialect!]!`
  """
  regionalDialects_via_NFTRegionalDialect: RegionalDialect_ListFilter
  """
  ✨ Generated from Field `NFT`.`secondaryLanguages_via_NFTSecondaryLanguage` of type `[SecondaryLanguage!]!`
  """
  secondaryLanguages_via_NFTSecondaryLanguage: SecondaryLanguage_ListFilter
  """
  ✨ Generated from Field `NFT`.`studioAvailabilities_via_NFTStudioAvailability` of type `[StudioAvailability!]!`
  """
  studioAvailabilities_via_NFTStudioAvailability: StudioAvailability_ListFilter
  """
  ✨ Generated from Field `NFT`.`styleToneOptions_via_NFTStyleToneOption` of type `[StyleToneOption!]!`
  """
  styleToneOptions_via_NFTStyleToneOption: StyleToneOption_ListFilter
  """
  ✨ Generated from Field `NFT`.`technicalSpecifications_via_NFTTechnicalSpecification` of type `[TechnicalSpecification!]!`
  """
  technicalSpecifications_via_NFTTechnicalSpecification: TechnicalSpecification_ListFilter
  """
  ✨ Generated from Field `NFT`.`timeZones_via_NFTTimeZone` of type `[TimeZone!]!`
  """
  timeZones_via_NFTTimeZone: TimeZone_ListFilter
  """
  ✨ Generated from Field `NFT`.`users_via_Favorite` of type `[User!]!`
  """
  users_via_Favorite: User_ListFilter
  """
  ✨ Generated from Field `NFT`.`users_via_Ownership` of type `[User!]!`
  """
  users_via_Ownership: User_ListFilter
  """
  ✨ Generated from Field `NFT`.`voiceTraits_via_NFTVoiceTrait` of type `[VoiceTrait!]!`
  """
  voiceTraits_via_NFTVoiceTrait: VoiceTrait_ListFilter
}
"""
✨ Generated first-row input type for table 'NFT'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFT_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFT_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFT_Filter
}
"""
✨ Generated key input type for table 'NFT'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFT_Key {
  """
  ✨ Generated from Field `NFT`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `NFT`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFT'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFT_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFT_Filter
}
"""
✨ Generated order input type for table 'NFT'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFT_Order {
  """
  ✨ Generated from Field `NFT`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `NFT`.`creatorId` of type `UUID!`
  """
  creatorId: OrderDirection
  """
  ✨ Generated from Field `NFT`.`creator` of type `User!`
  """
  creator: User_Order
  """
  ✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `NFT`.`description` of type `String`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `NFT`.`fileUrl` of type `String!`
  """
  fileUrl: OrderDirection
  """
  ✨ Generated from Field `NFT`.`geolocation` of type `String`
  """
  geolocation: OrderDirection
  """
  ✨ Generated from Field `NFT`.`price` of type `Float!`
  """
  price: OrderDirection
  """
  ✨ Generated from Field `NFT`.`smartContractAddress` of type `String`
  """
  smartContractAddress: OrderDirection
  """
  ✨ Generated from Field `NFT`.`title` of type `String!`
  """
  title: OrderDirection
}
"""
✨ Generated data input type for table 'NFTCategory'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTCategory_Data {
  """
  ✨ Generated from Field `NFTCategory`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTCategory`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTCategory`.`categoryId` of type `UUID!`
  """
  categoryId: UUID
  """
  ✨ `_expr` server value variant of `categoryId` (✨ Generated from Field `NFTCategory`.`categoryId` of type `UUID!`)
  """
  categoryId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTCategory`.`category` of type `Category!`
  """
  category: Category_Key
  """
  ✨ Generated from Field `NFTCategory`.`nft` of type `NFT!`
  """
  nft: NFT_Key
}
"""
✨ Generated filter input type for table 'NFTCategory'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTCategory_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTCategory_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTCategory_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTCategory_Filter!]
  """
  ✨ Generated from Field `NFTCategory`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTCategory`.`categoryId` of type `UUID!`
  """
  categoryId: UUID_Filter
  """
  ✨ Generated from Field `NFTCategory`.`category` of type `Category!`
  """
  category: Category_Filter
  """
  ✨ Generated from Field `NFTCategory`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
}
"""
✨ Generated first-row input type for table 'NFTCategory'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTCategory_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTCategory_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTCategory_Filter
}
"""
✨ Generated key input type for table 'NFTCategory'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTCategory_Key {
  """
  ✨ Generated from Field `NFTCategory`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTCategory`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTCategory`.`categoryId` of type `UUID!`
  """
  categoryId: UUID
  """
  ✨ `_expr` server value variant of `categoryId` (✨ Generated from Field `NFTCategory`.`categoryId` of type `UUID!`)
  """
  categoryId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTCategory'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTCategory_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTCategory_Filter
}
"""
✨ Generated order input type for table 'NFTCategory'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTCategory_Order {
  """
  ✨ Generated from Field `NFTCategory`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTCategory`.`categoryId` of type `UUID!`
  """
  categoryId: OrderDirection
  """
  ✨ Generated from Field `NFTCategory`.`category` of type `Category!`
  """
  category: Category_Order
  """
  ✨ Generated from Field `NFTCategory`.`nft` of type `NFT!`
  """
  nft: NFT_Order
}
"""
✨ Generated data input type for table 'NFTLanguage'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTLanguage_Data {
  """
  ✨ Generated from Field `NFTLanguage`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTLanguage`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTLanguage`.`languageId` of type `UUID!`
  """
  languageId: UUID
  """
  ✨ `_expr` server value variant of `languageId` (✨ Generated from Field `NFTLanguage`.`languageId` of type `UUID!`)
  """
  languageId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTLanguage`.`language` of type `Language!`
  """
  language: Language_Key
  """
  ✨ Generated from Field `NFTLanguage`.`nft` of type `NFT!`
  """
  nft: NFT_Key
}
"""
✨ Generated filter input type for table 'NFTLanguage'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTLanguage_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTLanguage_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTLanguage_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTLanguage_Filter!]
  """
  ✨ Generated from Field `NFTLanguage`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTLanguage`.`languageId` of type `UUID!`
  """
  languageId: UUID_Filter
  """
  ✨ Generated from Field `NFTLanguage`.`language` of type `Language!`
  """
  language: Language_Filter
  """
  ✨ Generated from Field `NFTLanguage`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
}
"""
✨ Generated first-row input type for table 'NFTLanguage'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTLanguage_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTLanguage_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTLanguage_Filter
}
"""
✨ Generated key input type for table 'NFTLanguage'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTLanguage_Key {
  """
  ✨ Generated from Field `NFTLanguage`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTLanguage`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTLanguage`.`languageId` of type `UUID!`
  """
  languageId: UUID
  """
  ✨ `_expr` server value variant of `languageId` (✨ Generated from Field `NFTLanguage`.`languageId` of type `UUID!`)
  """
  languageId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTLanguage'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTLanguage_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTLanguage_Filter
}
"""
✨ Generated order input type for table 'NFTLanguage'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTLanguage_Order {
  """
  ✨ Generated from Field `NFTLanguage`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTLanguage`.`languageId` of type `UUID!`
  """
  languageId: OrderDirection
  """
  ✨ Generated from Field `NFTLanguage`.`language` of type `Language!`
  """
  language: Language_Order
  """
  ✨ Generated from Field `NFTLanguage`.`nft` of type `NFT!`
  """
  nft: NFT_Order
}
"""
✨ Generated data input type for table 'NFTProductionQuality'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTProductionQuality_Data {
  """
  ✨ Generated from Field `NFTProductionQuality`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTProductionQuality`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: UUID
  """
  ✨ `_expr` server value variant of `productionQualityId` (✨ Generated from Field `NFTProductionQuality`.`productionQualityId` of type `UUID!`)
  """
  productionQualityId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTProductionQuality`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `NFTProductionQuality`.`productionQuality` of type `ProductionQuality!`
  """
  productionQuality: ProductionQuality_Key
}
"""
✨ Generated filter input type for table 'NFTProductionQuality'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTProductionQuality_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTProductionQuality_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTProductionQuality_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTProductionQuality_Filter!]
  """
  ✨ Generated from Field `NFTProductionQuality`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: UUID_Filter
  """
  ✨ Generated from Field `NFTProductionQuality`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `NFTProductionQuality`.`productionQuality` of type `ProductionQuality!`
  """
  productionQuality: ProductionQuality_Filter
}
"""
✨ Generated first-row input type for table 'NFTProductionQuality'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTProductionQuality_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTProductionQuality_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTProductionQuality_Filter
}
"""
✨ Generated key input type for table 'NFTProductionQuality'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTProductionQuality_Key {
  """
  ✨ Generated from Field `NFTProductionQuality`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTProductionQuality`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: UUID
  """
  ✨ `_expr` server value variant of `productionQualityId` (✨ Generated from Field `NFTProductionQuality`.`productionQualityId` of type `UUID!`)
  """
  productionQualityId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTProductionQuality'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTProductionQuality_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTProductionQuality_Filter
}
"""
✨ Generated order input type for table 'NFTProductionQuality'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTProductionQuality_Order {
  """
  ✨ Generated from Field `NFTProductionQuality`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: OrderDirection
  """
  ✨ Generated from Field `NFTProductionQuality`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `NFTProductionQuality`.`productionQuality` of type `ProductionQuality!`
  """
  productionQuality: ProductionQuality_Order
}
"""
✨ Generated data input type for table 'NFTRegionalDialect'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTRegionalDialect_Data {
  """
  ✨ Generated from Field `NFTRegionalDialect`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTRegionalDialect`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: UUID
  """
  ✨ `_expr` server value variant of `regionalDialectId` (✨ Generated from Field `NFTRegionalDialect`.`regionalDialectId` of type `UUID!`)
  """
  regionalDialectId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTRegionalDialect`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `NFTRegionalDialect`.`regionalDialect` of type `RegionalDialect!`
  """
  regionalDialect: RegionalDialect_Key
}
"""
✨ Generated filter input type for table 'NFTRegionalDialect'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTRegionalDialect_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTRegionalDialect_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTRegionalDialect_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTRegionalDialect_Filter!]
  """
  ✨ Generated from Field `NFTRegionalDialect`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: UUID_Filter
  """
  ✨ Generated from Field `NFTRegionalDialect`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `NFTRegionalDialect`.`regionalDialect` of type `RegionalDialect!`
  """
  regionalDialect: RegionalDialect_Filter
}
"""
✨ Generated first-row input type for table 'NFTRegionalDialect'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTRegionalDialect_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTRegionalDialect_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTRegionalDialect_Filter
}
"""
✨ Generated key input type for table 'NFTRegionalDialect'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTRegionalDialect_Key {
  """
  ✨ Generated from Field `NFTRegionalDialect`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTRegionalDialect`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: UUID
  """
  ✨ `_expr` server value variant of `regionalDialectId` (✨ Generated from Field `NFTRegionalDialect`.`regionalDialectId` of type `UUID!`)
  """
  regionalDialectId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTRegionalDialect'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTRegionalDialect_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTRegionalDialect_Filter
}
"""
✨ Generated order input type for table 'NFTRegionalDialect'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTRegionalDialect_Order {
  """
  ✨ Generated from Field `NFTRegionalDialect`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: OrderDirection
  """
  ✨ Generated from Field `NFTRegionalDialect`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `NFTRegionalDialect`.`regionalDialect` of type `RegionalDialect!`
  """
  regionalDialect: RegionalDialect_Order
}
"""
✨ Generated data input type for table 'NFTSecondaryLanguage'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTSecondaryLanguage_Data {
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTSecondaryLanguage`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: UUID
  """
  ✨ `_expr` server value variant of `secondaryLanguageId` (✨ Generated from Field `NFTSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`)
  """
  secondaryLanguageId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`secondaryLanguage` of type `SecondaryLanguage!`
  """
  secondaryLanguage: SecondaryLanguage_Key
}
"""
✨ Generated filter input type for table 'NFTSecondaryLanguage'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTSecondaryLanguage_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTSecondaryLanguage_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTSecondaryLanguage_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTSecondaryLanguage_Filter!]
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: UUID_Filter
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`secondaryLanguage` of type `SecondaryLanguage!`
  """
  secondaryLanguage: SecondaryLanguage_Filter
}
"""
✨ Generated first-row input type for table 'NFTSecondaryLanguage'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTSecondaryLanguage_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTSecondaryLanguage_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTSecondaryLanguage_Filter
}
"""
✨ Generated key input type for table 'NFTSecondaryLanguage'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTSecondaryLanguage_Key {
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTSecondaryLanguage`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: UUID
  """
  ✨ `_expr` server value variant of `secondaryLanguageId` (✨ Generated from Field `NFTSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`)
  """
  secondaryLanguageId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTSecondaryLanguage'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTSecondaryLanguage_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTSecondaryLanguage_Filter
}
"""
✨ Generated order input type for table 'NFTSecondaryLanguage'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTSecondaryLanguage_Order {
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: OrderDirection
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `NFTSecondaryLanguage`.`secondaryLanguage` of type `SecondaryLanguage!`
  """
  secondaryLanguage: SecondaryLanguage_Order
}
"""
✨ Generated data input type for table 'NFTStudioAvailability'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTStudioAvailability_Data {
  """
  ✨ Generated from Field `NFTStudioAvailability`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTStudioAvailability`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: UUID
  """
  ✨ `_expr` server value variant of `studioAvailabilityId` (✨ Generated from Field `NFTStudioAvailability`.`studioAvailabilityId` of type `UUID!`)
  """
  studioAvailabilityId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTStudioAvailability`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `NFTStudioAvailability`.`studioAvailability` of type `StudioAvailability!`
  """
  studioAvailability: StudioAvailability_Key
}
"""
✨ Generated filter input type for table 'NFTStudioAvailability'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTStudioAvailability_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTStudioAvailability_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTStudioAvailability_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTStudioAvailability_Filter!]
  """
  ✨ Generated from Field `NFTStudioAvailability`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: UUID_Filter
  """
  ✨ Generated from Field `NFTStudioAvailability`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `NFTStudioAvailability`.`studioAvailability` of type `StudioAvailability!`
  """
  studioAvailability: StudioAvailability_Filter
}
"""
✨ Generated first-row input type for table 'NFTStudioAvailability'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTStudioAvailability_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTStudioAvailability_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTStudioAvailability_Filter
}
"""
✨ Generated key input type for table 'NFTStudioAvailability'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTStudioAvailability_Key {
  """
  ✨ Generated from Field `NFTStudioAvailability`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTStudioAvailability`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: UUID
  """
  ✨ `_expr` server value variant of `studioAvailabilityId` (✨ Generated from Field `NFTStudioAvailability`.`studioAvailabilityId` of type `UUID!`)
  """
  studioAvailabilityId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTStudioAvailability'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTStudioAvailability_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTStudioAvailability_Filter
}
"""
✨ Generated order input type for table 'NFTStudioAvailability'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTStudioAvailability_Order {
  """
  ✨ Generated from Field `NFTStudioAvailability`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: OrderDirection
  """
  ✨ Generated from Field `NFTStudioAvailability`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `NFTStudioAvailability`.`studioAvailability` of type `StudioAvailability!`
  """
  studioAvailability: StudioAvailability_Order
}
"""
✨ Generated data input type for table 'NFTStyleToneOption'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTStyleToneOption_Data {
  """
  ✨ Generated from Field `NFTStyleToneOption`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTStyleToneOption`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: UUID
  """
  ✨ `_expr` server value variant of `styleToneOptionId` (✨ Generated from Field `NFTStyleToneOption`.`styleToneOptionId` of type `UUID!`)
  """
  styleToneOptionId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTStyleToneOption`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `NFTStyleToneOption`.`styleToneOption` of type `StyleToneOption!`
  """
  styleToneOption: StyleToneOption_Key
}
"""
✨ Generated filter input type for table 'NFTStyleToneOption'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTStyleToneOption_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTStyleToneOption_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTStyleToneOption_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTStyleToneOption_Filter!]
  """
  ✨ Generated from Field `NFTStyleToneOption`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: UUID_Filter
  """
  ✨ Generated from Field `NFTStyleToneOption`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `NFTStyleToneOption`.`styleToneOption` of type `StyleToneOption!`
  """
  styleToneOption: StyleToneOption_Filter
}
"""
✨ Generated first-row input type for table 'NFTStyleToneOption'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTStyleToneOption_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTStyleToneOption_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTStyleToneOption_Filter
}
"""
✨ Generated key input type for table 'NFTStyleToneOption'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTStyleToneOption_Key {
  """
  ✨ Generated from Field `NFTStyleToneOption`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTStyleToneOption`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: UUID
  """
  ✨ `_expr` server value variant of `styleToneOptionId` (✨ Generated from Field `NFTStyleToneOption`.`styleToneOptionId` of type `UUID!`)
  """
  styleToneOptionId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTStyleToneOption'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTStyleToneOption_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTStyleToneOption_Filter
}
"""
✨ Generated order input type for table 'NFTStyleToneOption'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTStyleToneOption_Order {
  """
  ✨ Generated from Field `NFTStyleToneOption`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: OrderDirection
  """
  ✨ Generated from Field `NFTStyleToneOption`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `NFTStyleToneOption`.`styleToneOption` of type `StyleToneOption!`
  """
  styleToneOption: StyleToneOption_Order
}
"""
✨ Generated data input type for table 'NFTTechnicalSpecification'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTTechnicalSpecification_Data {
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTTechnicalSpecification`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: UUID
  """
  ✨ `_expr` server value variant of `technicalSpecificationId` (✨ Generated from Field `NFTTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`)
  """
  technicalSpecificationId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`technicalSpecification` of type `TechnicalSpecification!`
  """
  technicalSpecification: TechnicalSpecification_Key
}
"""
✨ Generated filter input type for table 'NFTTechnicalSpecification'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTTechnicalSpecification_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTTechnicalSpecification_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTTechnicalSpecification_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTTechnicalSpecification_Filter!]
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: UUID_Filter
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`technicalSpecification` of type `TechnicalSpecification!`
  """
  technicalSpecification: TechnicalSpecification_Filter
}
"""
✨ Generated first-row input type for table 'NFTTechnicalSpecification'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTTechnicalSpecification_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTTechnicalSpecification_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTTechnicalSpecification_Filter
}
"""
✨ Generated key input type for table 'NFTTechnicalSpecification'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTTechnicalSpecification_Key {
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTTechnicalSpecification`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: UUID
  """
  ✨ `_expr` server value variant of `technicalSpecificationId` (✨ Generated from Field `NFTTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`)
  """
  technicalSpecificationId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTTechnicalSpecification'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTTechnicalSpecification_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTTechnicalSpecification_Filter
}
"""
✨ Generated order input type for table 'NFTTechnicalSpecification'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTTechnicalSpecification_Order {
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: OrderDirection
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `NFTTechnicalSpecification`.`technicalSpecification` of type `TechnicalSpecification!`
  """
  technicalSpecification: TechnicalSpecification_Order
}
"""
✨ Generated data input type for table 'NFTTimeZone'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTTimeZone_Data {
  """
  ✨ Generated from Field `NFTTimeZone`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTTimeZone`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: UUID
  """
  ✨ `_expr` server value variant of `timeZoneId` (✨ Generated from Field `NFTTimeZone`.`timeZoneId` of type `UUID!`)
  """
  timeZoneId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTTimeZone`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `NFTTimeZone`.`timeZone` of type `TimeZone!`
  """
  timeZone: TimeZone_Key
}
"""
✨ Generated filter input type for table 'NFTTimeZone'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTTimeZone_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTTimeZone_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTTimeZone_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTTimeZone_Filter!]
  """
  ✨ Generated from Field `NFTTimeZone`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: UUID_Filter
  """
  ✨ Generated from Field `NFTTimeZone`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `NFTTimeZone`.`timeZone` of type `TimeZone!`
  """
  timeZone: TimeZone_Filter
}
"""
✨ Generated first-row input type for table 'NFTTimeZone'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTTimeZone_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTTimeZone_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTTimeZone_Filter
}
"""
✨ Generated key input type for table 'NFTTimeZone'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTTimeZone_Key {
  """
  ✨ Generated from Field `NFTTimeZone`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTTimeZone`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: UUID
  """
  ✨ `_expr` server value variant of `timeZoneId` (✨ Generated from Field `NFTTimeZone`.`timeZoneId` of type `UUID!`)
  """
  timeZoneId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTTimeZone'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTTimeZone_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTTimeZone_Filter
}
"""
✨ Generated order input type for table 'NFTTimeZone'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTTimeZone_Order {
  """
  ✨ Generated from Field `NFTTimeZone`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: OrderDirection
  """
  ✨ Generated from Field `NFTTimeZone`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `NFTTimeZone`.`timeZone` of type `TimeZone!`
  """
  timeZone: TimeZone_Order
}
"""
✨ Generated data input type for table 'NFTVoiceTrait'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFTVoiceTrait_Data {
  """
  ✨ Generated from Field `NFTVoiceTrait`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTVoiceTrait`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: UUID
  """
  ✨ `_expr` server value variant of `voiceTraitId` (✨ Generated from Field `NFTVoiceTrait`.`voiceTraitId` of type `UUID!`)
  """
  voiceTraitId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTVoiceTrait`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `NFTVoiceTrait`.`voiceTrait` of type `VoiceTrait!`
  """
  voiceTrait: VoiceTrait_Key
}
"""
✨ Generated filter input type for table 'NFTVoiceTrait'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFTVoiceTrait_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFTVoiceTrait_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFTVoiceTrait_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFTVoiceTrait_Filter!]
  """
  ✨ Generated from Field `NFTVoiceTrait`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `NFTVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: UUID_Filter
  """
  ✨ Generated from Field `NFTVoiceTrait`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `NFTVoiceTrait`.`voiceTrait` of type `VoiceTrait!`
  """
  voiceTrait: VoiceTrait_Filter
}
"""
✨ Generated first-row input type for table 'NFTVoiceTrait'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFTVoiceTrait_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFTVoiceTrait_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFTVoiceTrait_Filter
}
"""
✨ Generated key input type for table 'NFTVoiceTrait'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFTVoiceTrait_Key {
  """
  ✨ Generated from Field `NFTVoiceTrait`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `NFTVoiceTrait`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFTVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: UUID
  """
  ✨ `_expr` server value variant of `voiceTraitId` (✨ Generated from Field `NFTVoiceTrait`.`voiceTraitId` of type `UUID!`)
  """
  voiceTraitId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFTVoiceTrait'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFTVoiceTrait_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFTVoiceTrait_Filter
}
"""
✨ Generated order input type for table 'NFTVoiceTrait'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFTVoiceTrait_Order {
  """
  ✨ Generated from Field `NFTVoiceTrait`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `NFTVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: OrderDirection
  """
  ✨ Generated from Field `NFTVoiceTrait`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `NFTVoiceTrait`.`voiceTrait` of type `VoiceTrait!`
  """
  voiceTrait: VoiceTrait_Order
}
"""
✨ Generated data input type for table 'Notification'. It includes all necessary fields for creating or upserting rows into table.
"""
input Notification_Data {
  """
  ✨ Generated from Field `Notification`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Notification`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Notification`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `Notification`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `Notification`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `Notification`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `Notification`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `Notification`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `Notification`.`message` of type `String!`
  """
  message: String
  """
  ✨ `_expr` server value variant of `message` (✨ Generated from Field `Notification`.`message` of type `String!`)
  """
  message_expr: String_Expr
  """
  ✨ Generated from Field `Notification`.`read` of type `Boolean!`
  """
  read: Boolean
  """
  ✨ Generated from Field `Notification`.`type` of type `String!`
  """
  type: String
  """
  ✨ `_expr` server value variant of `type` (✨ Generated from Field `Notification`.`type` of type `String!`)
  """
  type_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Notification'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Notification_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Notification_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Notification_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Notification_Filter!]
  """
  ✨ Generated from Field `Notification`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Notification`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `Notification`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `Notification`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `Notification`.`message` of type `String!`
  """
  message: String_Filter
  """
  ✨ Generated from Field `Notification`.`read` of type `Boolean!`
  """
  read: Boolean_Filter
  """
  ✨ Generated from Field `Notification`.`type` of type `String!`
  """
  type: String_Filter
}
"""
✨ Generated first-row input type for table 'Notification'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Notification_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Notification_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Notification_Filter
}
"""
✨ Generated key input type for table 'Notification'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Notification_Key {
  """
  ✨ Generated from Field `Notification`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Notification`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Notification'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Notification_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Notification_Filter
}
"""
✨ Generated order input type for table 'Notification'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Notification_Order {
  """
  ✨ Generated from Field `Notification`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Notification`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `Notification`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `Notification`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `Notification`.`message` of type `String!`
  """
  message: OrderDirection
  """
  ✨ Generated from Field `Notification`.`read` of type `Boolean!`
  """
  read: OrderDirection
  """
  ✨ Generated from Field `Notification`.`type` of type `String!`
  """
  type: OrderDirection
}
"""
✨ Generated data input type for table 'Ownership'. It includes all necessary fields for creating or upserting rows into table.
"""
input Ownership_Data {
  """
  ✨ Generated from Field `Ownership`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Ownership`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`
  """
  ownerId: UUID
  """
  ✨ `_expr` server value variant of `ownerId` (✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`)
  """
  ownerId_expr: UUID_Expr
  """
  ✨ Generated from Field `Ownership`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `Ownership`.`owner` of type `User!`
  """
  owner: User_Key
  """
  ✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`
  """
  acquiredAt: Timestamp
  """
  ✨ `_expr` server value variant of `acquiredAt` (✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`)
  """
  acquiredAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `acquiredAt` (✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`)
  """
  acquiredAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `Ownership`.`ownershipType` of type `String!`
  """
  ownershipType: String
  """
  ✨ `_expr` server value variant of `ownershipType` (✨ Generated from Field `Ownership`.`ownershipType` of type `String!`)
  """
  ownershipType_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Ownership'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Ownership_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Ownership_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Ownership_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Ownership_Filter!]
  """
  ✨ Generated from Field `Ownership`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`
  """
  ownerId: UUID_Filter
  """
  ✨ Generated from Field `Ownership`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `Ownership`.`owner` of type `User!`
  """
  owner: User_Filter
  """
  ✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`
  """
  acquiredAt: Timestamp_Filter
  """
  ✨ Generated from Field `Ownership`.`ownershipType` of type `String!`
  """
  ownershipType: String_Filter
}
"""
✨ Generated first-row input type for table 'Ownership'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Ownership_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Ownership_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Ownership_Filter
}
"""
✨ Generated key input type for table 'Ownership'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Ownership_Key {
  """
  ✨ Generated from Field `Ownership`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Ownership`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`
  """
  ownerId: UUID
  """
  ✨ `_expr` server value variant of `ownerId` (✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`)
  """
  ownerId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Ownership'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Ownership_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Ownership_Filter
}
"""
✨ Generated order input type for table 'Ownership'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Ownership_Order {
  """
  ✨ Generated from Field `Ownership`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`
  """
  ownerId: OrderDirection
  """
  ✨ Generated from Field `Ownership`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `Ownership`.`owner` of type `User!`
  """
  owner: User_Order
  """
  ✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`
  """
  acquiredAt: OrderDirection
  """
  ✨ Generated from Field `Ownership`.`ownershipType` of type `String!`
  """
  ownershipType: OrderDirection
}
"""
✨ Generated data input type for table 'PaymentMethod'. It includes all necessary fields for creating or upserting rows into table.
"""
input PaymentMethod_Data {
  """
  ✨ Generated from Field `PaymentMethod`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `PaymentMethod`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `PaymentMethod`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `PaymentMethod`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `PaymentMethod`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `PaymentMethod`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `PaymentMethod`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `PaymentMethod`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `PaymentMethod`.`details` of type `String!`
  """
  details: String
  """
  ✨ `_expr` server value variant of `details` (✨ Generated from Field `PaymentMethod`.`details` of type `String!`)
  """
  details_expr: String_Expr
  """
  ✨ Generated from Field `PaymentMethod`.`isDefault` of type `Boolean!`
  """
  isDefault: Boolean
  """
  ✨ Generated from Field `PaymentMethod`.`type` of type `String!`
  """
  type: String
  """
  ✨ `_expr` server value variant of `type` (✨ Generated from Field `PaymentMethod`.`type` of type `String!`)
  """
  type_expr: String_Expr
}
"""
✨ Generated filter input type for table 'PaymentMethod'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input PaymentMethod_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [PaymentMethod_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: PaymentMethod_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [PaymentMethod_Filter!]
  """
  ✨ Generated from Field `PaymentMethod`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `PaymentMethod`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `PaymentMethod`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `PaymentMethod`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `PaymentMethod`.`details` of type `String!`
  """
  details: String_Filter
  """
  ✨ Generated from Field `PaymentMethod`.`isDefault` of type `Boolean!`
  """
  isDefault: Boolean_Filter
  """
  ✨ Generated from Field `PaymentMethod`.`type` of type `String!`
  """
  type: String_Filter
}
"""
✨ Generated first-row input type for table 'PaymentMethod'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input PaymentMethod_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [PaymentMethod_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: PaymentMethod_Filter
}
"""
✨ Generated key input type for table 'PaymentMethod'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input PaymentMethod_Key {
  """
  ✨ Generated from Field `PaymentMethod`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `PaymentMethod`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'PaymentMethod'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input PaymentMethod_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: PaymentMethod_Filter
}
"""
✨ Generated order input type for table 'PaymentMethod'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input PaymentMethod_Order {
  """
  ✨ Generated from Field `PaymentMethod`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `PaymentMethod`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `PaymentMethod`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `PaymentMethod`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `PaymentMethod`.`details` of type `String!`
  """
  details: OrderDirection
  """
  ✨ Generated from Field `PaymentMethod`.`isDefault` of type `Boolean!`
  """
  isDefault: OrderDirection
  """
  ✨ Generated from Field `PaymentMethod`.`type` of type `String!`
  """
  type: OrderDirection
}
"""
✨ Generated data input type for table 'Permission'. It includes all necessary fields for creating or upserting rows into table.
"""
input Permission_Data {
  """
  ✨ Generated from Field `Permission`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Permission`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Permission`.`description` of type `String`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `Permission`.`description` of type `String`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `Permission`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `Permission`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Permission'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Permission_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Permission_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Permission_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Permission_Filter!]
  """
  ✨ Generated from Field `Permission`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Permission`.`description` of type `String`
  """
  description: String_Filter
  """
  ✨ Generated from Field `Permission`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `Permission`.`rolePermissions_on_permission` of type `[RolePermission!]!`
  """
  rolePermissions_on_permission: RolePermission_ListFilter
  """
  ✨ Generated from Field `Permission`.`roles_via_RolePermission` of type `[Role!]!`
  """
  roles_via_RolePermission: Role_ListFilter
}
"""
✨ Generated first-row input type for table 'Permission'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Permission_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Permission_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Permission_Filter
}
"""
✨ Generated key input type for table 'Permission'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Permission_Key {
  """
  ✨ Generated from Field `Permission`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Permission`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Permission'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Permission_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Permission_Filter
}
"""
✨ Generated order input type for table 'Permission'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Permission_Order {
  """
  ✨ Generated from Field `Permission`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Permission`.`description` of type `String`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `Permission`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'ProductionQuality'. It includes all necessary fields for creating or upserting rows into table.
"""
input ProductionQuality_Data {
  """
  ✨ Generated from Field `ProductionQuality`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `ProductionQuality`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `ProductionQuality`.`description` of type `[String]`
  """
  description: [String!]
  """
  ✨ Generated from Field `ProductionQuality`.`qualityType` of type `String!`
  """
  qualityType: String
  """
  ✨ `_expr` server value variant of `qualityType` (✨ Generated from Field `ProductionQuality`.`qualityType` of type `String!`)
  """
  qualityType_expr: String_Expr
}
"""
✨ Generated filter input type for table 'ProductionQuality'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input ProductionQuality_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [ProductionQuality_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: ProductionQuality_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [ProductionQuality_Filter!]
  """
  ✨ Generated from Field `ProductionQuality`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `ProductionQuality`.`description` of type `[String]`
  """
  description: String_ListFilter
  """
  ✨ Generated from Field `ProductionQuality`.`qualityType` of type `String!`
  """
  qualityType: String_Filter
  """
  ✨ Generated from Field `ProductionQuality`.`nFTProductionQualities_on_productionQuality` of type `[NFTProductionQuality!]!`
  """
  nFTProductionQualities_on_productionQuality: NFTProductionQuality_ListFilter
  """
  ✨ Generated from Field `ProductionQuality`.`userProductionQualities_on_productionQuality` of type `[UserProductionQuality!]!`
  """
  userProductionQualities_on_productionQuality: UserProductionQuality_ListFilter
  """
  ✨ Generated from Field `ProductionQuality`.`voiceProductionQualities_on_productionQuality` of type `[VoiceProductionQuality!]!`
  """
  voiceProductionQualities_on_productionQuality: VoiceProductionQuality_ListFilter
  """
  ✨ Generated from Field `ProductionQuality`.`nfts_via_NFTProductionQuality` of type `[NFT!]!`
  """
  nfts_via_NFTProductionQuality: NFT_ListFilter
  """
  ✨ Generated from Field `ProductionQuality`.`users_via_UserProductionQuality` of type `[User!]!`
  """
  users_via_UserProductionQuality: User_ListFilter
  """
  ✨ Generated from Field `ProductionQuality`.`voices_via_VoiceProductionQuality` of type `[Voice!]!`
  """
  voices_via_VoiceProductionQuality: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'ProductionQuality'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input ProductionQuality_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [ProductionQuality_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: ProductionQuality_Filter
}
"""
✨ Generated key input type for table 'ProductionQuality'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input ProductionQuality_Key {
  """
  ✨ Generated from Field `ProductionQuality`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `ProductionQuality`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'ProductionQuality'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input ProductionQuality_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: ProductionQuality_Filter
}
"""
✨ Generated order input type for table 'ProductionQuality'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input ProductionQuality_Order {
  """
  ✨ Generated from Field `ProductionQuality`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `ProductionQuality`.`qualityType` of type `String!`
  """
  qualityType: OrderDirection
}
"""
✨ Generated data input type for table 'RegionalDialect'. It includes all necessary fields for creating or upserting rows into table.
"""
input RegionalDialect_Data {
  """
  ✨ Generated from Field `RegionalDialect`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `RegionalDialect`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `RegionalDialect`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `RegionalDialect`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'RegionalDialect'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input RegionalDialect_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [RegionalDialect_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: RegionalDialect_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [RegionalDialect_Filter!]
  """
  ✨ Generated from Field `RegionalDialect`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `RegionalDialect`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `RegionalDialect`.`nFTRegionalDialects_on_regionalDialect` of type `[NFTRegionalDialect!]!`
  """
  nFTRegionalDialects_on_regionalDialect: NFTRegionalDialect_ListFilter
  """
  ✨ Generated from Field `RegionalDialect`.`userRegionalDialects_on_regionalDialect` of type `[UserRegionalDialect!]!`
  """
  userRegionalDialects_on_regionalDialect: UserRegionalDialect_ListFilter
  """
  ✨ Generated from Field `RegionalDialect`.`voiceRegionalDialects_on_regionalDialect` of type `[VoiceRegionalDialect!]!`
  """
  voiceRegionalDialects_on_regionalDialect: VoiceRegionalDialect_ListFilter
  """
  ✨ Generated from Field `RegionalDialect`.`nfts_via_NFTRegionalDialect` of type `[NFT!]!`
  """
  nfts_via_NFTRegionalDialect: NFT_ListFilter
  """
  ✨ Generated from Field `RegionalDialect`.`users_via_UserRegionalDialect` of type `[User!]!`
  """
  users_via_UserRegionalDialect: User_ListFilter
  """
  ✨ Generated from Field `RegionalDialect`.`voices_via_VoiceRegionalDialect` of type `[Voice!]!`
  """
  voices_via_VoiceRegionalDialect: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'RegionalDialect'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input RegionalDialect_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [RegionalDialect_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: RegionalDialect_Filter
}
"""
✨ Generated key input type for table 'RegionalDialect'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input RegionalDialect_Key {
  """
  ✨ Generated from Field `RegionalDialect`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `RegionalDialect`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'RegionalDialect'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input RegionalDialect_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: RegionalDialect_Filter
}
"""
✨ Generated order input type for table 'RegionalDialect'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input RegionalDialect_Order {
  """
  ✨ Generated from Field `RegionalDialect`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `RegionalDialect`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'Review'. It includes all necessary fields for creating or upserting rows into table.
"""
input Review_Data {
  """
  ✨ Generated from Field `Review`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Review`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Review`.`creatorId` of type `UUID`
  """
  creatorId: UUID
  """
  ✨ `_expr` server value variant of `creatorId` (✨ Generated from Field `Review`.`creatorId` of type `UUID`)
  """
  creatorId_expr: UUID_Expr
  """
  ✨ Generated from Field `Review`.`nftId` of type `UUID`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Review`.`nftId` of type `UUID`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Review`.`reviewerId` of type `UUID!`
  """
  reviewerId: UUID
  """
  ✨ `_expr` server value variant of `reviewerId` (✨ Generated from Field `Review`.`reviewerId` of type `UUID!`)
  """
  reviewerId_expr: UUID_Expr
  """
  ✨ Generated from Field `Review`.`creator` of type `User`
  """
  creator: User_Key
  """
  ✨ Generated from Field `Review`.`nft` of type `NFT`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `Review`.`reviewer` of type `User!`
  """
  reviewer: User_Key
  """
  ✨ Generated from Field `Review`.`comment` of type `String`
  """
  comment: String
  """
  ✨ `_expr` server value variant of `comment` (✨ Generated from Field `Review`.`comment` of type `String`)
  """
  comment_expr: String_Expr
  """
  ✨ Generated from Field `Review`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `Review`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `Review`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `Review`.`rating` of type `Int!`
  """
  rating: Int
}
"""
✨ Generated filter input type for table 'Review'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Review_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Review_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Review_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Review_Filter!]
  """
  ✨ Generated from Field `Review`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Review`.`creatorId` of type `UUID`
  """
  creatorId: UUID_Filter
  """
  ✨ Generated from Field `Review`.`nftId` of type `UUID`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `Review`.`reviewerId` of type `UUID!`
  """
  reviewerId: UUID_Filter
  """
  ✨ Generated from Field `Review`.`creator` of type `User`
  """
  creator: User_Filter
  """
  ✨ Generated from Field `Review`.`nft` of type `NFT`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `Review`.`reviewer` of type `User!`
  """
  reviewer: User_Filter
  """
  ✨ Generated from Field `Review`.`comment` of type `String`
  """
  comment: String_Filter
  """
  ✨ Generated from Field `Review`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `Review`.`rating` of type `Int!`
  """
  rating: Int_Filter
}
"""
✨ Generated first-row input type for table 'Review'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Review_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Review_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Review_Filter
}
"""
✨ Generated key input type for table 'Review'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Review_Key {
  """
  ✨ Generated from Field `Review`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Review`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Review'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Review_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Review_Filter
}
"""
✨ Generated order input type for table 'Review'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Review_Order {
  """
  ✨ Generated from Field `Review`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Review`.`creatorId` of type `UUID`
  """
  creatorId: OrderDirection
  """
  ✨ Generated from Field `Review`.`nftId` of type `UUID`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `Review`.`reviewerId` of type `UUID!`
  """
  reviewerId: OrderDirection
  """
  ✨ Generated from Field `Review`.`creator` of type `User`
  """
  creator: User_Order
  """
  ✨ Generated from Field `Review`.`nft` of type `NFT`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `Review`.`reviewer` of type `User!`
  """
  reviewer: User_Order
  """
  ✨ Generated from Field `Review`.`comment` of type `String`
  """
  comment: OrderDirection
  """
  ✨ Generated from Field `Review`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `Review`.`rating` of type `Int!`
  """
  rating: OrderDirection
}
"""
✨ Generated data input type for table 'Role'. It includes all necessary fields for creating or upserting rows into table.
"""
input Role_Data {
  """
  ✨ Generated from Field `Role`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Role`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Role`.`description` of type `String`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `Role`.`description` of type `String`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `Role`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `Role`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Role'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Role_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Role_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Role_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Role_Filter!]
  """
  ✨ Generated from Field `Role`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Role`.`description` of type `String`
  """
  description: String_Filter
  """
  ✨ Generated from Field `Role`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `Role`.`rolePermissions_on_role` of type `[RolePermission!]!`
  """
  rolePermissions_on_role: RolePermission_ListFilter
  """
  ✨ Generated from Field `Role`.`userRoles_on_role` of type `[UserRole!]!`
  """
  userRoles_on_role: UserRole_ListFilter
  """
  ✨ Generated from Field `Role`.`permissions_via_RolePermission` of type `[Permission!]!`
  """
  permissions_via_RolePermission: Permission_ListFilter
  """
  ✨ Generated from Field `Role`.`users_via_UserRole` of type `[User!]!`
  """
  users_via_UserRole: User_ListFilter
}
"""
✨ Generated first-row input type for table 'Role'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Role_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Role_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Role_Filter
}
"""
✨ Generated key input type for table 'Role'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Role_Key {
  """
  ✨ Generated from Field `Role`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Role`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Role'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Role_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Role_Filter
}
"""
✨ Generated order input type for table 'Role'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Role_Order {
  """
  ✨ Generated from Field `Role`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Role`.`description` of type `String`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `Role`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'RolePermission'. It includes all necessary fields for creating or upserting rows into table.
"""
input RolePermission_Data {
  """
  ✨ Generated from Field `RolePermission`.`roleId` of type `UUID!`
  """
  roleId: UUID
  """
  ✨ `_expr` server value variant of `roleId` (✨ Generated from Field `RolePermission`.`roleId` of type `UUID!`)
  """
  roleId_expr: UUID_Expr
  """
  ✨ Generated from Field `RolePermission`.`permissionId` of type `UUID!`
  """
  permissionId: UUID
  """
  ✨ `_expr` server value variant of `permissionId` (✨ Generated from Field `RolePermission`.`permissionId` of type `UUID!`)
  """
  permissionId_expr: UUID_Expr
  """
  ✨ Generated from Field `RolePermission`.`permission` of type `Permission!`
  """
  permission: Permission_Key
  """
  ✨ Generated from Field `RolePermission`.`role` of type `Role!`
  """
  role: Role_Key
}
"""
✨ Generated filter input type for table 'RolePermission'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input RolePermission_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [RolePermission_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: RolePermission_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [RolePermission_Filter!]
  """
  ✨ Generated from Field `RolePermission`.`roleId` of type `UUID!`
  """
  roleId: UUID_Filter
  """
  ✨ Generated from Field `RolePermission`.`permissionId` of type `UUID!`
  """
  permissionId: UUID_Filter
  """
  ✨ Generated from Field `RolePermission`.`permission` of type `Permission!`
  """
  permission: Permission_Filter
  """
  ✨ Generated from Field `RolePermission`.`role` of type `Role!`
  """
  role: Role_Filter
}
"""
✨ Generated first-row input type for table 'RolePermission'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input RolePermission_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [RolePermission_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: RolePermission_Filter
}
"""
✨ Generated key input type for table 'RolePermission'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input RolePermission_Key {
  """
  ✨ Generated from Field `RolePermission`.`roleId` of type `UUID!`
  """
  roleId: UUID
  """
  ✨ `_expr` server value variant of `roleId` (✨ Generated from Field `RolePermission`.`roleId` of type `UUID!`)
  """
  roleId_expr: UUID_Expr
  """
  ✨ Generated from Field `RolePermission`.`permissionId` of type `UUID!`
  """
  permissionId: UUID
  """
  ✨ `_expr` server value variant of `permissionId` (✨ Generated from Field `RolePermission`.`permissionId` of type `UUID!`)
  """
  permissionId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'RolePermission'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input RolePermission_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: RolePermission_Filter
}
"""
✨ Generated order input type for table 'RolePermission'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input RolePermission_Order {
  """
  ✨ Generated from Field `RolePermission`.`roleId` of type `UUID!`
  """
  roleId: OrderDirection
  """
  ✨ Generated from Field `RolePermission`.`permissionId` of type `UUID!`
  """
  permissionId: OrderDirection
  """
  ✨ Generated from Field `RolePermission`.`permission` of type `Permission!`
  """
  permission: Permission_Order
  """
  ✨ Generated from Field `RolePermission`.`role` of type `Role!`
  """
  role: Role_Order
}
"""
✨ Generated data input type for table 'Royalty'. It includes all necessary fields for creating or upserting rows into table.
"""
input Royalty_Data {
  """
  ✨ Generated from Field `Royalty`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Royalty`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Royalty`.`creatorId` of type `UUID!`
  """
  creatorId: UUID
  """
  ✨ `_expr` server value variant of `creatorId` (✨ Generated from Field `Royalty`.`creatorId` of type `UUID!`)
  """
  creatorId_expr: UUID_Expr
  """
  ✨ Generated from Field `Royalty`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Royalty`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Royalty`.`creator` of type `User!`
  """
  creator: User_Key
  """
  ✨ Generated from Field `Royalty`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `Royalty`.`percentage` of type `Float!`
  """
  percentage: Float
}
"""
✨ Generated filter input type for table 'Royalty'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Royalty_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Royalty_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Royalty_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Royalty_Filter!]
  """
  ✨ Generated from Field `Royalty`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Royalty`.`creatorId` of type `UUID!`
  """
  creatorId: UUID_Filter
  """
  ✨ Generated from Field `Royalty`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `Royalty`.`creator` of type `User!`
  """
  creator: User_Filter
  """
  ✨ Generated from Field `Royalty`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `Royalty`.`percentage` of type `Float!`
  """
  percentage: Float_Filter
}
"""
✨ Generated first-row input type for table 'Royalty'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Royalty_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Royalty_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Royalty_Filter
}
"""
✨ Generated key input type for table 'Royalty'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Royalty_Key {
  """
  ✨ Generated from Field `Royalty`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Royalty`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Royalty'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Royalty_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Royalty_Filter
}
"""
✨ Generated order input type for table 'Royalty'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Royalty_Order {
  """
  ✨ Generated from Field `Royalty`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Royalty`.`creatorId` of type `UUID!`
  """
  creatorId: OrderDirection
  """
  ✨ Generated from Field `Royalty`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `Royalty`.`creator` of type `User!`
  """
  creator: User_Order
  """
  ✨ Generated from Field `Royalty`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `Royalty`.`percentage` of type `Float!`
  """
  percentage: OrderDirection
}
"""
✨ Generated data input type for table 'SecondaryLanguage'. It includes all necessary fields for creating or upserting rows into table.
"""
input SecondaryLanguage_Data {
  """
  ✨ Generated from Field `SecondaryLanguage`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `SecondaryLanguage`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `SecondaryLanguage`.`proficiency` of type `String!`
  """
  proficiency: String
  """
  ✨ `_expr` server value variant of `proficiency` (✨ Generated from Field `SecondaryLanguage`.`proficiency` of type `String!`)
  """
  proficiency_expr: String_Expr
}
"""
✨ Generated filter input type for table 'SecondaryLanguage'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input SecondaryLanguage_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [SecondaryLanguage_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: SecondaryLanguage_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [SecondaryLanguage_Filter!]
  """
  ✨ Generated from Field `SecondaryLanguage`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `SecondaryLanguage`.`proficiency` of type `String!`
  """
  proficiency: String_Filter
  """
  ✨ Generated from Field `SecondaryLanguage`.`nFTSecondaryLanguages_on_secondaryLanguage` of type `[NFTSecondaryLanguage!]!`
  """
  nFTSecondaryLanguages_on_secondaryLanguage: NFTSecondaryLanguage_ListFilter
  """
  ✨ Generated from Field `SecondaryLanguage`.`userSecondaryLanguages_on_secondaryLanguage` of type `[UserSecondaryLanguage!]!`
  """
  userSecondaryLanguages_on_secondaryLanguage: UserSecondaryLanguage_ListFilter
  """
  ✨ Generated from Field `SecondaryLanguage`.`voiceSecondaryLanguages_on_secondaryLanguage` of type `[VoiceSecondaryLanguage!]!`
  """
  voiceSecondaryLanguages_on_secondaryLanguage: VoiceSecondaryLanguage_ListFilter
  """
  ✨ Generated from Field `SecondaryLanguage`.`nfts_via_NFTSecondaryLanguage` of type `[NFT!]!`
  """
  nfts_via_NFTSecondaryLanguage: NFT_ListFilter
  """
  ✨ Generated from Field `SecondaryLanguage`.`users_via_UserSecondaryLanguage` of type `[User!]!`
  """
  users_via_UserSecondaryLanguage: User_ListFilter
  """
  ✨ Generated from Field `SecondaryLanguage`.`voices_via_VoiceSecondaryLanguage` of type `[Voice!]!`
  """
  voices_via_VoiceSecondaryLanguage: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'SecondaryLanguage'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input SecondaryLanguage_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [SecondaryLanguage_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: SecondaryLanguage_Filter
}
"""
✨ Generated key input type for table 'SecondaryLanguage'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input SecondaryLanguage_Key {
  """
  ✨ Generated from Field `SecondaryLanguage`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `SecondaryLanguage`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'SecondaryLanguage'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input SecondaryLanguage_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: SecondaryLanguage_Filter
}
"""
✨ Generated order input type for table 'SecondaryLanguage'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input SecondaryLanguage_Order {
  """
  ✨ Generated from Field `SecondaryLanguage`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `SecondaryLanguage`.`proficiency` of type `String!`
  """
  proficiency: OrderDirection
}
"""
✨ Generated data input type for table 'StudioAvailability'. It includes all necessary fields for creating or upserting rows into table.
"""
input StudioAvailability_Data {
  """
  ✨ Generated from Field `StudioAvailability`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `StudioAvailability`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `StudioAvailability`.`availability` of type `String!`
  """
  availability: String
  """
  ✨ `_expr` server value variant of `availability` (✨ Generated from Field `StudioAvailability`.`availability` of type `String!`)
  """
  availability_expr: String_Expr
}
"""
✨ Generated filter input type for table 'StudioAvailability'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input StudioAvailability_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [StudioAvailability_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: StudioAvailability_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [StudioAvailability_Filter!]
  """
  ✨ Generated from Field `StudioAvailability`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `StudioAvailability`.`availability` of type `String!`
  """
  availability: String_Filter
  """
  ✨ Generated from Field `StudioAvailability`.`nFTStudioAvailabilities_on_studioAvailability` of type `[NFTStudioAvailability!]!`
  """
  nFTStudioAvailabilities_on_studioAvailability: NFTStudioAvailability_ListFilter
  """
  ✨ Generated from Field `StudioAvailability`.`userStudioAvailabilities_on_studioAvailability` of type `[UserStudioAvailability!]!`
  """
  userStudioAvailabilities_on_studioAvailability: UserStudioAvailability_ListFilter
  """
  ✨ Generated from Field `StudioAvailability`.`voiceStudioAvailabilities_on_studioAvailability` of type `[VoiceStudioAvailability!]!`
  """
  voiceStudioAvailabilities_on_studioAvailability: VoiceStudioAvailability_ListFilter
  """
  ✨ Generated from Field `StudioAvailability`.`nfts_via_NFTStudioAvailability` of type `[NFT!]!`
  """
  nfts_via_NFTStudioAvailability: NFT_ListFilter
  """
  ✨ Generated from Field `StudioAvailability`.`users_via_UserStudioAvailability` of type `[User!]!`
  """
  users_via_UserStudioAvailability: User_ListFilter
  """
  ✨ Generated from Field `StudioAvailability`.`voices_via_VoiceStudioAvailability` of type `[Voice!]!`
  """
  voices_via_VoiceStudioAvailability: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'StudioAvailability'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input StudioAvailability_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [StudioAvailability_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: StudioAvailability_Filter
}
"""
✨ Generated key input type for table 'StudioAvailability'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input StudioAvailability_Key {
  """
  ✨ Generated from Field `StudioAvailability`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `StudioAvailability`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'StudioAvailability'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input StudioAvailability_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: StudioAvailability_Filter
}
"""
✨ Generated order input type for table 'StudioAvailability'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input StudioAvailability_Order {
  """
  ✨ Generated from Field `StudioAvailability`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `StudioAvailability`.`availability` of type `String!`
  """
  availability: OrderDirection
}
"""
✨ Generated data input type for table 'StyleToneCategory'. It includes all necessary fields for creating or upserting rows into table.
"""
input StyleToneCategory_Data {
  """
  ✨ Generated from Field `StyleToneCategory`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `StyleToneCategory`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `StyleToneCategory`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `StyleToneCategory`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'StyleToneCategory'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input StyleToneCategory_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [StyleToneCategory_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: StyleToneCategory_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [StyleToneCategory_Filter!]
  """
  ✨ Generated from Field `StyleToneCategory`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `StyleToneCategory`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `StyleToneCategory`.`styleToneOptions_on_category` of type `[StyleToneOption!]!`
  """
  styleToneOptions_on_category: StyleToneOption_ListFilter
}
"""
✨ Generated first-row input type for table 'StyleToneCategory'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input StyleToneCategory_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [StyleToneCategory_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: StyleToneCategory_Filter
}
"""
✨ Generated key input type for table 'StyleToneCategory'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input StyleToneCategory_Key {
  """
  ✨ Generated from Field `StyleToneCategory`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `StyleToneCategory`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'StyleToneCategory'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input StyleToneCategory_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: StyleToneCategory_Filter
}
"""
✨ Generated order input type for table 'StyleToneCategory'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input StyleToneCategory_Order {
  """
  ✨ Generated from Field `StyleToneCategory`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `StyleToneCategory`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'StyleToneOption'. It includes all necessary fields for creating or upserting rows into table.
"""
input StyleToneOption_Data {
  """
  ✨ Generated from Field `StyleToneOption`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `StyleToneOption`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `StyleToneOption`.`categoryId` of type `UUID!`
  """
  categoryId: UUID
  """
  ✨ `_expr` server value variant of `categoryId` (✨ Generated from Field `StyleToneOption`.`categoryId` of type `UUID!`)
  """
  categoryId_expr: UUID_Expr
  """
  ✨ Generated from Field `StyleToneOption`.`category` of type `StyleToneCategory!`
  """
  category: StyleToneCategory_Key
  """
  ✨ Generated from Field `StyleToneOption`.`option` of type `String!`
  """
  option: String
  """
  ✨ `_expr` server value variant of `option` (✨ Generated from Field `StyleToneOption`.`option` of type `String!`)
  """
  option_expr: String_Expr
}
"""
✨ Generated filter input type for table 'StyleToneOption'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input StyleToneOption_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [StyleToneOption_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: StyleToneOption_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [StyleToneOption_Filter!]
  """
  ✨ Generated from Field `StyleToneOption`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `StyleToneOption`.`categoryId` of type `UUID!`
  """
  categoryId: UUID_Filter
  """
  ✨ Generated from Field `StyleToneOption`.`category` of type `StyleToneCategory!`
  """
  category: StyleToneCategory_Filter
  """
  ✨ Generated from Field `StyleToneOption`.`option` of type `String!`
  """
  option: String_Filter
  """
  ✨ Generated from Field `StyleToneOption`.`nFTStyleToneOptions_on_styleToneOption` of type `[NFTStyleToneOption!]!`
  """
  nFTStyleToneOptions_on_styleToneOption: NFTStyleToneOption_ListFilter
  """
  ✨ Generated from Field `StyleToneOption`.`userStyleToneOptions_on_styleToneOption` of type `[UserStyleToneOption!]!`
  """
  userStyleToneOptions_on_styleToneOption: UserStyleToneOption_ListFilter
  """
  ✨ Generated from Field `StyleToneOption`.`voiceStyleToneOptions_on_styleToneOption` of type `[VoiceStyleToneOption!]!`
  """
  voiceStyleToneOptions_on_styleToneOption: VoiceStyleToneOption_ListFilter
  """
  ✨ Generated from Field `StyleToneOption`.`nfts_via_NFTStyleToneOption` of type `[NFT!]!`
  """
  nfts_via_NFTStyleToneOption: NFT_ListFilter
  """
  ✨ Generated from Field `StyleToneOption`.`users_via_UserStyleToneOption` of type `[User!]!`
  """
  users_via_UserStyleToneOption: User_ListFilter
  """
  ✨ Generated from Field `StyleToneOption`.`voices_via_VoiceStyleToneOption` of type `[Voice!]!`
  """
  voices_via_VoiceStyleToneOption: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'StyleToneOption'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input StyleToneOption_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [StyleToneOption_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: StyleToneOption_Filter
}
"""
✨ Generated key input type for table 'StyleToneOption'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input StyleToneOption_Key {
  """
  ✨ Generated from Field `StyleToneOption`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `StyleToneOption`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'StyleToneOption'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input StyleToneOption_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: StyleToneOption_Filter
}
"""
✨ Generated order input type for table 'StyleToneOption'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input StyleToneOption_Order {
  """
  ✨ Generated from Field `StyleToneOption`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `StyleToneOption`.`categoryId` of type `UUID!`
  """
  categoryId: OrderDirection
  """
  ✨ Generated from Field `StyleToneOption`.`category` of type `StyleToneCategory!`
  """
  category: StyleToneCategory_Order
  """
  ✨ Generated from Field `StyleToneOption`.`option` of type `String!`
  """
  option: OrderDirection
}
"""
✨ Generated data input type for table 'SupportTicket'. It includes all necessary fields for creating or upserting rows into table.
"""
input SupportTicket_Data {
  """
  ✨ Generated from Field `SupportTicket`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `SupportTicket`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `SupportTicket`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `SupportTicket`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `SupportTicket`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `SupportTicket`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `SupportTicket`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `SupportTicket`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `SupportTicket`.`description` of type `String!`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `SupportTicket`.`description` of type `String!`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `SupportTicket`.`status` of type `String!`
  """
  status: String
  """
  ✨ `_expr` server value variant of `status` (✨ Generated from Field `SupportTicket`.`status` of type `String!`)
  """
  status_expr: String_Expr
  """
  ✨ Generated from Field `SupportTicket`.`subject` of type `String!`
  """
  subject: String
  """
  ✨ `_expr` server value variant of `subject` (✨ Generated from Field `SupportTicket`.`subject` of type `String!`)
  """
  subject_expr: String_Expr
  """
  ✨ Generated from Field `SupportTicket`.`updatedAt` of type `Timestamp`
  """
  updatedAt: Timestamp
  """
  ✨ `_expr` server value variant of `updatedAt` (✨ Generated from Field `SupportTicket`.`updatedAt` of type `Timestamp`)
  """
  updatedAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `updatedAt` (✨ Generated from Field `SupportTicket`.`updatedAt` of type `Timestamp`)
  """
  updatedAt_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'SupportTicket'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input SupportTicket_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [SupportTicket_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: SupportTicket_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [SupportTicket_Filter!]
  """
  ✨ Generated from Field `SupportTicket`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `SupportTicket`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `SupportTicket`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `SupportTicket`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `SupportTicket`.`description` of type `String!`
  """
  description: String_Filter
  """
  ✨ Generated from Field `SupportTicket`.`status` of type `String!`
  """
  status: String_Filter
  """
  ✨ Generated from Field `SupportTicket`.`subject` of type `String!`
  """
  subject: String_Filter
  """
  ✨ Generated from Field `SupportTicket`.`updatedAt` of type `Timestamp`
  """
  updatedAt: Timestamp_Filter
}
"""
✨ Generated first-row input type for table 'SupportTicket'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input SupportTicket_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [SupportTicket_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: SupportTicket_Filter
}
"""
✨ Generated key input type for table 'SupportTicket'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input SupportTicket_Key {
  """
  ✨ Generated from Field `SupportTicket`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `SupportTicket`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'SupportTicket'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input SupportTicket_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: SupportTicket_Filter
}
"""
✨ Generated order input type for table 'SupportTicket'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input SupportTicket_Order {
  """
  ✨ Generated from Field `SupportTicket`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `SupportTicket`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `SupportTicket`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `SupportTicket`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `SupportTicket`.`description` of type `String!`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `SupportTicket`.`status` of type `String!`
  """
  status: OrderDirection
  """
  ✨ Generated from Field `SupportTicket`.`subject` of type `String!`
  """
  subject: OrderDirection
  """
  ✨ Generated from Field `SupportTicket`.`updatedAt` of type `Timestamp`
  """
  updatedAt: OrderDirection
}
"""
✨ Generated data input type for table 'TechnicalSpecification'. It includes all necessary fields for creating or upserting rows into table.
"""
input TechnicalSpecification_Data {
  """
  ✨ Generated from Field `TechnicalSpecification`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `TechnicalSpecification`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `TechnicalSpecification`.`audioQuality` of type `String!`
  """
  audioQuality: String
  """
  ✨ `_expr` server value variant of `audioQuality` (✨ Generated from Field `TechnicalSpecification`.`audioQuality` of type `String!`)
  """
  audioQuality_expr: String_Expr
  """
  ✨ Generated from Field `TechnicalSpecification`.`equipment` of type `[String]`
  """
  equipment: [String!]
  """
  ✨ Generated from Field `TechnicalSpecification`.`postProductionCapabilities` of type `[String]`
  """
  postProductionCapabilities: [String!]
  """
  ✨ Generated from Field `TechnicalSpecification`.`sampleRate` of type `String!`
  """
  sampleRate: String
  """
  ✨ `_expr` server value variant of `sampleRate` (✨ Generated from Field `TechnicalSpecification`.`sampleRate` of type `String!`)
  """
  sampleRate_expr: String_Expr
}
"""
✨ Generated filter input type for table 'TechnicalSpecification'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input TechnicalSpecification_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [TechnicalSpecification_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: TechnicalSpecification_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [TechnicalSpecification_Filter!]
  """
  ✨ Generated from Field `TechnicalSpecification`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `TechnicalSpecification`.`audioQuality` of type `String!`
  """
  audioQuality: String_Filter
  """
  ✨ Generated from Field `TechnicalSpecification`.`equipment` of type `[String]`
  """
  equipment: String_ListFilter
  """
  ✨ Generated from Field `TechnicalSpecification`.`postProductionCapabilities` of type `[String]`
  """
  postProductionCapabilities: String_ListFilter
  """
  ✨ Generated from Field `TechnicalSpecification`.`sampleRate` of type `String!`
  """
  sampleRate: String_Filter
  """
  ✨ Generated from Field `TechnicalSpecification`.`nFTTechnicalSpecifications_on_technicalSpecification` of type `[NFTTechnicalSpecification!]!`
  """
  nFTTechnicalSpecifications_on_technicalSpecification: NFTTechnicalSpecification_ListFilter
  """
  ✨ Generated from Field `TechnicalSpecification`.`userTechnicalSpecifications_on_technicalSpecification` of type `[UserTechnicalSpecification!]!`
  """
  userTechnicalSpecifications_on_technicalSpecification: UserTechnicalSpecification_ListFilter
  """
  ✨ Generated from Field `TechnicalSpecification`.`voiceTechnicalSpecifications_on_technicalSpecification` of type `[VoiceTechnicalSpecification!]!`
  """
  voiceTechnicalSpecifications_on_technicalSpecification: VoiceTechnicalSpecification_ListFilter
  """
  ✨ Generated from Field `TechnicalSpecification`.`nfts_via_NFTTechnicalSpecification` of type `[NFT!]!`
  """
  nfts_via_NFTTechnicalSpecification: NFT_ListFilter
  """
  ✨ Generated from Field `TechnicalSpecification`.`users_via_UserTechnicalSpecification` of type `[User!]!`
  """
  users_via_UserTechnicalSpecification: User_ListFilter
  """
  ✨ Generated from Field `TechnicalSpecification`.`voices_via_VoiceTechnicalSpecification` of type `[Voice!]!`
  """
  voices_via_VoiceTechnicalSpecification: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'TechnicalSpecification'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input TechnicalSpecification_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [TechnicalSpecification_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: TechnicalSpecification_Filter
}
"""
✨ Generated key input type for table 'TechnicalSpecification'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input TechnicalSpecification_Key {
  """
  ✨ Generated from Field `TechnicalSpecification`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `TechnicalSpecification`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'TechnicalSpecification'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input TechnicalSpecification_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: TechnicalSpecification_Filter
}
"""
✨ Generated order input type for table 'TechnicalSpecification'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input TechnicalSpecification_Order {
  """
  ✨ Generated from Field `TechnicalSpecification`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `TechnicalSpecification`.`audioQuality` of type `String!`
  """
  audioQuality: OrderDirection
  """
  ✨ Generated from Field `TechnicalSpecification`.`sampleRate` of type `String!`
  """
  sampleRate: OrderDirection
}
"""
✨ Generated data input type for table 'TimeZone'. It includes all necessary fields for creating or upserting rows into table.
"""
input TimeZone_Data {
  """
  ✨ Generated from Field `TimeZone`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `TimeZone`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `TimeZone`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `TimeZone`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'TimeZone'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input TimeZone_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [TimeZone_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: TimeZone_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [TimeZone_Filter!]
  """
  ✨ Generated from Field `TimeZone`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `TimeZone`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `TimeZone`.`nFTTimeZones_on_timeZone` of type `[NFTTimeZone!]!`
  """
  nFTTimeZones_on_timeZone: NFTTimeZone_ListFilter
  """
  ✨ Generated from Field `TimeZone`.`userTimeZones_on_timeZone` of type `[UserTimeZone!]!`
  """
  userTimeZones_on_timeZone: UserTimeZone_ListFilter
  """
  ✨ Generated from Field `TimeZone`.`voiceTimeZones_on_timeZone` of type `[VoiceTimeZone!]!`
  """
  voiceTimeZones_on_timeZone: VoiceTimeZone_ListFilter
  """
  ✨ Generated from Field `TimeZone`.`nfts_via_NFTTimeZone` of type `[NFT!]!`
  """
  nfts_via_NFTTimeZone: NFT_ListFilter
  """
  ✨ Generated from Field `TimeZone`.`users_via_UserTimeZone` of type `[User!]!`
  """
  users_via_UserTimeZone: User_ListFilter
  """
  ✨ Generated from Field `TimeZone`.`voices_via_VoiceTimeZone` of type `[Voice!]!`
  """
  voices_via_VoiceTimeZone: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'TimeZone'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input TimeZone_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [TimeZone_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: TimeZone_Filter
}
"""
✨ Generated key input type for table 'TimeZone'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input TimeZone_Key {
  """
  ✨ Generated from Field `TimeZone`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `TimeZone`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'TimeZone'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input TimeZone_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: TimeZone_Filter
}
"""
✨ Generated order input type for table 'TimeZone'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input TimeZone_Order {
  """
  ✨ Generated from Field `TimeZone`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `TimeZone`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'Transaction'. It includes all necessary fields for creating or upserting rows into table.
"""
input Transaction_Data {
  """
  ✨ Generated from Field `Transaction`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Transaction`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Transaction`.`buyerId` of type `UUID!`
  """
  buyerId: UUID
  """
  ✨ `_expr` server value variant of `buyerId` (✨ Generated from Field `Transaction`.`buyerId` of type `UUID!`)
  """
  buyerId_expr: UUID_Expr
  """
  ✨ Generated from Field `Transaction`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Transaction`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Transaction`.`sellerId` of type `UUID!`
  """
  sellerId: UUID
  """
  ✨ `_expr` server value variant of `sellerId` (✨ Generated from Field `Transaction`.`sellerId` of type `UUID!`)
  """
  sellerId_expr: UUID_Expr
  """
  ✨ Generated from Field `Transaction`.`buyer` of type `User!`
  """
  buyer: User_Key
  """
  ✨ Generated from Field `Transaction`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `Transaction`.`seller` of type `User!`
  """
  seller: User_Key
  """
  ✨ Generated from Field `Transaction`.`price` of type `Float!`
  """
  price: Float
  """
  ✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`
  """
  transactionDate: Timestamp
  """
  ✨ `_expr` server value variant of `transactionDate` (✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`)
  """
  transactionDate_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `transactionDate` (✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`)
  """
  transactionDate_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'Transaction'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Transaction_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Transaction_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Transaction_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Transaction_Filter!]
  """
  ✨ Generated from Field `Transaction`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Transaction`.`buyerId` of type `UUID!`
  """
  buyerId: UUID_Filter
  """
  ✨ Generated from Field `Transaction`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `Transaction`.`sellerId` of type `UUID!`
  """
  sellerId: UUID_Filter
  """
  ✨ Generated from Field `Transaction`.`buyer` of type `User!`
  """
  buyer: User_Filter
  """
  ✨ Generated from Field `Transaction`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `Transaction`.`seller` of type `User!`
  """
  seller: User_Filter
  """
  ✨ Generated from Field `Transaction`.`price` of type `Float!`
  """
  price: Float_Filter
  """
  ✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`
  """
  transactionDate: Timestamp_Filter
}
"""
✨ Generated first-row input type for table 'Transaction'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Transaction_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Transaction_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Transaction_Filter
}
"""
✨ Generated key input type for table 'Transaction'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Transaction_Key {
  """
  ✨ Generated from Field `Transaction`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Transaction`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Transaction'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Transaction_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Transaction_Filter
}
"""
✨ Generated order input type for table 'Transaction'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Transaction_Order {
  """
  ✨ Generated from Field `Transaction`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`buyerId` of type `UUID!`
  """
  buyerId: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`sellerId` of type `UUID!`
  """
  sellerId: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`buyer` of type `User!`
  """
  buyer: User_Order
  """
  ✨ Generated from Field `Transaction`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `Transaction`.`seller` of type `User!`
  """
  seller: User_Order
  """
  ✨ Generated from Field `Transaction`.`price` of type `Float!`
  """
  price: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`
  """
  transactionDate: OrderDirection
}
"""
✨ Generated data input type for table 'User'. It includes all necessary fields for creating or upserting rows into table.
"""
input User_Data {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `User`.`auth` of type `String!`
  """
  auth: String
  """
  ✨ `_expr` server value variant of `auth` (✨ Generated from Field `User`.`auth` of type `String!`)
  """
  auth_expr: String_Expr
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `User`.`email` of type `String!`
  """
  email: String
  """
  ✨ `_expr` server value variant of `email` (✨ Generated from Field `User`.`email` of type `String!`)
  """
  email_expr: String_Expr
  """
  ✨ Generated from Field `User`.`geoLocation` of type `String`
  """
  geoLocation: String
  """
  ✨ `_expr` server value variant of `geoLocation` (✨ Generated from Field `User`.`geoLocation` of type `String`)
  """
  geoLocation_expr: String_Expr
  """
  ✨ Generated from Field `User`.`smartContractAddress` of type `String`
  """
  smartContractAddress: String
  """
  ✨ `_expr` server value variant of `smartContractAddress` (✨ Generated from Field `User`.`smartContractAddress` of type `String`)
  """
  smartContractAddress_expr: String_Expr
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: String
  """
  ✨ `_expr` server value variant of `username` (✨ Generated from Field `User`.`username` of type `String!`)
  """
  username_expr: String_Expr
  """
  ✨ Generated from Field `User`.`walletAddress` of type `String!`
  """
  walletAddress: String
  """
  ✨ `_expr` server value variant of `walletAddress` (✨ Generated from Field `User`.`walletAddress` of type `String!`)
  """
  walletAddress_expr: String_Expr
}
"""
✨ Generated filter input type for table 'User'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [User_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: User_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [User_Filter!]
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `User`.`auth` of type `String!`
  """
  auth: String_Filter
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `User`.`email` of type `String!`
  """
  email: String_Filter
  """
  ✨ Generated from Field `User`.`geoLocation` of type `String`
  """
  geoLocation: String_Filter
  """
  ✨ Generated from Field `User`.`smartContractAddress` of type `String`
  """
  smartContractAddress: String_Filter
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: String_Filter
  """
  ✨ Generated from Field `User`.`walletAddress` of type `String!`
  """
  walletAddress: String_Filter
  """
  ✨ Generated from Field `User`.`activityLogs_on_user` of type `[ActivityLog!]!`
  """
  activityLogs_on_user: ActivityLog_ListFilter
  """
  ✨ Generated from Field `User`.`analyticsEvents_on_user` of type `[AnalyticsEvent!]!`
  """
  analyticsEvents_on_user: AnalyticsEvent_ListFilter
  """
  ✨ Generated from Field `User`.`bids_on_bidder` of type `[Bid!]!`
  """
  bids_on_bidder: Bid_ListFilter
  """
  ✨ Generated from Field `User`.`collections_on_owner` of type `[Collection!]!`
  """
  collections_on_owner: Collection_ListFilter
  """
  ✨ Generated from Field `User`.`contractUsers_on_user` of type `[ContractUser!]!`
  """
  contractUsers_on_user: ContractUser_ListFilter
  """
  ✨ Generated from Field `User`.`favorites_on_user` of type `[Favorite!]!`
  """
  favorites_on_user: Favorite_ListFilter
  """
  ✨ Generated from Field `User`.`listings_on_seller` of type `[Listing!]!`
  """
  listings_on_seller: Listing_ListFilter
  """
  ✨ Generated from Field `User`.`messages_on_receiver` of type `[Message!]!`
  """
  messages_on_receiver: Message_ListFilter
  """
  ✨ Generated from Field `User`.`messages_on_sender` of type `[Message!]!`
  """
  messages_on_sender: Message_ListFilter
  """
  ✨ Generated from Field `User`.`nfts_on_creator` of type `[NFT!]!`
  """
  nfts_on_creator: NFT_ListFilter
  """
  ✨ Generated from Field `User`.`notifications_on_user` of type `[Notification!]!`
  """
  notifications_on_user: Notification_ListFilter
  """
  ✨ Generated from Field `User`.`ownerships_on_owner` of type `[Ownership!]!`
  """
  ownerships_on_owner: Ownership_ListFilter
  """
  ✨ Generated from Field `User`.`paymentMethods_on_user` of type `[PaymentMethod!]!`
  """
  paymentMethods_on_user: PaymentMethod_ListFilter
  """
  ✨ Generated from Field `User`.`reviews_on_creator` of type `[Review!]!`
  """
  reviews_on_creator: Review_ListFilter
  """
  ✨ Generated from Field `User`.`reviews_on_reviewer` of type `[Review!]!`
  """
  reviews_on_reviewer: Review_ListFilter
  """
  ✨ Generated from Field `User`.`royalties_on_creator` of type `[Royalty!]!`
  """
  royalties_on_creator: Royalty_ListFilter
  """
  ✨ Generated from Field `User`.`supportTickets_on_user` of type `[SupportTicket!]!`
  """
  supportTickets_on_user: SupportTicket_ListFilter
  """
  ✨ Generated from Field `User`.`transactions_on_buyer` of type `[Transaction!]!`
  """
  transactions_on_buyer: Transaction_ListFilter
  """
  ✨ Generated from Field `User`.`transactions_on_seller` of type `[Transaction!]!`
  """
  transactions_on_seller: Transaction_ListFilter
  """
  ✨ Generated from Field `User`.`userCategories_on_user` of type `[UserCategory!]!`
  """
  userCategories_on_user: UserCategory_ListFilter
  """
  ✨ Generated from Field `User`.`userExperiences_on_user` of type `[UserExperience!]!`
  """
  userExperiences_on_user: UserExperience_ListFilter
  """
  ✨ Generated from Field `User`.`userLanguages_on_user` of type `[UserLanguage!]!`
  """
  userLanguages_on_user: UserLanguage_ListFilter
  """
  ✨ Generated from Field `User`.`userProductionQualities_on_user` of type `[UserProductionQuality!]!`
  """
  userProductionQualities_on_user: UserProductionQuality_ListFilter
  """
  ✨ Generated from Field `User`.`userRegionalDialects_on_user` of type `[UserRegionalDialect!]!`
  """
  userRegionalDialects_on_user: UserRegionalDialect_ListFilter
  """
  ✨ Generated from Field `User`.`userRoles_on_user` of type `[UserRole!]!`
  """
  userRoles_on_user: UserRole_ListFilter
  """
  ✨ Generated from Field `User`.`userSecondaryLanguages_on_user` of type `[UserSecondaryLanguage!]!`
  """
  userSecondaryLanguages_on_user: UserSecondaryLanguage_ListFilter
  """
  ✨ Generated from Field `User`.`userStudioAvailabilities_on_user` of type `[UserStudioAvailability!]!`
  """
  userStudioAvailabilities_on_user: UserStudioAvailability_ListFilter
  """
  ✨ Generated from Field `User`.`userStyleToneOptions_on_user` of type `[UserStyleToneOption!]!`
  """
  userStyleToneOptions_on_user: UserStyleToneOption_ListFilter
  """
  ✨ Generated from Field `User`.`userTechnicalSpecifications_on_user` of type `[UserTechnicalSpecification!]!`
  """
  userTechnicalSpecifications_on_user: UserTechnicalSpecification_ListFilter
  """
  ✨ Generated from Field `User`.`userTimeZones_on_user` of type `[UserTimeZone!]!`
  """
  userTimeZones_on_user: UserTimeZone_ListFilter
  """
  ✨ Generated from Field `User`.`userVoiceTraits_on_user` of type `[UserVoiceTrait!]!`
  """
  userVoiceTraits_on_user: UserVoiceTrait_ListFilter
  """
  ✨ Generated from Field `User`.`voices_on_user` of type `[Voice!]!`
  """
  voices_on_user: Voice_ListFilter
  """
  ✨ Generated from Field `User`.`categories_via_UserCategory` of type `[Category!]!`
  """
  categories_via_UserCategory: Category_ListFilter
  """
  ✨ Generated from Field `User`.`contracts_via_ContractUser` of type `[Contract!]!`
  """
  contracts_via_ContractUser: Contract_ListFilter
  """
  ✨ Generated from Field `User`.`experienceLevels_via_UserExperience` of type `[ExperienceLevel!]!`
  """
  experienceLevels_via_UserExperience: ExperienceLevel_ListFilter
  """
  ✨ Generated from Field `User`.`languages_via_UserLanguage` of type `[Language!]!`
  """
  languages_via_UserLanguage: Language_ListFilter
  """
  ✨ Generated from Field `User`.`nfts_via_Favorite` of type `[NFT!]!`
  """
  nfts_via_Favorite: NFT_ListFilter
  """
  ✨ Generated from Field `User`.`nfts_via_Ownership` of type `[NFT!]!`
  """
  nfts_via_Ownership: NFT_ListFilter
  """
  ✨ Generated from Field `User`.`productionQualities_via_UserProductionQuality` of type `[ProductionQuality!]!`
  """
  productionQualities_via_UserProductionQuality: ProductionQuality_ListFilter
  """
  ✨ Generated from Field `User`.`regionalDialects_via_UserRegionalDialect` of type `[RegionalDialect!]!`
  """
  regionalDialects_via_UserRegionalDialect: RegionalDialect_ListFilter
  """
  ✨ Generated from Field `User`.`roles_via_UserRole` of type `[Role!]!`
  """
  roles_via_UserRole: Role_ListFilter
  """
  ✨ Generated from Field `User`.`secondaryLanguages_via_UserSecondaryLanguage` of type `[SecondaryLanguage!]!`
  """
  secondaryLanguages_via_UserSecondaryLanguage: SecondaryLanguage_ListFilter
  """
  ✨ Generated from Field `User`.`studioAvailabilities_via_UserStudioAvailability` of type `[StudioAvailability!]!`
  """
  studioAvailabilities_via_UserStudioAvailability: StudioAvailability_ListFilter
  """
  ✨ Generated from Field `User`.`styleToneOptions_via_UserStyleToneOption` of type `[StyleToneOption!]!`
  """
  styleToneOptions_via_UserStyleToneOption: StyleToneOption_ListFilter
  """
  ✨ Generated from Field `User`.`technicalSpecifications_via_UserTechnicalSpecification` of type `[TechnicalSpecification!]!`
  """
  technicalSpecifications_via_UserTechnicalSpecification: TechnicalSpecification_ListFilter
  """
  ✨ Generated from Field `User`.`timeZones_via_UserTimeZone` of type `[TimeZone!]!`
  """
  timeZones_via_UserTimeZone: TimeZone_ListFilter
  """
  ✨ Generated from Field `User`.`voiceTraits_via_UserVoiceTrait` of type `[VoiceTrait!]!`
  """
  voiceTraits_via_UserVoiceTrait: VoiceTrait_ListFilter
}
"""
✨ Generated first-row input type for table 'User'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input User_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [User_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: User_Filter
}
"""
✨ Generated key input type for table 'User'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input User_Key {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'User'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input User_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: User_Filter
}
"""
✨ Generated order input type for table 'User'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input User_Order {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `User`.`auth` of type `String!`
  """
  auth: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `User`.`email` of type `String!`
  """
  email: OrderDirection
  """
  ✨ Generated from Field `User`.`geoLocation` of type `String`
  """
  geoLocation: OrderDirection
  """
  ✨ Generated from Field `User`.`smartContractAddress` of type `String`
  """
  smartContractAddress: OrderDirection
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: OrderDirection
  """
  ✨ Generated from Field `User`.`walletAddress` of type `String!`
  """
  walletAddress: OrderDirection
}
"""
✨ Generated data input type for table 'UserCategory'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserCategory_Data {
  """
  ✨ Generated from Field `UserCategory`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserCategory`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserCategory`.`categoryId` of type `UUID!`
  """
  categoryId: UUID
  """
  ✨ `_expr` server value variant of `categoryId` (✨ Generated from Field `UserCategory`.`categoryId` of type `UUID!`)
  """
  categoryId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserCategory`.`category` of type `Category!`
  """
  category: Category_Key
  """
  ✨ Generated from Field `UserCategory`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserCategory'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserCategory_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserCategory_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserCategory_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserCategory_Filter!]
  """
  ✨ Generated from Field `UserCategory`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserCategory`.`categoryId` of type `UUID!`
  """
  categoryId: UUID_Filter
  """
  ✨ Generated from Field `UserCategory`.`category` of type `Category!`
  """
  category: Category_Filter
  """
  ✨ Generated from Field `UserCategory`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserCategory'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserCategory_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserCategory_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserCategory_Filter
}
"""
✨ Generated key input type for table 'UserCategory'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserCategory_Key {
  """
  ✨ Generated from Field `UserCategory`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserCategory`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserCategory`.`categoryId` of type `UUID!`
  """
  categoryId: UUID
  """
  ✨ `_expr` server value variant of `categoryId` (✨ Generated from Field `UserCategory`.`categoryId` of type `UUID!`)
  """
  categoryId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserCategory'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserCategory_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserCategory_Filter
}
"""
✨ Generated order input type for table 'UserCategory'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserCategory_Order {
  """
  ✨ Generated from Field `UserCategory`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserCategory`.`categoryId` of type `UUID!`
  """
  categoryId: OrderDirection
  """
  ✨ Generated from Field `UserCategory`.`category` of type `Category!`
  """
  category: Category_Order
  """
  ✨ Generated from Field `UserCategory`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserExperience'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserExperience_Data {
  """
  ✨ Generated from Field `UserExperience`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserExperience`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserExperience`.`experienceLevelId` of type `UUID!`
  """
  experienceLevelId: UUID
  """
  ✨ `_expr` server value variant of `experienceLevelId` (✨ Generated from Field `UserExperience`.`experienceLevelId` of type `UUID!`)
  """
  experienceLevelId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserExperience`.`experienceLevel` of type `ExperienceLevel!`
  """
  experienceLevel: ExperienceLevel_Key
  """
  ✨ Generated from Field `UserExperience`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserExperience'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserExperience_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserExperience_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserExperience_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserExperience_Filter!]
  """
  ✨ Generated from Field `UserExperience`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserExperience`.`experienceLevelId` of type `UUID!`
  """
  experienceLevelId: UUID_Filter
  """
  ✨ Generated from Field `UserExperience`.`experienceLevel` of type `ExperienceLevel!`
  """
  experienceLevel: ExperienceLevel_Filter
  """
  ✨ Generated from Field `UserExperience`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserExperience'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserExperience_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserExperience_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserExperience_Filter
}
"""
✨ Generated key input type for table 'UserExperience'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserExperience_Key {
  """
  ✨ Generated from Field `UserExperience`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserExperience`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserExperience`.`experienceLevelId` of type `UUID!`
  """
  experienceLevelId: UUID
  """
  ✨ `_expr` server value variant of `experienceLevelId` (✨ Generated from Field `UserExperience`.`experienceLevelId` of type `UUID!`)
  """
  experienceLevelId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserExperience'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserExperience_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserExperience_Filter
}
"""
✨ Generated order input type for table 'UserExperience'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserExperience_Order {
  """
  ✨ Generated from Field `UserExperience`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserExperience`.`experienceLevelId` of type `UUID!`
  """
  experienceLevelId: OrderDirection
  """
  ✨ Generated from Field `UserExperience`.`experienceLevel` of type `ExperienceLevel!`
  """
  experienceLevel: ExperienceLevel_Order
  """
  ✨ Generated from Field `UserExperience`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserLanguage'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserLanguage_Data {
  """
  ✨ Generated from Field `UserLanguage`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserLanguage`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserLanguage`.`languageId` of type `UUID!`
  """
  languageId: UUID
  """
  ✨ `_expr` server value variant of `languageId` (✨ Generated from Field `UserLanguage`.`languageId` of type `UUID!`)
  """
  languageId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserLanguage`.`language` of type `Language!`
  """
  language: Language_Key
  """
  ✨ Generated from Field `UserLanguage`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserLanguage'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserLanguage_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserLanguage_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserLanguage_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserLanguage_Filter!]
  """
  ✨ Generated from Field `UserLanguage`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserLanguage`.`languageId` of type `UUID!`
  """
  languageId: UUID_Filter
  """
  ✨ Generated from Field `UserLanguage`.`language` of type `Language!`
  """
  language: Language_Filter
  """
  ✨ Generated from Field `UserLanguage`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserLanguage'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserLanguage_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserLanguage_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserLanguage_Filter
}
"""
✨ Generated key input type for table 'UserLanguage'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserLanguage_Key {
  """
  ✨ Generated from Field `UserLanguage`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserLanguage`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserLanguage`.`languageId` of type `UUID!`
  """
  languageId: UUID
  """
  ✨ `_expr` server value variant of `languageId` (✨ Generated from Field `UserLanguage`.`languageId` of type `UUID!`)
  """
  languageId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserLanguage'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserLanguage_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserLanguage_Filter
}
"""
✨ Generated order input type for table 'UserLanguage'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserLanguage_Order {
  """
  ✨ Generated from Field `UserLanguage`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserLanguage`.`languageId` of type `UUID!`
  """
  languageId: OrderDirection
  """
  ✨ Generated from Field `UserLanguage`.`language` of type `Language!`
  """
  language: Language_Order
  """
  ✨ Generated from Field `UserLanguage`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserProductionQuality'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserProductionQuality_Data {
  """
  ✨ Generated from Field `UserProductionQuality`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserProductionQuality`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: UUID
  """
  ✨ `_expr` server value variant of `productionQualityId` (✨ Generated from Field `UserProductionQuality`.`productionQualityId` of type `UUID!`)
  """
  productionQualityId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserProductionQuality`.`productionQuality` of type `ProductionQuality!`
  """
  productionQuality: ProductionQuality_Key
  """
  ✨ Generated from Field `UserProductionQuality`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserProductionQuality'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserProductionQuality_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserProductionQuality_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserProductionQuality_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserProductionQuality_Filter!]
  """
  ✨ Generated from Field `UserProductionQuality`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: UUID_Filter
  """
  ✨ Generated from Field `UserProductionQuality`.`productionQuality` of type `ProductionQuality!`
  """
  productionQuality: ProductionQuality_Filter
  """
  ✨ Generated from Field `UserProductionQuality`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserProductionQuality'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserProductionQuality_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserProductionQuality_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserProductionQuality_Filter
}
"""
✨ Generated key input type for table 'UserProductionQuality'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserProductionQuality_Key {
  """
  ✨ Generated from Field `UserProductionQuality`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserProductionQuality`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: UUID
  """
  ✨ `_expr` server value variant of `productionQualityId` (✨ Generated from Field `UserProductionQuality`.`productionQualityId` of type `UUID!`)
  """
  productionQualityId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserProductionQuality'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserProductionQuality_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserProductionQuality_Filter
}
"""
✨ Generated order input type for table 'UserProductionQuality'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserProductionQuality_Order {
  """
  ✨ Generated from Field `UserProductionQuality`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: OrderDirection
  """
  ✨ Generated from Field `UserProductionQuality`.`productionQuality` of type `ProductionQuality!`
  """
  productionQuality: ProductionQuality_Order
  """
  ✨ Generated from Field `UserProductionQuality`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserRegionalDialect'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserRegionalDialect_Data {
  """
  ✨ Generated from Field `UserRegionalDialect`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserRegionalDialect`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: UUID
  """
  ✨ `_expr` server value variant of `regionalDialectId` (✨ Generated from Field `UserRegionalDialect`.`regionalDialectId` of type `UUID!`)
  """
  regionalDialectId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserRegionalDialect`.`regionalDialect` of type `RegionalDialect!`
  """
  regionalDialect: RegionalDialect_Key
  """
  ✨ Generated from Field `UserRegionalDialect`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserRegionalDialect'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserRegionalDialect_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserRegionalDialect_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserRegionalDialect_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserRegionalDialect_Filter!]
  """
  ✨ Generated from Field `UserRegionalDialect`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: UUID_Filter
  """
  ✨ Generated from Field `UserRegionalDialect`.`regionalDialect` of type `RegionalDialect!`
  """
  regionalDialect: RegionalDialect_Filter
  """
  ✨ Generated from Field `UserRegionalDialect`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserRegionalDialect'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserRegionalDialect_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserRegionalDialect_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserRegionalDialect_Filter
}
"""
✨ Generated key input type for table 'UserRegionalDialect'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserRegionalDialect_Key {
  """
  ✨ Generated from Field `UserRegionalDialect`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserRegionalDialect`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: UUID
  """
  ✨ `_expr` server value variant of `regionalDialectId` (✨ Generated from Field `UserRegionalDialect`.`regionalDialectId` of type `UUID!`)
  """
  regionalDialectId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserRegionalDialect'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserRegionalDialect_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserRegionalDialect_Filter
}
"""
✨ Generated order input type for table 'UserRegionalDialect'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserRegionalDialect_Order {
  """
  ✨ Generated from Field `UserRegionalDialect`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: OrderDirection
  """
  ✨ Generated from Field `UserRegionalDialect`.`regionalDialect` of type `RegionalDialect!`
  """
  regionalDialect: RegionalDialect_Order
  """
  ✨ Generated from Field `UserRegionalDialect`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserRole'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserRole_Data {
  """
  ✨ Generated from Field `UserRole`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserRole`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserRole`.`roleId` of type `UUID!`
  """
  roleId: UUID
  """
  ✨ `_expr` server value variant of `roleId` (✨ Generated from Field `UserRole`.`roleId` of type `UUID!`)
  """
  roleId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserRole`.`role` of type `Role!`
  """
  role: Role_Key
  """
  ✨ Generated from Field `UserRole`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserRole'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserRole_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserRole_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserRole_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserRole_Filter!]
  """
  ✨ Generated from Field `UserRole`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserRole`.`roleId` of type `UUID!`
  """
  roleId: UUID_Filter
  """
  ✨ Generated from Field `UserRole`.`role` of type `Role!`
  """
  role: Role_Filter
  """
  ✨ Generated from Field `UserRole`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserRole'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserRole_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserRole_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserRole_Filter
}
"""
✨ Generated key input type for table 'UserRole'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserRole_Key {
  """
  ✨ Generated from Field `UserRole`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserRole`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserRole`.`roleId` of type `UUID!`
  """
  roleId: UUID
  """
  ✨ `_expr` server value variant of `roleId` (✨ Generated from Field `UserRole`.`roleId` of type `UUID!`)
  """
  roleId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserRole'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserRole_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserRole_Filter
}
"""
✨ Generated order input type for table 'UserRole'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserRole_Order {
  """
  ✨ Generated from Field `UserRole`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserRole`.`roleId` of type `UUID!`
  """
  roleId: OrderDirection
  """
  ✨ Generated from Field `UserRole`.`role` of type `Role!`
  """
  role: Role_Order
  """
  ✨ Generated from Field `UserRole`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserSecondaryLanguage'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserSecondaryLanguage_Data {
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserSecondaryLanguage`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: UUID
  """
  ✨ `_expr` server value variant of `secondaryLanguageId` (✨ Generated from Field `UserSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`)
  """
  secondaryLanguageId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`secondaryLanguage` of type `SecondaryLanguage!`
  """
  secondaryLanguage: SecondaryLanguage_Key
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserSecondaryLanguage'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserSecondaryLanguage_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserSecondaryLanguage_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserSecondaryLanguage_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserSecondaryLanguage_Filter!]
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: UUID_Filter
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`secondaryLanguage` of type `SecondaryLanguage!`
  """
  secondaryLanguage: SecondaryLanguage_Filter
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserSecondaryLanguage'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserSecondaryLanguage_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserSecondaryLanguage_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserSecondaryLanguage_Filter
}
"""
✨ Generated key input type for table 'UserSecondaryLanguage'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserSecondaryLanguage_Key {
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserSecondaryLanguage`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: UUID
  """
  ✨ `_expr` server value variant of `secondaryLanguageId` (✨ Generated from Field `UserSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`)
  """
  secondaryLanguageId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserSecondaryLanguage'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserSecondaryLanguage_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserSecondaryLanguage_Filter
}
"""
✨ Generated order input type for table 'UserSecondaryLanguage'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserSecondaryLanguage_Order {
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: OrderDirection
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`secondaryLanguage` of type `SecondaryLanguage!`
  """
  secondaryLanguage: SecondaryLanguage_Order
  """
  ✨ Generated from Field `UserSecondaryLanguage`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserStudioAvailability'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserStudioAvailability_Data {
  """
  ✨ Generated from Field `UserStudioAvailability`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserStudioAvailability`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: UUID
  """
  ✨ `_expr` server value variant of `studioAvailabilityId` (✨ Generated from Field `UserStudioAvailability`.`studioAvailabilityId` of type `UUID!`)
  """
  studioAvailabilityId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserStudioAvailability`.`studioAvailability` of type `StudioAvailability!`
  """
  studioAvailability: StudioAvailability_Key
  """
  ✨ Generated from Field `UserStudioAvailability`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserStudioAvailability'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserStudioAvailability_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserStudioAvailability_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserStudioAvailability_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserStudioAvailability_Filter!]
  """
  ✨ Generated from Field `UserStudioAvailability`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: UUID_Filter
  """
  ✨ Generated from Field `UserStudioAvailability`.`studioAvailability` of type `StudioAvailability!`
  """
  studioAvailability: StudioAvailability_Filter
  """
  ✨ Generated from Field `UserStudioAvailability`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserStudioAvailability'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserStudioAvailability_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserStudioAvailability_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserStudioAvailability_Filter
}
"""
✨ Generated key input type for table 'UserStudioAvailability'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserStudioAvailability_Key {
  """
  ✨ Generated from Field `UserStudioAvailability`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserStudioAvailability`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: UUID
  """
  ✨ `_expr` server value variant of `studioAvailabilityId` (✨ Generated from Field `UserStudioAvailability`.`studioAvailabilityId` of type `UUID!`)
  """
  studioAvailabilityId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserStudioAvailability'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserStudioAvailability_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserStudioAvailability_Filter
}
"""
✨ Generated order input type for table 'UserStudioAvailability'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserStudioAvailability_Order {
  """
  ✨ Generated from Field `UserStudioAvailability`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: OrderDirection
  """
  ✨ Generated from Field `UserStudioAvailability`.`studioAvailability` of type `StudioAvailability!`
  """
  studioAvailability: StudioAvailability_Order
  """
  ✨ Generated from Field `UserStudioAvailability`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserStyleToneOption'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserStyleToneOption_Data {
  """
  ✨ Generated from Field `UserStyleToneOption`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserStyleToneOption`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: UUID
  """
  ✨ `_expr` server value variant of `styleToneOptionId` (✨ Generated from Field `UserStyleToneOption`.`styleToneOptionId` of type `UUID!`)
  """
  styleToneOptionId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserStyleToneOption`.`styleToneOption` of type `StyleToneOption!`
  """
  styleToneOption: StyleToneOption_Key
  """
  ✨ Generated from Field `UserStyleToneOption`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserStyleToneOption'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserStyleToneOption_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserStyleToneOption_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserStyleToneOption_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserStyleToneOption_Filter!]
  """
  ✨ Generated from Field `UserStyleToneOption`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: UUID_Filter
  """
  ✨ Generated from Field `UserStyleToneOption`.`styleToneOption` of type `StyleToneOption!`
  """
  styleToneOption: StyleToneOption_Filter
  """
  ✨ Generated from Field `UserStyleToneOption`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserStyleToneOption'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserStyleToneOption_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserStyleToneOption_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserStyleToneOption_Filter
}
"""
✨ Generated key input type for table 'UserStyleToneOption'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserStyleToneOption_Key {
  """
  ✨ Generated from Field `UserStyleToneOption`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserStyleToneOption`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: UUID
  """
  ✨ `_expr` server value variant of `styleToneOptionId` (✨ Generated from Field `UserStyleToneOption`.`styleToneOptionId` of type `UUID!`)
  """
  styleToneOptionId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserStyleToneOption'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserStyleToneOption_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserStyleToneOption_Filter
}
"""
✨ Generated order input type for table 'UserStyleToneOption'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserStyleToneOption_Order {
  """
  ✨ Generated from Field `UserStyleToneOption`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: OrderDirection
  """
  ✨ Generated from Field `UserStyleToneOption`.`styleToneOption` of type `StyleToneOption!`
  """
  styleToneOption: StyleToneOption_Order
  """
  ✨ Generated from Field `UserStyleToneOption`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserTechnicalSpecification'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserTechnicalSpecification_Data {
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserTechnicalSpecification`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: UUID
  """
  ✨ `_expr` server value variant of `technicalSpecificationId` (✨ Generated from Field `UserTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`)
  """
  technicalSpecificationId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`technicalSpecification` of type `TechnicalSpecification!`
  """
  technicalSpecification: TechnicalSpecification_Key
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserTechnicalSpecification'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserTechnicalSpecification_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserTechnicalSpecification_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserTechnicalSpecification_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserTechnicalSpecification_Filter!]
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: UUID_Filter
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`technicalSpecification` of type `TechnicalSpecification!`
  """
  technicalSpecification: TechnicalSpecification_Filter
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserTechnicalSpecification'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserTechnicalSpecification_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserTechnicalSpecification_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserTechnicalSpecification_Filter
}
"""
✨ Generated key input type for table 'UserTechnicalSpecification'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserTechnicalSpecification_Key {
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserTechnicalSpecification`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: UUID
  """
  ✨ `_expr` server value variant of `technicalSpecificationId` (✨ Generated from Field `UserTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`)
  """
  technicalSpecificationId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserTechnicalSpecification'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserTechnicalSpecification_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserTechnicalSpecification_Filter
}
"""
✨ Generated order input type for table 'UserTechnicalSpecification'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserTechnicalSpecification_Order {
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: OrderDirection
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`technicalSpecification` of type `TechnicalSpecification!`
  """
  technicalSpecification: TechnicalSpecification_Order
  """
  ✨ Generated from Field `UserTechnicalSpecification`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserTimeZone'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserTimeZone_Data {
  """
  ✨ Generated from Field `UserTimeZone`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserTimeZone`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: UUID
  """
  ✨ `_expr` server value variant of `timeZoneId` (✨ Generated from Field `UserTimeZone`.`timeZoneId` of type `UUID!`)
  """
  timeZoneId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserTimeZone`.`timeZone` of type `TimeZone!`
  """
  timeZone: TimeZone_Key
  """
  ✨ Generated from Field `UserTimeZone`.`user` of type `User!`
  """
  user: User_Key
}
"""
✨ Generated filter input type for table 'UserTimeZone'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserTimeZone_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserTimeZone_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserTimeZone_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserTimeZone_Filter!]
  """
  ✨ Generated from Field `UserTimeZone`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: UUID_Filter
  """
  ✨ Generated from Field `UserTimeZone`.`timeZone` of type `TimeZone!`
  """
  timeZone: TimeZone_Filter
  """
  ✨ Generated from Field `UserTimeZone`.`user` of type `User!`
  """
  user: User_Filter
}
"""
✨ Generated first-row input type for table 'UserTimeZone'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserTimeZone_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserTimeZone_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserTimeZone_Filter
}
"""
✨ Generated key input type for table 'UserTimeZone'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserTimeZone_Key {
  """
  ✨ Generated from Field `UserTimeZone`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserTimeZone`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: UUID
  """
  ✨ `_expr` server value variant of `timeZoneId` (✨ Generated from Field `UserTimeZone`.`timeZoneId` of type `UUID!`)
  """
  timeZoneId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserTimeZone'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserTimeZone_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserTimeZone_Filter
}
"""
✨ Generated order input type for table 'UserTimeZone'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserTimeZone_Order {
  """
  ✨ Generated from Field `UserTimeZone`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: OrderDirection
  """
  ✨ Generated from Field `UserTimeZone`.`timeZone` of type `TimeZone!`
  """
  timeZone: TimeZone_Order
  """
  ✨ Generated from Field `UserTimeZone`.`user` of type `User!`
  """
  user: User_Order
}
"""
✨ Generated data input type for table 'UserVoiceTrait'. It includes all necessary fields for creating or upserting rows into table.
"""
input UserVoiceTrait_Data {
  """
  ✨ Generated from Field `UserVoiceTrait`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserVoiceTrait`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: UUID
  """
  ✨ `_expr` server value variant of `voiceTraitId` (✨ Generated from Field `UserVoiceTrait`.`voiceTraitId` of type `UUID!`)
  """
  voiceTraitId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserVoiceTrait`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `UserVoiceTrait`.`voiceTrait` of type `VoiceTrait!`
  """
  voiceTrait: VoiceTrait_Key
}
"""
✨ Generated filter input type for table 'UserVoiceTrait'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input UserVoiceTrait_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [UserVoiceTrait_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: UserVoiceTrait_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [UserVoiceTrait_Filter!]
  """
  ✨ Generated from Field `UserVoiceTrait`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `UserVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: UUID_Filter
  """
  ✨ Generated from Field `UserVoiceTrait`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `UserVoiceTrait`.`voiceTrait` of type `VoiceTrait!`
  """
  voiceTrait: VoiceTrait_Filter
}
"""
✨ Generated first-row input type for table 'UserVoiceTrait'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input UserVoiceTrait_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [UserVoiceTrait_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: UserVoiceTrait_Filter
}
"""
✨ Generated key input type for table 'UserVoiceTrait'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input UserVoiceTrait_Key {
  """
  ✨ Generated from Field `UserVoiceTrait`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `UserVoiceTrait`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `UserVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: UUID
  """
  ✨ `_expr` server value variant of `voiceTraitId` (✨ Generated from Field `UserVoiceTrait`.`voiceTraitId` of type `UUID!`)
  """
  voiceTraitId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'UserVoiceTrait'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input UserVoiceTrait_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: UserVoiceTrait_Filter
}
"""
✨ Generated order input type for table 'UserVoiceTrait'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input UserVoiceTrait_Order {
  """
  ✨ Generated from Field `UserVoiceTrait`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `UserVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: OrderDirection
  """
  ✨ Generated from Field `UserVoiceTrait`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `UserVoiceTrait`.`voiceTrait` of type `VoiceTrait!`
  """
  voiceTrait: VoiceTrait_Order
}
"""
✨ Generated data input type for table 'Voice'. It includes all necessary fields for creating or upserting rows into table.
"""
input Voice_Data {
  """
  ✨ Generated from Field `Voice`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Voice`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Voice`.`userId` of type `UUID!`
  """
  userId: UUID
  """
  ✨ `_expr` server value variant of `userId` (✨ Generated from Field `Voice`.`userId` of type `UUID!`)
  """
  userId_expr: UUID_Expr
  """
  ✨ Generated from Field `Voice`.`user` of type `User!`
  """
  user: User_Key
  """
  ✨ Generated from Field `Voice`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `Voice`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `Voice`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `Voice`.`description` of type `String`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `Voice`.`description` of type `String`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `Voice`.`name` of type `String!`
  """
  name: String
  """
  ✨ `_expr` server value variant of `name` (✨ Generated from Field `Voice`.`name` of type `String!`)
  """
  name_expr: String_Expr
}
"""
✨ Generated filter input type for table 'Voice'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Voice_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Voice_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Voice_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Voice_Filter!]
  """
  ✨ Generated from Field `Voice`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Voice`.`userId` of type `UUID!`
  """
  userId: UUID_Filter
  """
  ✨ Generated from Field `Voice`.`user` of type `User!`
  """
  user: User_Filter
  """
  ✨ Generated from Field `Voice`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `Voice`.`description` of type `String`
  """
  description: String_Filter
  """
  ✨ Generated from Field `Voice`.`name` of type `String!`
  """
  name: String_Filter
  """
  ✨ Generated from Field `Voice`.`contractVoices_on_voice` of type `[ContractVoice!]!`
  """
  contractVoices_on_voice: ContractVoice_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceCategories_on_voice` of type `[VoiceCategory!]!`
  """
  voiceCategories_on_voice: VoiceCategory_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceExperiences_on_voice` of type `[VoiceExperience!]!`
  """
  voiceExperiences_on_voice: VoiceExperience_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceLanguages_on_voice` of type `[VoiceLanguage!]!`
  """
  voiceLanguages_on_voice: VoiceLanguage_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceProductionQualities_on_voice` of type `[VoiceProductionQuality!]!`
  """
  voiceProductionQualities_on_voice: VoiceProductionQuality_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceRegionalDialects_on_voice` of type `[VoiceRegionalDialect!]!`
  """
  voiceRegionalDialects_on_voice: VoiceRegionalDialect_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceSecondaryLanguages_on_voice` of type `[VoiceSecondaryLanguage!]!`
  """
  voiceSecondaryLanguages_on_voice: VoiceSecondaryLanguage_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceStudioAvailabilities_on_voice` of type `[VoiceStudioAvailability!]!`
  """
  voiceStudioAvailabilities_on_voice: VoiceStudioAvailability_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceStyleToneOptions_on_voice` of type `[VoiceStyleToneOption!]!`
  """
  voiceStyleToneOptions_on_voice: VoiceStyleToneOption_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceTechnicalSpecifications_on_voice` of type `[VoiceTechnicalSpecification!]!`
  """
  voiceTechnicalSpecifications_on_voice: VoiceTechnicalSpecification_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceTimeZones_on_voice` of type `[VoiceTimeZone!]!`
  """
  voiceTimeZones_on_voice: VoiceTimeZone_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceVoiceTraits_on_voice` of type `[VoiceVoiceTrait!]!`
  """
  voiceVoiceTraits_on_voice: VoiceVoiceTrait_ListFilter
  """
  ✨ Generated from Field `Voice`.`categories_via_VoiceCategory` of type `[Category!]!`
  """
  categories_via_VoiceCategory: Category_ListFilter
  """
  ✨ Generated from Field `Voice`.`contracts_via_ContractVoice` of type `[Contract!]!`
  """
  contracts_via_ContractVoice: Contract_ListFilter
  """
  ✨ Generated from Field `Voice`.`experienceLevels_via_VoiceExperience` of type `[ExperienceLevel!]!`
  """
  experienceLevels_via_VoiceExperience: ExperienceLevel_ListFilter
  """
  ✨ Generated from Field `Voice`.`languages_via_VoiceLanguage` of type `[Language!]!`
  """
  languages_via_VoiceLanguage: Language_ListFilter
  """
  ✨ Generated from Field `Voice`.`productionQualities_via_VoiceProductionQuality` of type `[ProductionQuality!]!`
  """
  productionQualities_via_VoiceProductionQuality: ProductionQuality_ListFilter
  """
  ✨ Generated from Field `Voice`.`regionalDialects_via_VoiceRegionalDialect` of type `[RegionalDialect!]!`
  """
  regionalDialects_via_VoiceRegionalDialect: RegionalDialect_ListFilter
  """
  ✨ Generated from Field `Voice`.`secondaryLanguages_via_VoiceSecondaryLanguage` of type `[SecondaryLanguage!]!`
  """
  secondaryLanguages_via_VoiceSecondaryLanguage: SecondaryLanguage_ListFilter
  """
  ✨ Generated from Field `Voice`.`studioAvailabilities_via_VoiceStudioAvailability` of type `[StudioAvailability!]!`
  """
  studioAvailabilities_via_VoiceStudioAvailability: StudioAvailability_ListFilter
  """
  ✨ Generated from Field `Voice`.`styleToneOptions_via_VoiceStyleToneOption` of type `[StyleToneOption!]!`
  """
  styleToneOptions_via_VoiceStyleToneOption: StyleToneOption_ListFilter
  """
  ✨ Generated from Field `Voice`.`technicalSpecifications_via_VoiceTechnicalSpecification` of type `[TechnicalSpecification!]!`
  """
  technicalSpecifications_via_VoiceTechnicalSpecification: TechnicalSpecification_ListFilter
  """
  ✨ Generated from Field `Voice`.`timeZones_via_VoiceTimeZone` of type `[TimeZone!]!`
  """
  timeZones_via_VoiceTimeZone: TimeZone_ListFilter
  """
  ✨ Generated from Field `Voice`.`voiceTraits_via_VoiceVoiceTrait` of type `[VoiceTrait!]!`
  """
  voiceTraits_via_VoiceVoiceTrait: VoiceTrait_ListFilter
}
"""
✨ Generated first-row input type for table 'Voice'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Voice_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Voice_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Voice_Filter
}
"""
✨ Generated key input type for table 'Voice'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Voice_Key {
  """
  ✨ Generated from Field `Voice`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Voice`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Voice'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Voice_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Voice_Filter
}
"""
✨ Generated order input type for table 'Voice'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Voice_Order {
  """
  ✨ Generated from Field `Voice`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Voice`.`userId` of type `UUID!`
  """
  userId: OrderDirection
  """
  ✨ Generated from Field `Voice`.`user` of type `User!`
  """
  user: User_Order
  """
  ✨ Generated from Field `Voice`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `Voice`.`description` of type `String`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `Voice`.`name` of type `String!`
  """
  name: OrderDirection
}
"""
✨ Generated data input type for table 'VoiceCategory'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceCategory_Data {
  """
  ✨ Generated from Field `VoiceCategory`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceCategory`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceCategory`.`categoryId` of type `UUID!`
  """
  categoryId: UUID
  """
  ✨ `_expr` server value variant of `categoryId` (✨ Generated from Field `VoiceCategory`.`categoryId` of type `UUID!`)
  """
  categoryId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceCategory`.`category` of type `Category!`
  """
  category: Category_Key
  """
  ✨ Generated from Field `VoiceCategory`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceCategory'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceCategory_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceCategory_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceCategory_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceCategory_Filter!]
  """
  ✨ Generated from Field `VoiceCategory`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceCategory`.`categoryId` of type `UUID!`
  """
  categoryId: UUID_Filter
  """
  ✨ Generated from Field `VoiceCategory`.`category` of type `Category!`
  """
  category: Category_Filter
  """
  ✨ Generated from Field `VoiceCategory`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceCategory'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceCategory_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceCategory_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceCategory_Filter
}
"""
✨ Generated key input type for table 'VoiceCategory'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceCategory_Key {
  """
  ✨ Generated from Field `VoiceCategory`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceCategory`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceCategory`.`categoryId` of type `UUID!`
  """
  categoryId: UUID
  """
  ✨ `_expr` server value variant of `categoryId` (✨ Generated from Field `VoiceCategory`.`categoryId` of type `UUID!`)
  """
  categoryId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceCategory'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceCategory_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceCategory_Filter
}
"""
✨ Generated order input type for table 'VoiceCategory'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceCategory_Order {
  """
  ✨ Generated from Field `VoiceCategory`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceCategory`.`categoryId` of type `UUID!`
  """
  categoryId: OrderDirection
  """
  ✨ Generated from Field `VoiceCategory`.`category` of type `Category!`
  """
  category: Category_Order
  """
  ✨ Generated from Field `VoiceCategory`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceExperience'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceExperience_Data {
  """
  ✨ Generated from Field `VoiceExperience`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceExperience`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceExperience`.`experienceLevelId` of type `UUID!`
  """
  experienceLevelId: UUID
  """
  ✨ `_expr` server value variant of `experienceLevelId` (✨ Generated from Field `VoiceExperience`.`experienceLevelId` of type `UUID!`)
  """
  experienceLevelId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceExperience`.`experienceLevel` of type `ExperienceLevel!`
  """
  experienceLevel: ExperienceLevel_Key
  """
  ✨ Generated from Field `VoiceExperience`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceExperience'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceExperience_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceExperience_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceExperience_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceExperience_Filter!]
  """
  ✨ Generated from Field `VoiceExperience`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceExperience`.`experienceLevelId` of type `UUID!`
  """
  experienceLevelId: UUID_Filter
  """
  ✨ Generated from Field `VoiceExperience`.`experienceLevel` of type `ExperienceLevel!`
  """
  experienceLevel: ExperienceLevel_Filter
  """
  ✨ Generated from Field `VoiceExperience`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceExperience'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceExperience_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceExperience_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceExperience_Filter
}
"""
✨ Generated key input type for table 'VoiceExperience'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceExperience_Key {
  """
  ✨ Generated from Field `VoiceExperience`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceExperience`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceExperience`.`experienceLevelId` of type `UUID!`
  """
  experienceLevelId: UUID
  """
  ✨ `_expr` server value variant of `experienceLevelId` (✨ Generated from Field `VoiceExperience`.`experienceLevelId` of type `UUID!`)
  """
  experienceLevelId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceExperience'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceExperience_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceExperience_Filter
}
"""
✨ Generated order input type for table 'VoiceExperience'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceExperience_Order {
  """
  ✨ Generated from Field `VoiceExperience`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceExperience`.`experienceLevelId` of type `UUID!`
  """
  experienceLevelId: OrderDirection
  """
  ✨ Generated from Field `VoiceExperience`.`experienceLevel` of type `ExperienceLevel!`
  """
  experienceLevel: ExperienceLevel_Order
  """
  ✨ Generated from Field `VoiceExperience`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceLanguage'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceLanguage_Data {
  """
  ✨ Generated from Field `VoiceLanguage`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceLanguage`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceLanguage`.`languageId` of type `UUID!`
  """
  languageId: UUID
  """
  ✨ `_expr` server value variant of `languageId` (✨ Generated from Field `VoiceLanguage`.`languageId` of type `UUID!`)
  """
  languageId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceLanguage`.`language` of type `Language!`
  """
  language: Language_Key
  """
  ✨ Generated from Field `VoiceLanguage`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceLanguage'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceLanguage_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceLanguage_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceLanguage_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceLanguage_Filter!]
  """
  ✨ Generated from Field `VoiceLanguage`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceLanguage`.`languageId` of type `UUID!`
  """
  languageId: UUID_Filter
  """
  ✨ Generated from Field `VoiceLanguage`.`language` of type `Language!`
  """
  language: Language_Filter
  """
  ✨ Generated from Field `VoiceLanguage`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceLanguage'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceLanguage_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceLanguage_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceLanguage_Filter
}
"""
✨ Generated key input type for table 'VoiceLanguage'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceLanguage_Key {
  """
  ✨ Generated from Field `VoiceLanguage`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceLanguage`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceLanguage`.`languageId` of type `UUID!`
  """
  languageId: UUID
  """
  ✨ `_expr` server value variant of `languageId` (✨ Generated from Field `VoiceLanguage`.`languageId` of type `UUID!`)
  """
  languageId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceLanguage'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceLanguage_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceLanguage_Filter
}
"""
✨ Generated order input type for table 'VoiceLanguage'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceLanguage_Order {
  """
  ✨ Generated from Field `VoiceLanguage`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceLanguage`.`languageId` of type `UUID!`
  """
  languageId: OrderDirection
  """
  ✨ Generated from Field `VoiceLanguage`.`language` of type `Language!`
  """
  language: Language_Order
  """
  ✨ Generated from Field `VoiceLanguage`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceProductionQuality'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceProductionQuality_Data {
  """
  ✨ Generated from Field `VoiceProductionQuality`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceProductionQuality`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: UUID
  """
  ✨ `_expr` server value variant of `productionQualityId` (✨ Generated from Field `VoiceProductionQuality`.`productionQualityId` of type `UUID!`)
  """
  productionQualityId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceProductionQuality`.`productionQuality` of type `ProductionQuality!`
  """
  productionQuality: ProductionQuality_Key
  """
  ✨ Generated from Field `VoiceProductionQuality`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceProductionQuality'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceProductionQuality_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceProductionQuality_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceProductionQuality_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceProductionQuality_Filter!]
  """
  ✨ Generated from Field `VoiceProductionQuality`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: UUID_Filter
  """
  ✨ Generated from Field `VoiceProductionQuality`.`productionQuality` of type `ProductionQuality!`
  """
  productionQuality: ProductionQuality_Filter
  """
  ✨ Generated from Field `VoiceProductionQuality`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceProductionQuality'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceProductionQuality_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceProductionQuality_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceProductionQuality_Filter
}
"""
✨ Generated key input type for table 'VoiceProductionQuality'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceProductionQuality_Key {
  """
  ✨ Generated from Field `VoiceProductionQuality`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceProductionQuality`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: UUID
  """
  ✨ `_expr` server value variant of `productionQualityId` (✨ Generated from Field `VoiceProductionQuality`.`productionQualityId` of type `UUID!`)
  """
  productionQualityId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceProductionQuality'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceProductionQuality_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceProductionQuality_Filter
}
"""
✨ Generated order input type for table 'VoiceProductionQuality'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceProductionQuality_Order {
  """
  ✨ Generated from Field `VoiceProductionQuality`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceProductionQuality`.`productionQualityId` of type `UUID!`
  """
  productionQualityId: OrderDirection
  """
  ✨ Generated from Field `VoiceProductionQuality`.`productionQuality` of type `ProductionQuality!`
  """
  productionQuality: ProductionQuality_Order
  """
  ✨ Generated from Field `VoiceProductionQuality`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceRegionalDialect'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceRegionalDialect_Data {
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceRegionalDialect`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: UUID
  """
  ✨ `_expr` server value variant of `regionalDialectId` (✨ Generated from Field `VoiceRegionalDialect`.`regionalDialectId` of type `UUID!`)
  """
  regionalDialectId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`regionalDialect` of type `RegionalDialect!`
  """
  regionalDialect: RegionalDialect_Key
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceRegionalDialect'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceRegionalDialect_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceRegionalDialect_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceRegionalDialect_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceRegionalDialect_Filter!]
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: UUID_Filter
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`regionalDialect` of type `RegionalDialect!`
  """
  regionalDialect: RegionalDialect_Filter
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceRegionalDialect'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceRegionalDialect_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceRegionalDialect_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceRegionalDialect_Filter
}
"""
✨ Generated key input type for table 'VoiceRegionalDialect'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceRegionalDialect_Key {
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceRegionalDialect`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: UUID
  """
  ✨ `_expr` server value variant of `regionalDialectId` (✨ Generated from Field `VoiceRegionalDialect`.`regionalDialectId` of type `UUID!`)
  """
  regionalDialectId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceRegionalDialect'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceRegionalDialect_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceRegionalDialect_Filter
}
"""
✨ Generated order input type for table 'VoiceRegionalDialect'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceRegionalDialect_Order {
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`regionalDialectId` of type `UUID!`
  """
  regionalDialectId: OrderDirection
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`regionalDialect` of type `RegionalDialect!`
  """
  regionalDialect: RegionalDialect_Order
  """
  ✨ Generated from Field `VoiceRegionalDialect`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceSecondaryLanguage'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceSecondaryLanguage_Data {
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceSecondaryLanguage`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: UUID
  """
  ✨ `_expr` server value variant of `secondaryLanguageId` (✨ Generated from Field `VoiceSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`)
  """
  secondaryLanguageId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`secondaryLanguage` of type `SecondaryLanguage!`
  """
  secondaryLanguage: SecondaryLanguage_Key
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceSecondaryLanguage'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceSecondaryLanguage_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceSecondaryLanguage_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceSecondaryLanguage_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceSecondaryLanguage_Filter!]
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: UUID_Filter
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`secondaryLanguage` of type `SecondaryLanguage!`
  """
  secondaryLanguage: SecondaryLanguage_Filter
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceSecondaryLanguage'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceSecondaryLanguage_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceSecondaryLanguage_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceSecondaryLanguage_Filter
}
"""
✨ Generated key input type for table 'VoiceSecondaryLanguage'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceSecondaryLanguage_Key {
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceSecondaryLanguage`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: UUID
  """
  ✨ `_expr` server value variant of `secondaryLanguageId` (✨ Generated from Field `VoiceSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`)
  """
  secondaryLanguageId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceSecondaryLanguage'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceSecondaryLanguage_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceSecondaryLanguage_Filter
}
"""
✨ Generated order input type for table 'VoiceSecondaryLanguage'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceSecondaryLanguage_Order {
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`secondaryLanguageId` of type `UUID!`
  """
  secondaryLanguageId: OrderDirection
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`secondaryLanguage` of type `SecondaryLanguage!`
  """
  secondaryLanguage: SecondaryLanguage_Order
  """
  ✨ Generated from Field `VoiceSecondaryLanguage`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceStudioAvailability'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceStudioAvailability_Data {
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceStudioAvailability`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: UUID
  """
  ✨ `_expr` server value variant of `studioAvailabilityId` (✨ Generated from Field `VoiceStudioAvailability`.`studioAvailabilityId` of type `UUID!`)
  """
  studioAvailabilityId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`studioAvailability` of type `StudioAvailability!`
  """
  studioAvailability: StudioAvailability_Key
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceStudioAvailability'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceStudioAvailability_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceStudioAvailability_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceStudioAvailability_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceStudioAvailability_Filter!]
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: UUID_Filter
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`studioAvailability` of type `StudioAvailability!`
  """
  studioAvailability: StudioAvailability_Filter
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceStudioAvailability'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceStudioAvailability_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceStudioAvailability_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceStudioAvailability_Filter
}
"""
✨ Generated key input type for table 'VoiceStudioAvailability'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceStudioAvailability_Key {
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceStudioAvailability`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: UUID
  """
  ✨ `_expr` server value variant of `studioAvailabilityId` (✨ Generated from Field `VoiceStudioAvailability`.`studioAvailabilityId` of type `UUID!`)
  """
  studioAvailabilityId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceStudioAvailability'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceStudioAvailability_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceStudioAvailability_Filter
}
"""
✨ Generated order input type for table 'VoiceStudioAvailability'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceStudioAvailability_Order {
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`studioAvailabilityId` of type `UUID!`
  """
  studioAvailabilityId: OrderDirection
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`studioAvailability` of type `StudioAvailability!`
  """
  studioAvailability: StudioAvailability_Order
  """
  ✨ Generated from Field `VoiceStudioAvailability`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceStyleToneOption'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceStyleToneOption_Data {
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceStyleToneOption`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: UUID
  """
  ✨ `_expr` server value variant of `styleToneOptionId` (✨ Generated from Field `VoiceStyleToneOption`.`styleToneOptionId` of type `UUID!`)
  """
  styleToneOptionId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`styleToneOption` of type `StyleToneOption!`
  """
  styleToneOption: StyleToneOption_Key
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceStyleToneOption'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceStyleToneOption_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceStyleToneOption_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceStyleToneOption_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceStyleToneOption_Filter!]
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: UUID_Filter
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`styleToneOption` of type `StyleToneOption!`
  """
  styleToneOption: StyleToneOption_Filter
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceStyleToneOption'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceStyleToneOption_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceStyleToneOption_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceStyleToneOption_Filter
}
"""
✨ Generated key input type for table 'VoiceStyleToneOption'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceStyleToneOption_Key {
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceStyleToneOption`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: UUID
  """
  ✨ `_expr` server value variant of `styleToneOptionId` (✨ Generated from Field `VoiceStyleToneOption`.`styleToneOptionId` of type `UUID!`)
  """
  styleToneOptionId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceStyleToneOption'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceStyleToneOption_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceStyleToneOption_Filter
}
"""
✨ Generated order input type for table 'VoiceStyleToneOption'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceStyleToneOption_Order {
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`styleToneOptionId` of type `UUID!`
  """
  styleToneOptionId: OrderDirection
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`styleToneOption` of type `StyleToneOption!`
  """
  styleToneOption: StyleToneOption_Order
  """
  ✨ Generated from Field `VoiceStyleToneOption`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceTechnicalSpecification'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceTechnicalSpecification_Data {
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceTechnicalSpecification`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: UUID
  """
  ✨ `_expr` server value variant of `technicalSpecificationId` (✨ Generated from Field `VoiceTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`)
  """
  technicalSpecificationId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`technicalSpecification` of type `TechnicalSpecification!`
  """
  technicalSpecification: TechnicalSpecification_Key
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceTechnicalSpecification'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceTechnicalSpecification_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceTechnicalSpecification_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceTechnicalSpecification_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceTechnicalSpecification_Filter!]
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: UUID_Filter
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`technicalSpecification` of type `TechnicalSpecification!`
  """
  technicalSpecification: TechnicalSpecification_Filter
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceTechnicalSpecification'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceTechnicalSpecification_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceTechnicalSpecification_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceTechnicalSpecification_Filter
}
"""
✨ Generated key input type for table 'VoiceTechnicalSpecification'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceTechnicalSpecification_Key {
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceTechnicalSpecification`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: UUID
  """
  ✨ `_expr` server value variant of `technicalSpecificationId` (✨ Generated from Field `VoiceTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`)
  """
  technicalSpecificationId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceTechnicalSpecification'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceTechnicalSpecification_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceTechnicalSpecification_Filter
}
"""
✨ Generated order input type for table 'VoiceTechnicalSpecification'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceTechnicalSpecification_Order {
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`technicalSpecificationId` of type `UUID!`
  """
  technicalSpecificationId: OrderDirection
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`technicalSpecification` of type `TechnicalSpecification!`
  """
  technicalSpecification: TechnicalSpecification_Order
  """
  ✨ Generated from Field `VoiceTechnicalSpecification`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceTimeZone'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceTimeZone_Data {
  """
  ✨ Generated from Field `VoiceTimeZone`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceTimeZone`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: UUID
  """
  ✨ `_expr` server value variant of `timeZoneId` (✨ Generated from Field `VoiceTimeZone`.`timeZoneId` of type `UUID!`)
  """
  timeZoneId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceTimeZone`.`timeZone` of type `TimeZone!`
  """
  timeZone: TimeZone_Key
  """
  ✨ Generated from Field `VoiceTimeZone`.`voice` of type `Voice!`
  """
  voice: Voice_Key
}
"""
✨ Generated filter input type for table 'VoiceTimeZone'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceTimeZone_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceTimeZone_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceTimeZone_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceTimeZone_Filter!]
  """
  ✨ Generated from Field `VoiceTimeZone`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: UUID_Filter
  """
  ✨ Generated from Field `VoiceTimeZone`.`timeZone` of type `TimeZone!`
  """
  timeZone: TimeZone_Filter
  """
  ✨ Generated from Field `VoiceTimeZone`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
}
"""
✨ Generated first-row input type for table 'VoiceTimeZone'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceTimeZone_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceTimeZone_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceTimeZone_Filter
}
"""
✨ Generated key input type for table 'VoiceTimeZone'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceTimeZone_Key {
  """
  ✨ Generated from Field `VoiceTimeZone`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceTimeZone`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: UUID
  """
  ✨ `_expr` server value variant of `timeZoneId` (✨ Generated from Field `VoiceTimeZone`.`timeZoneId` of type `UUID!`)
  """
  timeZoneId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceTimeZone'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceTimeZone_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceTimeZone_Filter
}
"""
✨ Generated order input type for table 'VoiceTimeZone'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceTimeZone_Order {
  """
  ✨ Generated from Field `VoiceTimeZone`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceTimeZone`.`timeZoneId` of type `UUID!`
  """
  timeZoneId: OrderDirection
  """
  ✨ Generated from Field `VoiceTimeZone`.`timeZone` of type `TimeZone!`
  """
  timeZone: TimeZone_Order
  """
  ✨ Generated from Field `VoiceTimeZone`.`voice` of type `Voice!`
  """
  voice: Voice_Order
}
"""
✨ Generated data input type for table 'VoiceTrait'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceTrait_Data {
  """
  ✨ Generated from Field `VoiceTrait`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `VoiceTrait`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceTrait`.`category` of type `String!`
  """
  category: String
  """
  ✨ `_expr` server value variant of `category` (✨ Generated from Field `VoiceTrait`.`category` of type `String!`)
  """
  category_expr: String_Expr
  """
  ✨ Generated from Field `VoiceTrait`.`value` of type `String!`
  """
  value: String
  """
  ✨ `_expr` server value variant of `value` (✨ Generated from Field `VoiceTrait`.`value` of type `String!`)
  """
  value_expr: String_Expr
}
"""
✨ Generated filter input type for table 'VoiceTrait'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceTrait_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceTrait_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceTrait_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceTrait_Filter!]
  """
  ✨ Generated from Field `VoiceTrait`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `VoiceTrait`.`category` of type `String!`
  """
  category: String_Filter
  """
  ✨ Generated from Field `VoiceTrait`.`value` of type `String!`
  """
  value: String_Filter
  """
  ✨ Generated from Field `VoiceTrait`.`nFTVoiceTraits_on_voiceTrait` of type `[NFTVoiceTrait!]!`
  """
  nFTVoiceTraits_on_voiceTrait: NFTVoiceTrait_ListFilter
  """
  ✨ Generated from Field `VoiceTrait`.`userVoiceTraits_on_voiceTrait` of type `[UserVoiceTrait!]!`
  """
  userVoiceTraits_on_voiceTrait: UserVoiceTrait_ListFilter
  """
  ✨ Generated from Field `VoiceTrait`.`voiceVoiceTraits_on_voiceTrait` of type `[VoiceVoiceTrait!]!`
  """
  voiceVoiceTraits_on_voiceTrait: VoiceVoiceTrait_ListFilter
  """
  ✨ Generated from Field `VoiceTrait`.`nfts_via_NFTVoiceTrait` of type `[NFT!]!`
  """
  nfts_via_NFTVoiceTrait: NFT_ListFilter
  """
  ✨ Generated from Field `VoiceTrait`.`users_via_UserVoiceTrait` of type `[User!]!`
  """
  users_via_UserVoiceTrait: User_ListFilter
  """
  ✨ Generated from Field `VoiceTrait`.`voices_via_VoiceVoiceTrait` of type `[Voice!]!`
  """
  voices_via_VoiceVoiceTrait: Voice_ListFilter
}
"""
✨ Generated first-row input type for table 'VoiceTrait'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceTrait_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceTrait_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceTrait_Filter
}
"""
✨ Generated key input type for table 'VoiceTrait'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceTrait_Key {
  """
  ✨ Generated from Field `VoiceTrait`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `VoiceTrait`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceTrait'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceTrait_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceTrait_Filter
}
"""
✨ Generated order input type for table 'VoiceTrait'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceTrait_Order {
  """
  ✨ Generated from Field `VoiceTrait`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `VoiceTrait`.`category` of type `String!`
  """
  category: OrderDirection
  """
  ✨ Generated from Field `VoiceTrait`.`value` of type `String!`
  """
  value: OrderDirection
}
"""
✨ Generated data input type for table 'VoiceVoiceTrait'. It includes all necessary fields for creating or upserting rows into table.
"""
input VoiceVoiceTrait_Data {
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceVoiceTrait`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: UUID
  """
  ✨ `_expr` server value variant of `voiceTraitId` (✨ Generated from Field `VoiceVoiceTrait`.`voiceTraitId` of type `UUID!`)
  """
  voiceTraitId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voice` of type `Voice!`
  """
  voice: Voice_Key
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceTrait` of type `VoiceTrait!`
  """
  voiceTrait: VoiceTrait_Key
}
"""
✨ Generated filter input type for table 'VoiceVoiceTrait'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input VoiceVoiceTrait_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [VoiceVoiceTrait_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: VoiceVoiceTrait_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [VoiceVoiceTrait_Filter!]
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceId` of type `UUID!`
  """
  voiceId: UUID_Filter
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: UUID_Filter
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voice` of type `Voice!`
  """
  voice: Voice_Filter
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceTrait` of type `VoiceTrait!`
  """
  voiceTrait: VoiceTrait_Filter
}
"""
✨ Generated first-row input type for table 'VoiceVoiceTrait'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input VoiceVoiceTrait_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [VoiceVoiceTrait_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: VoiceVoiceTrait_Filter
}
"""
✨ Generated key input type for table 'VoiceVoiceTrait'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input VoiceVoiceTrait_Key {
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceId` of type `UUID!`
  """
  voiceId: UUID
  """
  ✨ `_expr` server value variant of `voiceId` (✨ Generated from Field `VoiceVoiceTrait`.`voiceId` of type `UUID!`)
  """
  voiceId_expr: UUID_Expr
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: UUID
  """
  ✨ `_expr` server value variant of `voiceTraitId` (✨ Generated from Field `VoiceVoiceTrait`.`voiceTraitId` of type `UUID!`)
  """
  voiceTraitId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'VoiceVoiceTrait'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input VoiceVoiceTrait_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: VoiceVoiceTrait_Filter
}
"""
✨ Generated order input type for table 'VoiceVoiceTrait'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input VoiceVoiceTrait_Order {
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceId` of type `UUID!`
  """
  voiceId: OrderDirection
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceTraitId` of type `UUID!`
  """
  voiceTraitId: OrderDirection
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voice` of type `Voice!`
  """
  voice: Voice_Order
  """
  ✨ Generated from Field `VoiceVoiceTrait`.`voiceTrait` of type `VoiceTrait!`
  """
  voiceTrait: VoiceTrait_Order
}
