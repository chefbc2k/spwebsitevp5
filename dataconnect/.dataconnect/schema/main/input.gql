"""
✨ `NFT_KeyOutput` returns the primary key fields of table type `NFT`.

It has the same format as `NFT_Key`, but is only used as mutation return value.
"""
scalar NFT_KeyOutput
"""
✨ `Ownership_KeyOutput` returns the primary key fields of table type `Ownership`.

It has the same format as `Ownership_Key`, but is only used as mutation return value.
"""
scalar Ownership_KeyOutput
"""
✨ `Transaction_KeyOutput` returns the primary key fields of table type `Transaction`.

It has the same format as `Transaction_Key`, but is only used as mutation return value.
"""
scalar Transaction_KeyOutput
"""
✨ `User_KeyOutput` returns the primary key fields of table type `User`.

It has the same format as `User_Key`, but is only used as mutation return value.
"""
scalar User_KeyOutput
"""
✨ Generated data input type for table 'NFT'. It includes all necessary fields for creating or upserting rows into table.
"""
input NFT_Data {
  """
  ✨ Generated from Field `NFT`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `NFT`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `NFT`.`creatorId` of type `UUID!`
  """
  creatorId: UUID
  """
  ✨ `_expr` server value variant of `creatorId` (✨ Generated from Field `NFT`.`creatorId` of type `UUID!`)
  """
  creatorId_expr: UUID_Expr
  """
  ✨ Generated from Field `NFT`.`creator` of type `User!`
  """
  creator: User_Key
  """
  ✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `NFT`.`description` of type `String`
  """
  description: String
  """
  ✨ `_expr` server value variant of `description` (✨ Generated from Field `NFT`.`description` of type `String`)
  """
  description_expr: String_Expr
  """
  ✨ Generated from Field `NFT`.`fileUrl` of type `String!`
  """
  fileUrl: String
  """
  ✨ `_expr` server value variant of `fileUrl` (✨ Generated from Field `NFT`.`fileUrl` of type `String!`)
  """
  fileUrl_expr: String_Expr
  """
  ✨ Generated from Field `NFT`.`price` of type `Float!`
  """
  price: Float
  """
  ✨ Generated from Field `NFT`.`title` of type `String!`
  """
  title: String
  """
  ✨ `_expr` server value variant of `title` (✨ Generated from Field `NFT`.`title` of type `String!`)
  """
  title_expr: String_Expr
}
"""
✨ Generated filter input type for table 'NFT'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input NFT_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [NFT_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: NFT_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [NFT_Filter!]
  """
  ✨ Generated from Field `NFT`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `NFT`.`creatorId` of type `UUID!`
  """
  creatorId: UUID_Filter
  """
  ✨ Generated from Field `NFT`.`creator` of type `User!`
  """
  creator: User_Filter
  """
  ✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `NFT`.`description` of type `String`
  """
  description: String_Filter
  """
  ✨ Generated from Field `NFT`.`fileUrl` of type `String!`
  """
  fileUrl: String_Filter
  """
  ✨ Generated from Field `NFT`.`price` of type `Float!`
  """
  price: Float_Filter
  """
  ✨ Generated from Field `NFT`.`title` of type `String!`
  """
  title: String_Filter
  """
  ✨ Generated from Field `NFT`.`ownerships_on_nft` of type `[Ownership!]!`
  """
  ownerships_on_nft: Ownership_ListFilter
  """
  ✨ Generated from Field `NFT`.`transactions_on_nft` of type `[Transaction!]!`
  """
  transactions_on_nft: Transaction_ListFilter
  """
  ✨ Generated from Field `NFT`.`users_via_Ownership` of type `[User!]!`
  """
  users_via_Ownership: User_ListFilter
}
"""
✨ Generated first-row input type for table 'NFT'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input NFT_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [NFT_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: NFT_Filter
}
"""
✨ Generated key input type for table 'NFT'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input NFT_Key {
  """
  ✨ Generated from Field `NFT`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `NFT`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'NFT'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input NFT_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: NFT_Filter
}
"""
✨ Generated order input type for table 'NFT'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input NFT_Order {
  """
  ✨ Generated from Field `NFT`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `NFT`.`creatorId` of type `UUID!`
  """
  creatorId: OrderDirection
  """
  ✨ Generated from Field `NFT`.`creator` of type `User!`
  """
  creator: User_Order
  """
  ✨ Generated from Field `NFT`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `NFT`.`description` of type `String`
  """
  description: OrderDirection
  """
  ✨ Generated from Field `NFT`.`fileUrl` of type `String!`
  """
  fileUrl: OrderDirection
  """
  ✨ Generated from Field `NFT`.`price` of type `Float!`
  """
  price: OrderDirection
  """
  ✨ Generated from Field `NFT`.`title` of type `String!`
  """
  title: OrderDirection
}
"""
✨ Generated data input type for table 'Ownership'. It includes all necessary fields for creating or upserting rows into table.
"""
input Ownership_Data {
  """
  ✨ Generated from Field `Ownership`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Ownership`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`
  """
  ownerId: UUID
  """
  ✨ `_expr` server value variant of `ownerId` (✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`)
  """
  ownerId_expr: UUID_Expr
  """
  ✨ Generated from Field `Ownership`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `Ownership`.`owner` of type `User!`
  """
  owner: User_Key
  """
  ✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`
  """
  acquiredAt: Timestamp
  """
  ✨ `_expr` server value variant of `acquiredAt` (✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`)
  """
  acquiredAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `acquiredAt` (✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`)
  """
  acquiredAt_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'Ownership'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Ownership_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Ownership_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Ownership_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Ownership_Filter!]
  """
  ✨ Generated from Field `Ownership`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`
  """
  ownerId: UUID_Filter
  """
  ✨ Generated from Field `Ownership`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `Ownership`.`owner` of type `User!`
  """
  owner: User_Filter
  """
  ✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`
  """
  acquiredAt: Timestamp_Filter
}
"""
✨ Generated first-row input type for table 'Ownership'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Ownership_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Ownership_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Ownership_Filter
}
"""
✨ Generated key input type for table 'Ownership'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Ownership_Key {
  """
  ✨ Generated from Field `Ownership`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Ownership`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`
  """
  ownerId: UUID
  """
  ✨ `_expr` server value variant of `ownerId` (✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`)
  """
  ownerId_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Ownership'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Ownership_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Ownership_Filter
}
"""
✨ Generated order input type for table 'Ownership'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Ownership_Order {
  """
  ✨ Generated from Field `Ownership`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `Ownership`.`ownerId` of type `UUID!`
  """
  ownerId: OrderDirection
  """
  ✨ Generated from Field `Ownership`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `Ownership`.`owner` of type `User!`
  """
  owner: User_Order
  """
  ✨ Generated from Field `Ownership`.`acquiredAt` of type `Timestamp!`
  """
  acquiredAt: OrderDirection
}
"""
✨ Generated data input type for table 'Transaction'. It includes all necessary fields for creating or upserting rows into table.
"""
input Transaction_Data {
  """
  ✨ Generated from Field `Transaction`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Transaction`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `Transaction`.`buyerId` of type `UUID!`
  """
  buyerId: UUID
  """
  ✨ `_expr` server value variant of `buyerId` (✨ Generated from Field `Transaction`.`buyerId` of type `UUID!`)
  """
  buyerId_expr: UUID_Expr
  """
  ✨ Generated from Field `Transaction`.`nftId` of type `UUID!`
  """
  nftId: UUID
  """
  ✨ `_expr` server value variant of `nftId` (✨ Generated from Field `Transaction`.`nftId` of type `UUID!`)
  """
  nftId_expr: UUID_Expr
  """
  ✨ Generated from Field `Transaction`.`sellerId` of type `UUID!`
  """
  sellerId: UUID
  """
  ✨ `_expr` server value variant of `sellerId` (✨ Generated from Field `Transaction`.`sellerId` of type `UUID!`)
  """
  sellerId_expr: UUID_Expr
  """
  ✨ Generated from Field `Transaction`.`buyer` of type `User!`
  """
  buyer: User_Key
  """
  ✨ Generated from Field `Transaction`.`nft` of type `NFT!`
  """
  nft: NFT_Key
  """
  ✨ Generated from Field `Transaction`.`seller` of type `User!`
  """
  seller: User_Key
  """
  ✨ Generated from Field `Transaction`.`price` of type `Float!`
  """
  price: Float
  """
  ✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`
  """
  transactionDate: Timestamp
  """
  ✨ `_expr` server value variant of `transactionDate` (✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`)
  """
  transactionDate_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `transactionDate` (✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`)
  """
  transactionDate_time: Timestamp_Relative
}
"""
✨ Generated filter input type for table 'Transaction'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input Transaction_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [Transaction_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: Transaction_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [Transaction_Filter!]
  """
  ✨ Generated from Field `Transaction`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `Transaction`.`buyerId` of type `UUID!`
  """
  buyerId: UUID_Filter
  """
  ✨ Generated from Field `Transaction`.`nftId` of type `UUID!`
  """
  nftId: UUID_Filter
  """
  ✨ Generated from Field `Transaction`.`sellerId` of type `UUID!`
  """
  sellerId: UUID_Filter
  """
  ✨ Generated from Field `Transaction`.`buyer` of type `User!`
  """
  buyer: User_Filter
  """
  ✨ Generated from Field `Transaction`.`nft` of type `NFT!`
  """
  nft: NFT_Filter
  """
  ✨ Generated from Field `Transaction`.`seller` of type `User!`
  """
  seller: User_Filter
  """
  ✨ Generated from Field `Transaction`.`price` of type `Float!`
  """
  price: Float_Filter
  """
  ✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`
  """
  transactionDate: Timestamp_Filter
}
"""
✨ Generated first-row input type for table 'Transaction'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input Transaction_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [Transaction_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: Transaction_Filter
}
"""
✨ Generated key input type for table 'Transaction'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input Transaction_Key {
  """
  ✨ Generated from Field `Transaction`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `Transaction`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'Transaction'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input Transaction_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: Transaction_Filter
}
"""
✨ Generated order input type for table 'Transaction'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input Transaction_Order {
  """
  ✨ Generated from Field `Transaction`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`buyerId` of type `UUID!`
  """
  buyerId: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`nftId` of type `UUID!`
  """
  nftId: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`sellerId` of type `UUID!`
  """
  sellerId: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`buyer` of type `User!`
  """
  buyer: User_Order
  """
  ✨ Generated from Field `Transaction`.`nft` of type `NFT!`
  """
  nft: NFT_Order
  """
  ✨ Generated from Field `Transaction`.`seller` of type `User!`
  """
  seller: User_Order
  """
  ✨ Generated from Field `Transaction`.`price` of type `Float!`
  """
  price: OrderDirection
  """
  ✨ Generated from Field `Transaction`.`transactionDate` of type `Timestamp!`
  """
  transactionDate: OrderDirection
}
"""
✨ Generated data input type for table 'User'. It includes all necessary fields for creating or upserting rows into table.
"""
input User_Data {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
  """
  ✨ Generated from Field `User`.`auth` of type `String!`
  """
  auth: String
  """
  ✨ `_expr` server value variant of `auth` (✨ Generated from Field `User`.`auth` of type `String!`)
  """
  auth_expr: String_Expr
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp
  """
  ✨ `_expr` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_expr: Timestamp_Expr
  """
  ✨ `_time` server value variant of `createdAt` (✨ Generated from Field `User`.`createdAt` of type `Timestamp!`)
  """
  createdAt_time: Timestamp_Relative
  """
  ✨ Generated from Field `User`.`email` of type `String!`
  """
  email: String
  """
  ✨ `_expr` server value variant of `email` (✨ Generated from Field `User`.`email` of type `String!`)
  """
  email_expr: String_Expr
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: String
  """
  ✨ `_expr` server value variant of `username` (✨ Generated from Field `User`.`username` of type `String!`)
  """
  username_expr: String_Expr
}
"""
✨ Generated filter input type for table 'User'. This input allows filtering objects using various conditions. Use `_or`, `_and`, and `_not` to compose complex filters.
"""
input User_Filter {
  """
  Apply multiple filter conditions using `AND` logic.
  """
  _and: [User_Filter!]
  """
  Negate the result of the provided filter condition.
  """
  _not: User_Filter
  """
  Apply multiple filter conditions using `OR` logic.
  """
  _or: [User_Filter!]
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID_Filter
  """
  ✨ Generated from Field `User`.`auth` of type `String!`
  """
  auth: String_Filter
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: Timestamp_Filter
  """
  ✨ Generated from Field `User`.`email` of type `String!`
  """
  email: String_Filter
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: String_Filter
  """
  ✨ Generated from Field `User`.`nfts_on_creator` of type `[NFT!]!`
  """
  nfts_on_creator: NFT_ListFilter
  """
  ✨ Generated from Field `User`.`ownerships_on_owner` of type `[Ownership!]!`
  """
  ownerships_on_owner: Ownership_ListFilter
  """
  ✨ Generated from Field `User`.`transactions_on_buyer` of type `[Transaction!]!`
  """
  transactions_on_buyer: Transaction_ListFilter
  """
  ✨ Generated from Field `User`.`transactions_on_seller` of type `[Transaction!]!`
  """
  transactions_on_seller: Transaction_ListFilter
  """
  ✨ Generated from Field `User`.`nfts_via_Ownership` of type `[NFT!]!`
  """
  nfts_via_Ownership: NFT_ListFilter
}
"""
✨ Generated first-row input type for table 'User'. This input selects the first row matching the filter criteria, ordered according to the specified conditions.
"""
input User_FirstRow {
  """
  Order the result by the specified fields.
  """
  orderBy: [User_Order!]
  """
  Filters rows based on the specified conditions.
  """
  where: User_Filter
}
"""
✨ Generated key input type for table 'User'. It represents the primary key fields used to uniquely identify a row in the table.
"""
input User_Key {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: UUID
  """
  ✨ `_expr` server value variant of `id` (✨ Generated from Field `User`.`id` of type `UUID!`)
  """
  id_expr: UUID_Expr
}
"""
✨ Generated list filter input type for table 'User'. This input applies filtering logic based on the count or existence of related objects that matches certain criteria.
"""
input User_ListFilter {
  """
  The desired number of objects that match the condition (defaults to at least one).
  """
  count: Int_Filter = {gt:0}
  """
  Condition of the related objects to filter for.
  """
  exist: User_Filter
}
"""
✨ Generated order input type for table 'User'. This input defines the sorting order of rows in query results based on one or more fields.
"""
input User_Order {
  """
  ✨ Generated from Field `User`.`id` of type `UUID!`
  """
  id: OrderDirection
  """
  ✨ Generated from Field `User`.`auth` of type `String!`
  """
  auth: OrderDirection
  """
  ✨ Generated from Field `User`.`createdAt` of type `Timestamp!`
  """
  createdAt: OrderDirection
  """
  ✨ Generated from Field `User`.`email` of type `String!`
  """
  email: OrderDirection
  """
  ✨ Generated from Field `User`.`username` of type `String!`
  """
  username: OrderDirection
}
